"use strict";(self.webpackChunkronamosa_github_io=self.webpackChunkronamosa_github_io||[]).push([[4317],{28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>c});var s=i(96540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}},41652:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"study/CKS/Microservice Vulnerability/VulnerableOSLevelSecurity","title":"OS Level Security Domains","description":"Security Contexts","source":"@site/docs/study/CKS/4. Microservice Vulnerability/VulnerableOSLevelSecurity.md","sourceDirName":"study/CKS/4. Microservice Vulnerability","slug":"/study/CKS/Microservice Vulnerability/VulnerableOSLevelSecurity","permalink":"/docs/study/CKS/Microservice Vulnerability/VulnerableOSLevelSecurity","draft":false,"unlisted":false,"editUrl":"https://github.com/ronamosa/ronamosa.github.io/edit/main/website/docs/study/CKS/4. Microservice Vulnerability/VulnerableOSLevelSecurity.md","tags":[],"version":"current","lastUpdatedBy":"Ron Amosa","lastUpdatedAt":1758526302000,"frontMatter":{"title":"OS Level Security Domains"},"sidebar":"docsSidebar","previous":{"title":"Mutual TLS (mTLS)","permalink":"/docs/study/CKS/Microservice Vulnerability/VulnerableMTLS"},"next":{"title":"Manage Kubernetes Secrets","permalink":"/docs/study/CKS/Microservice Vulnerability/VulnerableSecrets"}}');var r=i(74848),t=i(28453);const l={title:"OS Level Security Domains"},c=void 0,o={},a=[{value:"Security Contexts",id:"security-contexts",level:2},{value:"container as non-root",id:"container-as-non-root",level:3},{value:"Privileged",id:"privileged",level:2},{value:"privesc",id:"privesc",level:3},{value:"Pod Security Policies (deprecated)",id:"pod-security-policies-deprecated",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"security-contexts",children:"Security Contexts"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#podsecuritycontext-v1-core",children:"podsecuritycontext docs"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"controls: userID, groupID, groups"}),"\n",(0,r.jsx)(n.li,{children:"pod level & container level"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["lookup ",(0,r.jsx)(n.code,{children:"podSecurityContext"})," for available attributes"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# this is POD level\nspec:\n  securityContext:\n    runAsUser: 1000\n    runAsGroup: 3000\n  containers:\n"})}),"\n",(0,r.jsx)(n.p,{children:"effectively runs as uid=1000 so no root!"}),"\n",(0,r.jsx)(n.h3,{id:"container-as-non-root",children:"container as non-root"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# this is CONTAINER level\nspec:\n  securityContext:\n    runAsUser: 1000\n    runAsGroup: 3000\n  containers:\n  - command:\n  ...\n  ...\n    securityContext:\n      runAsNonRoot: true\n  dnsPolicy: ClusterFirst\n"})}),"\n",(0,r.jsx)(n.h2,{id:"privileged",children:"Privileged"}),"\n",(0,r.jsx)(n.p,{children:"what it means = container user=0 directly maps to host user=0 (root)"}),"\n",(0,r.jsx)(n.p,{children:"default is unprivileged"}),"\n",(0,r.jsxs)(n.p,{children:["enable via cli: ",(0,r.jsx)(n.code,{children:"docker run --privileged"})]}),"\n",(0,r.jsxs)(n.p,{children:["enable via ",(0,r.jsx)(n.code,{children:"securityContext"})," like:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# this is CONTAINER level\nspec:\n  containers:\n  - command:\n  ...\n  ...\n    securityContext:\n      privileged: true\n  dnsPolicy: ClusterFirst\n"})}),"\n",(0,r.jsx)(n.h3,{id:"privesc",children:"privesc"}),"\n",(0,r.jsxs)(n.p,{children:["by default, k8s allows privesc via ",(0,r.jsx)(n.code,{children:"allowPrivilegeEscalation"})," set to true by default."]}),"\n",(0,r.jsx)(n.p,{children:"disable"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# this is CONTAINER level\nspec:\n  containers:\n  - command:\n  ...\n  ...\n    securityContext:\n      allowPrivilegeEscalation: false\n  dnsPolicy: ClusterFirst\n"})}),"\n",(0,r.jsx)(n.h2,{id:"pod-security-policies-deprecated",children:"Pod Security Policies (deprecated)"}),"\n",(0,r.jsxs)(n.p,{children:["enable via kube-apiserver.yaml - add to the command ",(0,r.jsx)(n.code,{children:"- --enable-admission-plugins=NodeRestriction,PodSecurityPolicy"})]}),"\n",(0,r.jsx)(n.p,{children:"example yaml and just add what policices you want"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: default\nspec:\n  privileged: false  # Don't allow privileged pods!\n  allowPrivilegeEscalation: false # added\n  # The rest fills in some required fields.\n  seLinux:\n    rule: RunAsAny\n  supplementalGroups:\n    rule: RunAsAny\n  runAsUser:\n    rule: RunAsAny\n  fsGroup:\n    rule: RunAsAny\n  volumes:\n  - '*'\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Understand: If you enable PSP, then using PSP will be enforced on all resources, whoever is creating the resources must be able to see this ",(0,r.jsx)(n.code,{children:"default"})," PSP to use it. If I ",(0,r.jsx)(n.code,{children:"k create deploy nginx --image=nginx"})," this will NOT work but if I do ",(0,r.jsx)(n.code,{children:"k run nginx --image=nginx"})," it WORKS."]}),"\n",(0,r.jsxs)(n.p,{children:["Why? because I am admin when I call the resource to be created i.e. pod/nginx but when I'm calling ",(0,r.jsx)(n.code,{children:"deploy"})," the deploy resource calls the pod create resource but doesn't have admin permissions to read the PSP to create the resource."]}),"\n",(0,r.jsxs)(n.p,{children:["solution? give the default service account to SEE the PSP. Create a role and bind it to the default service account to see the resource ",(0,r.jsx)(n.code,{children:"podsecuritypolicies"})]}),"\n",(0,r.jsx)(n.p,{children:"i.e."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"k create role psp-access --verb=use --resource=podsecuritypolicies\nk create rolebinding psp-access --role=psp-access --serviceaccount=default:default\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);