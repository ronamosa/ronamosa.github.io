"use strict";(self.webpackChunkronamosa_github_io=self.webpackChunkronamosa_github_io||[]).push([[2993],{18909:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/ecsworkshop-success-ee945edb3dfb49dc312ad6fd8a9f8e1f.png"},24915:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/ecsworkshop-service2-e37222fdf320dee2f4aadbec14d10f96.png"},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(96540);const i={},o=s.createContext(i);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}},32477:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/ecsworkshop-cluster1-78bae1af438ecbfb51ca7a156972532f.png"},36135:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/ecsworkshop-logs-70cd6f8b5a76ea8d03634257e8da0670.png"},50424:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/ecsworkshop-service1-f00d3331edbbc73e6294583ab6c40331.png"},51270:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/ecsworkshop-cluster2-afa696cdf640731b93ee07382eb8d091.png"},72204:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"engineer/AWS/AWS-ECS-Cats-n-Dogs","title":"AWS Workshop ECS Cats and Dogs - Part 1","description":"- ECS Workshop: ECS Cats and Dogs","source":"@site/docs/engineer/AWS/AWS-ECS-Cats-n-Dogs.md","sourceDirName":"engineer/AWS","slug":"/engineer/AWS/AWS-ECS-Cats-n-Dogs","permalink":"/docs/engineer/AWS/AWS-ECS-Cats-n-Dogs","draft":false,"unlisted":false,"editUrl":"https://github.com/ronamosa/ronamosa.github.io/edit/main/website/docs/engineer/AWS/AWS-ECS-Cats-n-Dogs.md","tags":[],"version":"current","lastUpdatedBy":"Ron Amosa","lastUpdatedAt":1758526302000,"frontMatter":{"title":"AWS Workshop ECS Cats and Dogs - Part 1"},"sidebar":"docsSidebar","previous":{"title":"AWS Workshop ECS Capacity Providers","permalink":"/docs/engineer/AWS/AWS-ECS-3CapacityProviders"},"next":{"title":"TechNesian Live Stream: Cloud Demo Notes","permalink":"/docs/engineer/AWS/CloudDemoNotes"}}');var i=t(74848),o=t(28453);const a={title:"AWS Workshop ECS Cats and Dogs - Part 1"},r=void 0,c={},l=[{value:"Workshop Type",id:"workshop-type",level:2},{value:"Create an IAM User with AdministratorAccess",id:"create-an-iam-user-with-administratoraccess",level:2},{value:"Stack Deployment",id:"stack-deployment",level:2},{value:"IAM Role",id:"iam-role",level:3},{value:"Create ECR x 3",id:"create-ecr-x-3",level:2},{value:"Docker build",id:"docker-build",level:2},{value:"Docker login ECR",id:"docker-login-ecr",level:3},{value:"Docker Tag &amp; Push",id:"docker-tag--push",level:3},{value:"ECS Create a Cluster",id:"ecs-create-a-cluster",level:2},{value:"Task Definitions",id:"task-definitions",level:2},{value:"Cats",id:"cats",level:3},{value:"Dogs",id:"dogs",level:3},{value:"ECS Task IAM Role",id:"ecs-task-iam-role",level:3},{value:"Create Service",id:"create-service",level:2},{value:"ALB",id:"alb",level:3},{value:"Target Group",id:"target-group",level:3},{value:"Web Service",id:"web-service",level:3},{value:"Cats Service",id:"cats-service",level:3},{value:"Dogs Service",id:"dogs-service",level:3},{value:"Check Service",id:"check-service",level:2},{value:"Appendix",id:"appendix",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.admonition,{title:"Workshop Links",type:"tip",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["ECS Workshop: ",(0,i.jsx)(n.a,{href:"https://catalog.us-east-1.prod.workshops.aws/workshops/8c9036a7-7564-434c-b558-3588754e21f5/en-US",children:"ECS Cats and Dogs"})]}),"\n"]})}),"\n",(0,i.jsx)(n.h2,{id:"workshop-type",children:"Workshop Type"}),"\n",(0,i.jsx)(n.p,{children:"There are TWO options for the instructions:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"AWS Event ~ you're participating in an immersion day etc"}),"\n",(0,i.jsx)(n.li,{children:"Own account ~ you're going lone wolf in your own account."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"create-an-iam-user-with-administratoraccess",children:"Create an IAM User with AdministratorAccess"}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsx)(n.p,{children:"Only do this step if you don't have an ADMIN level user available to use."})}),"\n",(0,i.jsxs)(n.p,{children:["Only doing this so you're not using the ROOT user account, basically create an ",(0,i.jsx)(n.code,{children:"Administrator"})," user and log in with that."]}),"\n",(0,i.jsxs)(n.p,{children:["username = ",(0,i.jsx)(n.code,{children:"Administrator"}),"\npolicy, attach inline = ",(0,i.jsx)(n.code,{children:"AdministratorAccess"})]}),"\n",(0,i.jsx)(n.p,{children:"You will use this Role in the next section, but if you already have a user that has Admin access, just use that one and don't mess around with this extra admin user. It makes things more confusing."}),"\n",(0,i.jsx)(n.h2,{id:"stack-deployment",children:"Stack Deployment"}),"\n",(0,i.jsx)(n.p,{children:"This workshop is designed to work in these regions:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"us-east-1 (N.Virginia)"}),"\n",(0,i.jsx)(n.li,{children:"us-east-2 (Ohio)"}),"\n",(0,i.jsx)(n.li,{children:"us-west-2 (Oregon)"}),"\n",(0,i.jsx)(n.li,{children:"eu-west-1 (Ireland)"}),"\n",(0,i.jsx)(n.li,{children:"eu-west-3 (Paris)"}),"\n",(0,i.jsx)(n.li,{children:"ap-northeast-1 (Tokyo)"}),"\n",(0,i.jsx)(n.li,{children:"ap-northeast-2 (Seoul)"}),"\n",(0,i.jsx)(n.li,{children:"ap-south-1 (Mumbai)"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["A copy of ",(0,i.jsx)(n.code,{children:"ecs-demogo.yaml"})," is in the Appendix section for reference."]}),"\n",(0,i.jsx)(n.h3,{id:"iam-role",children:"IAM Role"}),"\n",(0,i.jsx)(n.p,{children:"The instructions here are pretty shit. Which Role are they referring to?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Enter ecs-demogo as the Stack name, leave the default values for other fields but enter the IAM role in OwnerArn with the role which can be assumed to access the AWS Cloud9 IDE.\n"})}),"\n",(0,i.jsx)(n.p,{children:"The Answer: They are referring to the Admin user you currently using, or have created."}),"\n",(0,i.jsxs)(n.p,{children:["But! you need this format: ",(0,i.jsx)(n.code,{children:"arn:aws:iam::ACCOUNTID:user/ADMINUSER"})]}),"\n",(0,i.jsxs)(n.admonition,{type:"caution",children:[(0,i.jsxs)(n.p,{children:["The format in AWS docs needs to be updated, the ",(0,i.jsx)(n.code,{children:"arn:aws:sts:ACCOUNTID:assumed-role/Admin/ADMINUSER"})," format is not working for me. I tried serveal IAM Admin roles with this format and either the Cloud9 IDE didn't recognise my access, or the cloudformation hung and failed to create."]}),(0,i.jsxs)(n.p,{children:["This format finally worked for me: ",(0,i.jsx)(n.code,{children:"arn:aws:iam::ACCOUNTID:user/ADMINUSER"})]})]}),"\n",(0,i.jsx)(n.h2,{id:"create-ecr-x-3",children:"Create ECR x 3"}),"\n",(0,i.jsx)(n.p,{children:"We want an ECR for cats, dogs, web"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"export AWS_ACCOUNT_ID=830XXXXXX771\nexport AWS_REGION=us-east-1\n\naws ecr create-repository \\\n--repository-name cats \\\n--image-scanning-configuration scanOnPush=true \\\n--region $\\{AWS_REGION}\n\naws ecr create-repository \\\n--repository-name dogs \\\n--image-scanning-configuration scanOnPush=true \\\n--region $\\{AWS_REGION}\n\naws ecr create-repository \\\n--repository-name web \\\n--image-scanning-configuration scanOnPush=true \\\n--region $\\{AWS_REGION}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"docker-build",children:"Docker build"}),"\n",(0,i.jsxs)(n.p,{children:["Go into each dir: ",(0,i.jsx)(n.code,{children:"ecsworkshop/$name"})," and run ",(0,i.jsx)(n.code,{children:"docker build -t $name ."})," where ",(0,i.jsx)(n.code,{children:"name=cats|dogs|web"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"user:~/environment/ecsworkshop/cats $ docker build -t cats .\nSending build context to Docker daemon   5.12kB\nStep 1/6 : FROM public.ecr.aws/nginx/nginx:latest\nlatest: Pulling from nginx/nginx\n8a1e25ce7c4f: Pull complete\ne78b137be355: Pull complete\n39fc875bd2b2: Pull complete\n035788421403: Pull complete\n87c3fb37cbf2: Pull complete\nc5cdd1ce752d: Pull complete\n33952c599532: Pull complete\nDigest: sha256:7e909dd89927167110bb7325be08affb2f838b809da86ed47b5d7d90c0319d7d\nStatus: Downloaded newer image for public.ecr.aws/nginx/nginx:latest\n"})}),"\n",(0,i.jsx)(n.h3,{id:"docker-login-ecr",children:"Docker login ECR"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# set env vars\nexport AWS_ACCOUNT_ID=830XXXXXX771\nexport AWS_REGION=us-east-1\n\n# docker login\naws ecr get-login-password --region $\\{AWS_REGION} | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com\nWARNING! Your password will be stored unencrypted in /home/ec2-user/.docker/config.json.\nConfigure a credential helper to remove this warning. See\nhttps://docs.docker.com/engine/reference/commandline/login/#credentials-store\n\nLogin Succeeded\n"})}),"\n",(0,i.jsx)(n.h3,{id:"docker-tag--push",children:"Docker Tag & Push"}),"\n",(0,i.jsxs)(n.p,{children:["For each container image- cats, dogs, web- tag with ",(0,i.jsx)(n.code,{children:"image:latest"})," --\x3e ",(0,i.jsx)(n.code,{children:"ECR.amazonaws.com/image:latest"}),", and then ",(0,i.jsx)(n.code,{children:"docker push"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# example cats container image\nuser:~/environment/ecsworkshop/cats $ docker tag cats:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cats:latest\nuser:~/environment/ecsworkshop/cats $ docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cats:latest\nThe push refers to repository [830XXXXXX771.dkr.ecr.us-east-1.amazonaws.com/cats]\n12c5e4098b11: Pushed\na2dbe6b10df4: Pushed\n146ff8002d8b: Pushed\nfd31601f0be4: Pushed\n93b4c8c4ac05: Pushed\nb7df9f234b50: Pushed\nab75a0b61bd1: Pushed\nc1b1bf2f95dc: Pushed\n4d99aab1eed4: Pushed\na483da8ab3e9: Pushed\nlatest: digest: sha256:b071d6ba52dacc1b43b4c3afa2a8cec67190124fe4b3d5983869671797b3a5bc size: 2404\n"})}),"\n",(0,i.jsx)(n.h2,{id:"ecs-create-a-cluster",children:"ECS Create a Cluster"}),"\n",(0,i.jsx)(n.p,{children:"Create an ECS Cluster where we're going to deploy our container images."}),"\n",(0,i.jsx)(n.p,{children:"Specs"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Type: ",(0,i.jsx)(n.code,{children:"EC2"})]}),"\n",(0,i.jsxs)(n.li,{children:["OS: ",(0,i.jsx)(n.code,{children:"Amazon Linux 2"})]}),"\n",(0,i.jsxs)(n.li,{children:["Instance: ",(0,i.jsx)(n.code,{children:"m5.large"})]}),"\n",(0,i.jsxs)(n.li,{children:["ASG: ",(0,i.jsx)(n.code,{children:"On-demand"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Setup your Compute:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"infra",src:t(32477).A+"",width:"799",height:"1249"})}),"\n",(0,i.jsx)(n.p,{children:"Setup your Network (get rid of public subnetsz)"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"network",src:t(51270).A+"",width:"810",height:"1002"})}),"\n",(0,i.jsx)(n.h2,{id:"task-definitions",children:"Task Definitions"}),"\n",(0,i.jsx)(n.p,{children:"Console:"}),"\n",(0,i.jsx)(n.p,{children:"You have two options"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"New Task"}),"\n",(0,i.jsx)(n.li,{children:"New Task with JSON"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"We choose option 1"}),"\n",(0,i.jsx)(n.h3,{id:"cats",children:"Cats"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Type: ",(0,i.jsx)(n.code,{children:"Amazon EC2 instances"})," (uncheck ",(0,i.jsx)(n.code,{children:"AWS Fargate"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["OS: ",(0,i.jsx)(n.code,{children:"Linux\\X86_64"})]}),"\n",(0,i.jsxs)(n.li,{children:["Network: ",(0,i.jsx)(n.code,{children:"bridge"})," mode"]}),"\n",(0,i.jsxs)(n.li,{children:["CPU: ",(0,i.jsx)(n.code,{children:"0.5 vCPU"})]}),"\n",(0,i.jsxs)(n.li,{children:["Memory: ",(0,i.jsx)(n.code,{children:"1 GB"})]}),"\n",(0,i.jsxs)(n.li,{children:["Task execution role: ",(0,i.jsx)(n.code,{children:"Create new role"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Infrastructure"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"infra",src:t(85441).A+"",width:"916",height:"1296"})}),"\n",(0,i.jsx)(n.p,{children:"Container"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"container",src:t(82445).A+"",width:"900",height:"623"})}),"\n",(0,i.jsx)(n.p,{children:"Logs"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"logs",src:t(36135).A+"",width:"903",height:"436"})}),"\n",(0,i.jsx)(n.p,{children:"Option 2: New task with JSON."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "taskDefinitionArn": "arn:aws:ecs:us-east-1:830XXXXXX771:task-definition/catsdef:1",\n    "containerDefinitions": [\n        {\n            "name": "cats",\n            "image": "830XXXXXX771.dkr.ecr.us-east-1.amazonaws.com/cats:latest",\n            "cpu": 0,\n            "portMappings": [\n                {\n                    "name": "cats-80-tcp",\n                    "containerPort": 80,\n                    "hostPort": 0,\n                    "protocol": "tcp",\n                    "appProtocol": "http"\n                }\n            ],\n            "essential": true,\n            "environment": [],\n            "environmentFiles": [],\n            "mountPoints": [],\n            "volumesFrom": [],\n            "ulimits": [],\n            "logConfiguration": {\n                "logDriver": "awslogs",\n                "options": {\n                    "awslogs-create-group": "true",\n                    "awslogs-group": "/ecs/catsdef",\n                    "awslogs-region": "us-east-1",\n                    "awslogs-stream-prefix": "ecs"\n                },\n                "secretOptions": []\n            },\n            "systemControls": []\n        }\n    ],\n    "family": "catsdef",\n    "executionRoleArn": "arn:aws:iam::830XXXXXX771:role/ecsTaskExecutionRole",\n    "networkMode": "bridge",\n    "revision": 1,\n    "volumes": [],\n    "status": "ACTIVE",\n    "requiresAttributes": [\n        {\n            "name": "com.amazonaws.ecs.capability.logging-driver.awslogs"\n        },\n        {\n            "name": "ecs.capability.execution-role-awslogs"\n        },\n        {\n            "name": "com.amazonaws.ecs.capability.ecr-auth"\n        },\n        {\n            "name": "com.amazonaws.ecs.capability.docker-remote-api.1.19"\n        },\n        {\n            "name": "ecs.capability.execution-role-ecr-pull"\n        },\n        {\n            "name": "com.amazonaws.ecs.capability.docker-remote-api.1.18"\n        },\n        {\n            "name": "com.amazonaws.ecs.capability.docker-remote-api.1.29"\n        }\n    ],\n    "placementConstraints": [],\n    "compatibilities": [\n        "EC2"\n    ],\n    "requiresCompatibilities": [\n        "EC2"\n    ],\n    "cpu": "512",\n    "memory": "1024",\n    "runtimePlatform": {\n        "cpuArchitecture": "X86_64",\n        "operatingSystemFamily": "LINUX"\n    },\n    "registeredAt": "2024-03-18T08:12:39.817Z",\n    "registeredBy": "arn:aws:iam::830XXXXXX771:user/myuser",\n    "tags": []\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Repeat a new Task for web, port ",(0,i.jsx)(n.code,{children:"80/HTTP"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"dogs",children:"Dogs"}),"\n",(0,i.jsxs)(n.p,{children:["Uses the ",(0,i.jsx)(n.strong,{children:"FARGATE"})," launch type instead of EC2 (cats, web)."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Type: ",(0,i.jsx)(n.code,{children:"AWS Fargate"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["OS: ",(0,i.jsx)(n.code,{children:"Linux\\X86_64"})]}),"\n",(0,i.jsxs)(n.li,{children:["Network: will gray out on ",(0,i.jsx)(n.code,{children:"awsvpc"})," mode"]}),"\n",(0,i.jsxs)(n.li,{children:["CPU: ",(0,i.jsx)(n.code,{children:"0.5 vCPU"})]}),"\n",(0,i.jsxs)(n.li,{children:["Memory: ",(0,i.jsx)(n.code,{children:"1 GB"})]}),"\n",(0,i.jsxs)(n.li,{children:["Task execution role: ",(0,i.jsx)(n.code,{children:"ecsTaskExecutionRole"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The rest should match web and cats."}),"\n",(0,i.jsx)(n.h3,{id:"ecs-task-iam-role",children:"ECS Task IAM Role"}),"\n",(0,i.jsxs)(n.p,{children:["You have a Task execution Role called ",(0,i.jsx)(n.code,{children:"ecsTaskExecutionRole"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Ensure this Role needs has the following IAM Policies attached to it:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"AmazonECSTaskExecutionRolePolicy"}),"."]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"CloudWatchFullAccess"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"create-service",children:"Create Service"}),"\n",(0,i.jsx)(n.h3,{id:"alb",children:"ALB"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"LB Type: ALB"}),"\n",(0,i.jsx)(n.li,{children:"Scheme: Internet-facing"}),"\n",(0,i.jsx)(n.li,{children:"Ip address style: IPv4"}),"\n",(0,i.jsx)(n.li,{children:"VPC: DemoGoECSVPC"}),"\n",(0,i.jsx)(n.li,{children:"Subnets: use both Public subnets"}),"\n",(0,i.jsx)(n.li,{children:"Security Group: use the ecs-demogo-ALBSG* security group"}),"\n",(0,i.jsx)(n.li,{children:"Listeners and routing: create a target group"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"target-group",children:"Target Group"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Target Type: Instances"}),"\n",(0,i.jsx)(n.li,{children:"Target Group Name: web"}),"\n",(0,i.jsx)(n.li,{children:"Protocol/Port: HTTP/80"}),"\n",(0,i.jsx)(n.li,{children:"VPC: DemoGoECSVPC"}),"\n",(0,i.jsxs)(n.li,{children:["Health checks: HTTP, ",(0,i.jsx)(n.code,{children:"/"})]}),"\n",(0,i.jsxs)(n.li,{children:["skip ",(0,i.jsx)(n.strong,{children:"Register Targets"})]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Create target group"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"web-service",children:"Web Service"}),"\n",(0,i.jsx)(n.p,{children:"Do the web service first."}),"\n",(0,i.jsx)(n.p,{children:"Launch Type, EC2"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"create service",src:t(50424).A+"",width:"920",height:"545"})}),"\n",(0,i.jsx)(n.p,{children:"Deployment: aim at web target definition"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"create deploy",src:t(24915).A+"",width:"923",height:"896"})}),"\n",(0,i.jsx)(n.p,{children:"Load balancer: uses existing ALB and target group."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"create lb",src:t(74154).A+"",width:"919",height:"986"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Task Placement: AZ balanced spread"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"cats-service",children:"Cats Service"}),"\n",(0,i.jsx)(n.p,{children:"Same as web service, except:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Task definition, Family: ",(0,i.jsx)(n.code,{children:"catsdef"})]}),"\n",(0,i.jsxs)(n.li,{children:["Service name: ",(0,i.jsx)(n.code,{children:"cats"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:['For the "Load balancing", point to the same ALB, use an existing listener ',(0,i.jsx)(n.code,{children:"80:HTTP"})," but ",(0,i.jsx)(n.strong,{children:'"Create new target group"'})," for cats."]}),"\n",(0,i.jsx)(n.p,{children:"You want these settings:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Setting"}),(0,i.jsx)(n.th,{children:"Value"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Load balancer type"}),(0,i.jsx)(n.td,{children:"Application Load Balancer"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Load balancer name"}),(0,i.jsx)(n.td,{children:"demogo-alb"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Container to load balance"}),(0,i.jsx)(n.td,{children:"cats 80:80"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Listener"}),(0,i.jsx)(n.td,{children:"Use an existing listener"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Listener port"}),(0,i.jsx)(n.td,{children:"80 HTTP"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Target Group"}),(0,i.jsx)(n.td,{children:"Create"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Target Group Name"}),(0,i.jsx)(n.td,{children:"cats"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Target Group Path pattern"}),(0,i.jsx)(n.td,{children:"/cats*"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Evaluation order"}),(0,i.jsx)(n.td,{children:"1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Target Group Health Check"}),(0,i.jsx)(n.td,{children:"path /cats/ , protocol HTTP"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"dogs-service",children:"Dogs Service"}),"\n",(0,i.jsx)(n.p,{children:"Same as cats service, except:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Launch type: ",(0,i.jsx)(n.code,{children:"FARGATE"})]}),"\n",(0,i.jsxs)(n.li,{children:["Task definition, Family: ",(0,i.jsx)(n.code,{children:"dogsdef"})]}),"\n",(0,i.jsxs)(n.li,{children:["Service name: ",(0,i.jsx)(n.code,{children:"dogs"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"networking",src:t(84526).A+"",width:"694",height:"704"})}),"\n",(0,i.jsx)(n.h2,{id:"check-service",children:"Check Service"}),"\n",(0,i.jsx)(n.p,{children:"Grab the ALB's dns, which will route publicly:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"alb dns",src:t(91469).A+"",width:"781",height:"283"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Success!!"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"public",src:t(18909).A+"",width:"967",height:"1043"})}),"\n",(0,i.jsx)(n.admonition,{title:"End of Part 1",type:"caution",children:(0,i.jsx)(n.p,{children:"I will break this up into multiple parts. I'm thinking a)Service, b)Auto Scaling, c)CI/CD and d)IaC with Copilot."})}),"\n",(0,i.jsx)(n.h2,{id:"appendix",children:"Appendix"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"AWSTemplateFormatVersion: '2010-09-09'\nDescription: 'DemoGo-ECS200 Prerequisite - Network CloudFormation Template'\n\nParameters:\n  Cloud9IDEInstanceType:\n    Description: The type of instance to connect to the environment\n    Type: String\n    Default: t3.large\n    AllowedValues:\n      - t3.medium\n      - t3.large\n      - t3.xlarge\n\n  Cloud9EnvironmentName:\n    Description: How the name appears in the console\n    Type: String\n    Default: ecsworkshop\n\n  AssetsBucketName:\n    Description: Workshop Studio assets bucket name\n    Type: String\n\n  AssetsBucketPrefix:\n    Description: Workshop Studio assets bucket prefix\n    Type: String\n\n  WorkstationRoleName:\n    Description: Workshop Studio participant role arn\n    Type: String\n    Default: ecsworkshop-admin\n\n  C9EnvType:\n    Description: Environment type.\n    Default: 3rdParty\n    Type: String\n    AllowedValues:\n      - 3rdParty\n      - aws-event\n    ConstraintDescription: must specify aws-event or 3rdParty.\n\n  OwnerArn:\n    Type: String\n    Description: The Arn of the Cloud9 Owner to be set if 3rdParty deployment.\n    Default: ''\n\nMappings:\n  CidrMappings:\n    private-subnet-1: {CIDR: 10.0.3.0/24}\n    private-subnet-2: {CIDR: 10.0.4.0/24}\n    public-subnet-1: {CIDR: 10.0.1.0/24}\n    public-subnet-2: {CIDR: 10.0.2.0/24}\n    vpc: {CIDR: 10.0.0.0/16}\n  DomainNameMappings:\n    eu-west-1: {Domain: eu-west-1.compute.internal}\n    eu-west-3: {Domain: eu-west-3.compute.internal}\n    us-east-1: {Domain: ec2.internal}\n    us-east-2: {Domain: us-east-2.compute.internal}\n    us-west-2: {Domain: us-west-2.compute.internal}\n    ap-northeast-1: {Domain: ap-northeast-1.compute.internal}\n    ap-northeast-2: {Domain: ap-northeast-2.compute.internal}\n\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n      - Label:\n          default: 'Cloud9 Configuration'\n        Parameters:\n          - Cloud9EnvironmentName\n          - Cloud9IDEInstanceType\n          - AssetsBucketName\n          - AssetsBucketPrefix\n          - WorkstationRoleName\n          - C9EnvType\n          - OwnerArn\n\nConditions:\n  Create3rdPartyResources: !Equals [!Ref C9EnvType, 3rdParty]\n  CreateAWSEventResources: !Equals [!Ref C9EnvType, aws-event]\n\nResources:\n  AttachGateway:\n    DependsOn: [VPC, InternetGateway]\n    Properties:\n      InternetGatewayId: {Ref: InternetGateway}\n      VpcId: {Ref: VPC}\n    Type: AWS::EC2::VPCGatewayAttachment\n  DHCPOptions:\n    Properties:\n      DomainName:\n        Fn::FindInMap:\n          - DomainNameMappings\n          - {Ref: 'AWS::Region'}\n          - Domain\n      DomainNameServers: [AmazonProvidedDNS]\n    Type: AWS::EC2::DHCPOptions\n  EIP:\n    Properties: {Domain: vpc}\n    Type: AWS::EC2::EIP\n  InternetGateway: {DependsOn: VPC, Type: 'AWS::EC2::InternetGateway'}\n  NAT:\n    DependsOn: AttachGateway\n    Properties:\n      AllocationId:\n        Fn::GetAtt: [EIP, AllocationId]\n      SubnetId: {Ref: PublicSubnet1}\n    Type: AWS::EC2::NatGateway\n  PrivateRoute:\n    DependsOn: [PrivateRouteTable, NAT]\n    Properties:\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: {Ref: NAT}\n      RouteTableId: {Ref: PrivateRouteTable}\n    Type: AWS::EC2::Route\n  PrivateRouteTable:\n    DependsOn: [VPC, AttachGateway]\n    Properties:\n      Tags:\n        - {Key: Name, Value: PrivateRouteTable}\n      VpcId: {Ref: VPC}\n    Type: AWS::EC2::RouteTable\n  PrivateSubnet1:\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone:\n        Fn::Select:\n          - '0'\n          - {'Fn::GetAZs': ''}\n      CidrBlock:\n        Fn::FindInMap: [CidrMappings, private-subnet-1, CIDR]\n      Tags:\n        - {Key: Name, Value: PrivateSubnet1}\n      VpcId: {Ref: VPC}\n    Type: AWS::EC2::Subnet\n  PrivateSubnet1RouteTableAssociation:\n    DependsOn: [PrivateRouteTable, PrivateSubnet1]\n    Properties:\n      RouteTableId: {Ref: PrivateRouteTable}\n      SubnetId: {Ref: PrivateSubnet1}\n    Type: AWS::EC2::SubnetRouteTableAssociation\n  PrivateSubnet2:\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone:\n        Fn::Select:\n          - '1'\n          - {'Fn::GetAZs': ''}\n      CidrBlock:\n        Fn::FindInMap: [CidrMappings, private-subnet-2, CIDR]\n      Tags:\n        - {Key: Name, Value: PrivateSubnet2}\n      VpcId: {Ref: VPC}\n    Type: AWS::EC2::Subnet\n  PrivateSubnet2RouteTableAssociation:\n    DependsOn: [PrivateRouteTable, PrivateSubnet2]\n    Properties:\n      RouteTableId: {Ref: PrivateRouteTable}\n      SubnetId: {Ref: PrivateSubnet2}\n    Type: AWS::EC2::SubnetRouteTableAssociation\n  PublicRoute:\n    DependsOn: [PublicRouteTable, AttachGateway]\n    Properties:\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: {Ref: InternetGateway}\n      RouteTableId: {Ref: PublicRouteTable}\n    Type: AWS::EC2::Route\n  PublicRouteTable:\n    DependsOn: [VPC, AttachGateway]\n    Properties:\n      Tags:\n        - {Key: Name, Value: PublicRouteTable}\n      VpcId: {Ref: VPC}\n    Type: AWS::EC2::RouteTable\n  PublicSubnet1:\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone:\n        Fn::Select:\n          - '0'\n          - {'Fn::GetAZs': ''}\n      CidrBlock:\n        Fn::FindInMap: [CidrMappings, public-subnet-1, CIDR]\n      Tags:\n        - {Key: Name, Value: PublicSubnet1}\n      VpcId: {Ref: VPC}\n    Type: AWS::EC2::Subnet\n  PublicSubnet1RouteTableAssociation:\n    DependsOn: [PublicRouteTable, PublicSubnet1, AttachGateway]\n    Properties:\n      RouteTableId: {Ref: PublicRouteTable}\n      SubnetId: {Ref: PublicSubnet1}\n    Type: AWS::EC2::SubnetRouteTableAssociation\n  PublicSubnet2:\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone:\n        Fn::Select:\n          - '1'\n          - {'Fn::GetAZs': ''}\n      CidrBlock:\n        Fn::FindInMap: [CidrMappings, public-subnet-2, CIDR]\n      Tags:\n        - {Key: Name, Value: PublicSubnet2}\n      VpcId: {Ref: VPC}\n    Type: AWS::EC2::Subnet\n  PublicSubnet2RouteTableAssociation:\n    DependsOn: [PublicRouteTable, PublicSubnet2, AttachGateway]\n    Properties:\n      RouteTableId: {Ref: PublicRouteTable}\n      SubnetId: {Ref: PublicSubnet2}\n    Type: AWS::EC2::SubnetRouteTableAssociation\n  VPC:\n    Properties:\n      CidrBlock:\n        Fn::FindInMap: [CidrMappings, vpc, CIDR]\n      EnableDnsHostnames: 'true'\n      EnableDnsSupport: 'true'\n      Tags:\n        - {Key: Name, Value: DemoGoECSVPC}\n    Type: AWS::EC2::VPC\n  VPCDHCPOptionsAssociation:\n    Properties:\n      DhcpOptionsId: {Ref: DHCPOptions}\n      VpcId: {Ref: VPC}\n    Type: AWS::EC2::VPCDHCPOptionsAssociation\n\n  WorkstationSG:\n    Type: 'AWS::EC2::SecurityGroup'\n    Properties:\n      GroupName: Workstation to Push images\n      GroupDescription: EC2 SecurityGroup\n      VpcId: {Ref: VPC}\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: '22'\n          ToPort: '22'\n          CidrIp: '0.0.0.0/0'\n  ALBSG:\n    Type: 'AWS::EC2::SecurityGroup'\n    Properties:\n      GroupDescription: Enable HTTP to the load balancer\n      VpcId: {Ref: VPC}\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: '80'\n          ToPort: '80'\n          CidrIp: '0.0.0.0/0'\n\n  ECSInstanceSG:\n    Type: 'AWS::EC2::SecurityGroup'\n    Properties:\n      GroupDescription: Enable access to container instances, from the load balancer only\n      VpcId: {Ref: VPC}\n      SecurityGroupIngress:\n        - SourceSecurityGroupId: {Ref: ALBSG}\n          IpProtocol: tcp\n          FromPort: '0'\n          ToPort: '65535'\n\n  WorkstationRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Ref WorkstationRoleName\n      Path: '/'\n      ManagedPolicyArns:\n        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess'\n        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'\n        - 'arn:aws:iam::aws:policy/AdministratorAccess'\n        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - ec2.amazonaws.com\n                - codebuild.amazonaws.com\n                - ssm.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      # Policies:\n      #   - PolicyName:\n      #       Fn::Join:\n      #         - ''\n      #         - - C9InstanceDenyPolicy-\n      #           - Ref: AWS::Region\n      #     PolicyDocument:\n      #       Version: '2012-10-17'\n      #       Statement:\n      #         - Effect: Deny\n      #           Action:\n      #             - cloud9:UpdateEnvironment\n      #           Resource: '*'\n\n  WorkstationProfile:\n    Type: AWS::IAM::InstanceProfile\n    DependsOn: [WorkstationRole]\n    Properties:\n      InstanceProfileName: !Ref WorkstationRoleName\n      Path: '/'\n      Roles:\n        - Ref: WorkstationRole\n\n  cloud9Environment:\n    Type: AWS::Cloud9::EnvironmentEC2\n    Properties:\n      Name: !Ref Cloud9EnvironmentName\n      AutomaticStopTimeMinutes: 900\n      SubnetId: {Ref: PublicSubnet1}\n      OwnerArn:\n        !If [\n          Create3rdPartyResources,\n          !Ref OwnerArn,\n          !If [\n            CreateAWSEventResources,\n            !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':assumed-role/WSParticipantRole/Participant']],\n            !Ref 'AWS::NoValue',\n          ],\n        ]\n      #!Sub arn:aws:sts::$\\{AWS::AccountId}:assumed-role/WSParticipantRole/Participant\n      #OwnerArn: !Ref ParticipantRoleArn\n      Description: Use this to work with ECS cats & dogs workshop\n      InstanceType: !Ref Cloud9IDEInstanceType\n      ImageId: resolve:ssm:/aws/service/cloud9/amis/amazonlinux-2-x86_64\n      #The repo is sync from s3 bucket by the SSM document\n      # Repositories:\n      #   - RepositoryUrl: https://github.com/allamand/ecs-cats-and-dogs\n      #     PathComponent: ecsworkshop\n      Tags:\n        - Key: SSMBootstrapECS\n          Value: Active\n        - Key: Environment\n          Value: !Sub $\\{Cloud9EnvironmentName}\n\n  C9LambdaExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Path: '/'\n      ManagedPolicyArns:\n        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'\n      Policies:\n        - PolicyName:\n            Fn::Join:\n              - ''\n              - - C9LambdaPolicy-\n                - Ref: AWS::Region\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: Allow\n                Action:\n                  - cloudformation:DescribeStacks\n                  - cloudformation:DescribeStackEvents\n                  - cloudformation:DescribeStackResource\n                  - cloudformation:DescribeStackResources\n                Resource: !Sub 'arn:aws:cloudformation:$\\{AWS::Region}:$\\{AWS::AccountId}:stack/*'\n              - Effect: Allow\n                Action:\n                  - ec2:AssociateIamInstanceProfile\n                  - ec2:ModifyInstanceAttribute\n                  - ec2:ReplaceIamInstanceProfileAssociation\n                Resource: !Sub 'arn:aws:ec2:$\\{AWS::Region}:$\\{AWS::AccountId}:instance/*'\n              - Effect: Allow\n                Action:\n                  - ec2:DescribeInstances\n                  - ec2:DescribeVolumes\n                  - ec2:DescribeIamInstanceProfileAssociations\n                Resource: '*'\n              - Effect: Allow\n                Action:\n                  - ec2:ModifyVolume\n                Resource: !Sub 'arn:aws:ec2:$\\{AWS::Region}:$\\{AWS::AccountId}:volume/*'\n              - Effect: Allow\n                Action:\n                  - iam:ListInstanceProfiles\n                Resource: !Sub arn:aws:iam::$\\{AWS::AccountId}:instance-profile/*\n              - Effect: Allow\n                Action:\n                  - iam:PassRole\n                Resource:\n                  Fn::GetAtt:\n                    - WorkstationRole\n                    - Arn\n  C9BootstrapInstanceLambda:\n    Type: Custom::C9BootstrapInstanceLambda\n    DependsOn:\n      - C9LambdaExecutionRole\n      - cloud9Environment\n    Properties:\n      Tags:\n        - Key: Environment\n          Value: !Sub $\\{Cloud9EnvironmentName}\n      ServiceToken:\n        Fn::GetAtt:\n          - C9BootstrapInstanceLambdaFunction\n          - Arn\n      REGION:\n        Ref: AWS::Region\n      StackName:\n        Ref: AWS::StackName\n      EnvironmentId:\n        Ref: cloud9Environment\n      LabIdeInstanceProfileName:\n        Ref: WorkstationProfile\n      LabIdeInstanceProfileArn:\n        Fn::GetAtt:\n          - WorkstationProfile\n          - Arn\n\n  C9BootstrapInstanceLambdaFunction:\n    Type: AWS::Lambda::Function\n    DependsOn: cloud9Environment\n    Properties:\n      Tags:\n        - Key: Environment\n          Value: AWS Example\n      Handler: index.lambda_handler\n      Role:\n        Fn::GetAtt:\n          - C9LambdaExecutionRole\n          - Arn\n      Runtime: python3.9\n      MemorySize: 256\n      Timeout: 600\n      TracingConfig:\n        Mode: Active\n      Code:\n        ZipFile: !Sub |\n          from __future__ import print_function\n          import boto3\n          import json\n          import os\n          import time\n          import traceback\n          import cfnresponse\n          import logging\n\n          logger = logging.getLogger()\n          logger.setLevel(logging.INFO)\n\n          def lambda_handler(event, context):\n              logger.info('event: {}'.format(event))\n              logger.info('context: {}'.format(context))\n              responseData = {}\n\n              status = cfnresponse.SUCCESS\n\n              if event['RequestType'] == 'Delete':\n                  responseData = {'Success': 'Custom Resource removed'}\n                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')\n\n              if event['RequestType'] == 'Create':\n                  try:\n                      # Open AWS clients\n                      ec2 = boto3.client('ec2')\n\n                      # Get the InstanceId of the Cloud9 IDE\n                      instance = ec2.describe_instances(Filters=[{'Name': 'tag:SSMBootstrapECS', 'Values': ['Active']},{'Name': 'tag:Environment', 'Values': ['$\\{Cloud9EnvironmentName}']}])['Reservations'][0]['Instances'][0]\n                      logger.info('instance: {}'.format(instance))\n\n                      # Create the IamInstanceProfile request object\n                      iam_instance_profile = {\n                          'Arn': event['ResourceProperties']['LabIdeInstanceProfileArn'],\n                          'Name': event['ResourceProperties']['LabIdeInstanceProfileName']\n                      }\n                      logger.info('iam_instance_profile: {}'.format(iam_instance_profile))\n\n                      # Wait for Instance to become ready before adding Role\n                      instance_state = instance['State']['Name']\n                      logger.info('instance_state: {}'.format(instance_state))\n                      while instance_state != 'running':\n                          time.sleep(5)\n                          instance_state = ec2.describe_instances(InstanceIds=[instance['InstanceId']])\n                          logger.info('instance_state: {}'.format(instance_state))\n\n                      # attach instance profile\n                      response = ec2.associate_iam_instance_profile(IamInstanceProfile=iam_instance_profile, InstanceId=instance['InstanceId'])\n                      logger.info('response - associate_iam_instance_profile: {}'.format(response))\n                      r_ec2 = boto3.resource('ec2')\n\n                      responseData = {'Success': 'Started bootstrapping for instance: '+instance['InstanceId']}\n                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')\n\n                  except Exception as e:\n                      status = cfnresponse.FAILED\n                      print(traceback.format_exc())\n                      responseData = {'Error': traceback.format_exc(e)}\n                  finally:\n                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')\n\n  ################## SSM BOOTSRAP HANDLER ###############\n  C9OutputBucket:\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Retain\n    Properties:\n      AccessControl: Private\n      BucketEncryption:\n        ServerSideEncryptionConfiguration:\n          - ServerSideEncryptionByDefault:\n              SSEAlgorithm: AES256\n      PublicAccessBlockConfiguration:\n        BlockPublicAcls: true\n        BlockPublicPolicy: true\n        IgnorePublicAcls: true\n        RestrictPublicBuckets: true\n\n  C9OutputBucketPolicy:\n    Type: AWS::S3::BucketPolicy\n    Properties:\n      Bucket: !Ref C9OutputBucket\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Action:\n              - 's3:GetObject'\n              - 's3:PutObject'\n              - 's3:PutObjectAcl'\n            Effect: Allow\n            Resource: !Join\n              - ''\n              - - 'arn:aws:s3:::'\n                - !Ref C9OutputBucket\n                - /*\n            Principal:\n              AWS:\n                Fn::GetAtt:\n                  - C9LambdaExecutionRole\n                  - Arn\n  C9SSMDocument:\n    Type: AWS::SSM::Document\n    Properties:\n      Tags:\n        - Key: Environment\n          Value: !Sub $\\{Cloud9EnvironmentName}\n      DocumentType: Command\n      Content:\n        schemaVersion: '2.2'\n        description: Bootstrap Cloud9 Instance\n        mainSteps:\n          - action: aws:runShellScript\n            name: C9bootstrap\n            inputs:\n              runCommand:\n                - '#!/bin/bash'\n                - date\n                - echo LANG=en_US.utf-8 >> /etc/environment\n                - echo LC_ALL=en_US.UTF-8 >> /etc/environment\n                - . /home/ec2-user/.bashrc\n                - echo '=== UPDATE system packages and INSTALL dependencies ==='\n                - yum update -y; yum install -y vim git jq bash-completion moreutils gettext yum-utils perl-Digest-SHA tree\n                - echo '=== ENABLE Amazon Extras EPEL Repository and INSTALL Git LFS ==='\n                - yum install -y amazon-linux-extras\n                - amazon-linux-extras install epel -y\n                - yum install -y git-lfs\n                - echo '=== INSTALL AWS CLI v2 ==='\n                - curl 'https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip' -o 'awscliv2.zip'\n                - unzip awscliv2.zip -d /tmp\n                - /tmp/aws/install --update\n                - rm -rf aws awscliv2.zip\n                - echo '=== INSTALL Kubernetes CLI ==='\n                - curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\n                - chmod +x kubectl && mv kubectl /usr/local/bin/\n                - /usr/local/bin/kubectl completion bash > /etc/bash_completion.d/kubectl\n                - echo '=== INSTALL Helm CLI ==='\n                - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash\n                - /usr/local/bin/helm completion bash > /etc/bash_completion.d/helm\n                - echo '=== INSTALL AWS Copilot ==='\n                - curl --silent -Lo copilot https://github.com/aws/copilot-cli/releases/latest/download/copilot-linux && chmod +x copilot && sudo mv copilot /usr/local/bin/copilot && copilot --help\n                - echo '=== INSTALL Terraform CLI ==='\n                - yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo\n                - yum -y install terraform\n                - echo '=== Configure cats and dogs source code ==='\n                - !Sub |\n                  mkdir -p /home/ec2-user/environment/ecsworkshop ;\n                  cd /home/ec2-user/environment/ecsworkshop ;\n                  aws s3 sync s3://$\\{AssetsBucketName}/$\\{AssetsBucketPrefix} .\n                - chown -R 1000:1000 /home/ec2-user/environment/ecsworkshop ; ls -la\n                - echo '=== Installing c9 ==='\n                - /home/ec2-user/.nvm/versions/node/v16.20.0/bin/npm install -g c9\n                - echo '=== Exporting ENV Vars ==='\n                - export AWS_ACCOUNT_ID=\"$(aws sts get-caller-identity --query Account --output text)\" && echo \"export AWS_ACCOUNT_ID=$\\{AWS_ACCOUNT_ID}\" >> /home/ec2-user/.bashrc\n                - export AWS_REGION=\"$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | grep region | cut -d'\"' -f4)\" && echo \"export AWS_REGION=$\\{AWS_REGION}\" >> /home/ec2-user/.bashrc\n                - echo \"export AWS_DEFAULT_REGION=\\$AWS_REGION\" >>  /home/ec2-user/.bashrc\n                - echo 'aws cloud9 update-environment  --environment-id $C9_PID --managed-credentials-action DISABLE' >> /home/ec2-user/.bashrc\n                - echo 'alias ll=\"ls -la\"' >> /home/ec2-user/.bashrc\n                - echo \"Bootstrap completed with return code $?\"\n                - shutdown -r +1\n\n  C9BootstrapAssociation:\n    Type: AWS::SSM::Association\n    Properties:\n      Name: !Ref C9SSMDocument\n      OutputLocation:\n        S3Location:\n          OutputS3BucketName: !Ref C9OutputBucket\n          OutputS3KeyPrefix: bootstrapoutput\n      Targets:\n        - Key: tag:SSMBootstrapECS\n          Values:\n            - Active\n        - Key: tag:Environment\n          Values:\n            - !Sub $\\{Cloud9EnvironmentName}\n\nOutputs:\n  PrivateSubnet1:\n    Description: The first private subnet.\n    Value: {Ref: PrivateSubnet1}\n  PrivateSubnet2:\n    Description: The second private subnet.\n    Value: {Ref: PrivateSubnet2}\n  PublicSubnet1:\n    Description: The first public subnet.\n    Value: {Ref: PublicSubnet1}\n  PublicSubnet2:\n    Description: The second public subnet.\n    Value: {Ref: PublicSubnet2}\n  VPC:\n    Description: The VPC Id.\n    Value: {Ref: VPC}\n  VpcCidr:\n    Description: The CIDR block of the VPC.\n    Value:\n      Fn::FindInMap: [CidrMappings, vpc, CIDR]\n  ECSCloud9EnvId:\n    Description: ID of the ECS Lab IDE\n    Value: !Sub https://$\\{AWS::Region}.console.aws.amazon.com/cloud9/ide/$\\{cloud9Environment}?region=$\\{AWS::Region}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},74154:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/ecsworkshop-service3-6338d1b2f8877c68041fb87fe9092f95.png"},82445:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/ecsworkshop-container-09ac5234d3c3b52bcb929a2752222052.png"},84526:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/ecsworkshop-dogs-service-networking-727bd6ae28feda7efe0733ce401d581a.png"},85441:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/ecsworkshop-infra-992b66b76da93e9fab748723c0747dd5.png"},91469:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/ecsworkshop-alb-dns-0378b34118a9fa59ff67fa791b936f51.png"}}]);