"use strict";(self.webpackChunkronamosa_github_io=self.webpackChunkronamosa_github_io||[]).push([[8331],{16561:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"study/CKS/Microservice Vulnerability/VulnerableMTLS","title":"Mutual TLS (mTLS)","description":"mTLS / pod to pod","source":"@site/docs/study/CKS/4. Microservice Vulnerability/VulnerableMTLS.md","sourceDirName":"study/CKS/4. Microservice Vulnerability","slug":"/study/CKS/Microservice Vulnerability/VulnerableMTLS","permalink":"/docs/study/CKS/Microservice Vulnerability/VulnerableMTLS","draft":false,"unlisted":false,"editUrl":"https://github.com/ronamosa/ronamosa.github.io/edit/main/website/docs/study/CKS/4. Microservice Vulnerability/VulnerableMTLS.md","tags":[],"version":"current","lastUpdatedBy":"Ron Amosa","lastUpdatedAt":1758526302000,"frontMatter":{"title":"Mutual TLS (mTLS)"},"sidebar":"docsSidebar","previous":{"title":"Container Runtime Sandboxes","permalink":"/docs/study/CKS/Microservice Vulnerability/VulnerableContainerRuntime"},"next":{"title":"OS Level Security Domains","permalink":"/docs/study/CKS/Microservice Vulnerability/VulnerableOSLevelSecurity"}}');var r=t(74848),i=t(28453);const a={title:"Mutual TLS (mTLS)"},o=void 0,l={},c=[{value:"mTLS / pod to pod",id:"mtls--pod-to-pod",level:2},{value:"Service Meshes",id:"service-meshes",level:2},{value:"Scenarios - create a proxy sidecar",id:"scenarios---create-a-proxy-sidecar",level:2}];function d(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"mtls--pod-to-pod",children:"mTLS / pod to pod"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"mutual auth"}),"\n",(0,r.jsx)(n.li,{children:"bilateral auth"}),"\n",(0,r.jsx)(n.li,{children:"both apps have client+server certs each"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"by default every pod to every pod can talk, unencrypted"}),"\n",(0,r.jsx)(n.h2,{id:"service-meshes",children:"Service Meshes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"manage all the certs between pods"}),"\n",(0,r.jsx)(n.li,{children:"decouple our app container from the auth/cert workload"}),"\n",(0,r.jsx)(n.li,{children:'these sidecars make up the "mesh" e.g. istio, linkerd'}),"\n",(0,r.jsx)(n.li,{children:"all traffic routes through proxy/sidecar"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["these routes are created via ",(0,r.jsx)(n.code,{children:"iptable"})," rules in e.g. an init container (needs ",(0,r.jsx)(n.code,{children:"NET_ADMIN"})," cap), and only when init's are done, does the app container start up e.g. this is how Istio does it."]}),"\n",(0,r.jsx)(n.h2,{id:"scenarios---create-a-proxy-sidecar",children:"Scenarios - create a proxy sidecar"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"root@cks-master:~# k run app --image=bash --command -oyaml --dry-run=client > app.yaml -- sh -c 'ping google.com'"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# app.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: app\n  name: app\nspec:\n  containers:\n  - command:\n    - sh\n    - -c\n    - ping google.com\n    image: bash\n    name: app\n    resources: {}\n  dnsPolicy: ClusterFirst\n  restartPolicy: Always\nstatus: {}\n"})}),"\n",(0,r.jsx)(n.p,{children:"run it"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'root@cks-master:~# k create -f ./app.yaml \npod/app created\nroot@cks-master:~# k logs -f app\nError from server (BadRequest): container "app" in pod "app" is waiting to start: ContainerCreating\nroot@cks-master:~# k logs -f app\nPING google.com (172.217.167.110): 56 data bytes\n64 bytes from 172.217.167.110: seq=0 ttl=121 time=1.310 ms\n64 bytes from 172.217.167.110: seq=1 ttl=121 time=1.261 ms\n64 bytes from 172.217.167.110: seq=2 ttl=121 time=1.403 ms\n64 bytes from 172.217.167.110: seq=3 ttl=121 time=1.171 ms\n64 bytes from 172.217.167.110: seq=4 ttl=121 time=1.254 ms\n64 bytes from 172.217.167.110: seq=5 ttl=121 time=1.237 ms\n64 bytes from 172.217.167.110: seq=6 ttl=121 time=1.475 ms\n'})}),"\n",(0,r.jsx)(n.p,{children:'add a "sidecar proxy" into our Pod manifest-- hacky solution of installing iptables into the sidecar on the go.'}),"\n",(0,r.jsxs)(n.p,{children:["note your proxy container will need extra permissions to run ",(0,r.jsx)(n.code,{children:"iptables"})," commands i.e. ",(0,r.jsx)(n.code,{children:"NET_ADMIN"})," by using ",(0,r.jsx)(n.code,{children:"securityContext"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: app\n  name: app\nspec:\n  containers:\n  - command:\n    - sh\n    - -c\n    - ping google.com\n    image: bash\n    name: app\n    resources: {}\n  - command:\n    - sh\n    - -c\n    - 'apt-get update && apt-get install -y iptables && iptables -L && sleep 1d'\n    securityContext:\n      capabilities:\n        add: [\"NET_ADMIN\"]\n    image: ubuntu\n    name: proxy\n    resources: {}\n  dnsPolicy: ClusterFirst\n  restartPolicy: Always\nstatus: {}\n"})}),"\n",(0,r.jsx)(n.p,{children:"to date no mTLS or service mesh in the exam at the moment."})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(96540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);