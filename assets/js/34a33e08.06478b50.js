"use strict";(self.webpackChunkronamosa_github_io=self.webpackChunkronamosa_github_io||[]).push([[9626],{27617:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"engineer/Azure/2019-01-28-Azure-Kubernetes-up-and-running-1","title":"Azure Kubernetes Service (AKS) Setup Guide - Part 1: Cluster Creation and Configuration","description":"Complete guide to setting up Azure Kubernetes Service (AKS) cluster from scratch. Part 1 covers cluster creation, networking, and initial configuration.","source":"@site/docs/engineer/Azure/2019-01-28-Azure-Kubernetes-up-and-running-1.md","sourceDirName":"engineer/Azure","slug":"/engineer/Azure/2019-01-28-Azure-Kubernetes-up-and-running-1","permalink":"/docs/engineer/Azure/2019-01-28-Azure-Kubernetes-up-and-running-1","draft":false,"unlisted":false,"editUrl":"https://github.com/ronamosa/ronamosa.github.io/edit/main/website/docs/engineer/Azure/2019-01-28-Azure-Kubernetes-up-and-running-1.md","tags":[{"inline":true,"label":"azure","permalink":"/docs/tags/azure"},{"inline":true,"label":"aks","permalink":"/docs/tags/aks"},{"inline":true,"label":"kubernetes","permalink":"/docs/tags/kubernetes"},{"inline":true,"label":"cluster-setup","permalink":"/docs/tags/cluster-setup"},{"inline":true,"label":"part-1","permalink":"/docs/tags/part-1"}],"version":"current","lastUpdatedBy":"Ron Amosa","lastUpdatedAt":1758526302000,"sidebarPosition":3,"frontMatter":{"title":"Azure Kubernetes Service (AKS) Setup Guide - Part 1: Cluster Creation and Configuration","description":"Complete guide to setting up Azure Kubernetes Service (AKS) cluster from scratch. Part 1 covers cluster creation, networking, and initial configuration.","keywords":["azure kubernetes service","aks setup","kubernetes azure","aks cluster","azure container service","k8s azure","aks deployment"],"tags":["azure","aks","kubernetes","cluster-setup","part-1"],"sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"Azure Blob Storage Lease Management - Break Terraform State Lock Issues","permalink":"/docs/engineer/Azure/2019-02-12-Azure-Terraform-Lease-Break"},"next":{"title":"Azure Kubernetes Service (AKS) Setup Guide - Part 2: Application Deployment and Services","permalink":"/docs/engineer/Azure/2019-02-04-Azure-Kubernetes-up-and-running-2"}}');var i=r(74848),t=r(28453);const a={title:"Azure Kubernetes Service (AKS) Setup Guide - Part 1: Cluster Creation and Configuration",description:"Complete guide to setting up Azure Kubernetes Service (AKS) cluster from scratch. Part 1 covers cluster creation, networking, and initial configuration.",keywords:["azure kubernetes service","aks setup","kubernetes azure","aks cluster","azure container service","k8s azure","aks deployment"],tags:["azure","aks","kubernetes","cluster-setup","part-1"],sidebar_position:3},o=void 0,l={},c=[{value:"Series Overview",id:"series-overview",level:2},{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Azure setup",id:"azure-setup",level:2},{value:"Setup Service Principals for Cluster",id:"setup-service-principals-for-cluster",level:3},{value:"Terraform setup",id:"terraform-setup",level:2},{value:"terraform workspace",id:"terraform-workspace",level:3},{value:"Provider (provider.tf)",id:"provider-providertf",level:4},{value:"Main (main.tf)",id:"main-maintf",level:4},{value:"Output (output.tf)",id:"output-outputtf",level:4},{value:"Variables (variables.tf)",id:"variables-variablestf",level:4},{value:"env.tfvars",id:"envtfvars",level:4},{value:"terraform validate",id:"terraform-validate",level:3},{value:"terraform apply",id:"terraform-apply",level:3},{value:"Verify with &#39;az&#39; or &#39;kubectl&#39;",id:"verify-with-az-or-kubectl",level:2},{value:"References",id:"references",level:2}];function u(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"Published Date: 28-JAN-2019"})}),"\n",(0,i.jsx)(n.admonition,{title:"Update",type:"info",children:(0,i.jsxs)(n.p,{children:["The code and approach below has been updated 03-JUN-2019 to align with ",(0,i.jsx)(n.a,{href:"2019-02-04-Azure-Kubernetes-up-and-running-3",children:"Post 3"}),"."]})}),"\n",(0,i.jsx)(n.p,{children:"What do we need? An Azure Kubernetes Cluster built with Terraform and setup for az-cli and kubectl to have at it when its done! Easy enough right ;)"}),"\n",(0,i.jsx)(n.p,{children:"The scenario we're building here is getting a Kubernetes cluster up & running in Azure; and using a Private Docker registry to store and pull our application from. We'll be building and deploying into the 'Australia East' Azure Region."}),"\n",(0,i.jsx)(n.h2,{id:"series-overview",children:"Series Overview"}),"\n",(0,i.jsx)(n.p,{children:"I call it a 'series', but I really only want to break it up into a couple (maybe 3) parts so its easier to write and more concise to read."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Get Kubernetes cluster up and running on Azure Kubernetes Managed Service (AKS)"}),"\n",(0,i.jsx)(n.li,{children:"Create a private Docker Registry in the cloud using Azure's Container Registry Managed service (ACR)"}),"\n",(0,i.jsx)(n.li,{children:"Deploy a simple application to it."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"As usual, we want to automate all the building steps we can. But as you'll see, there are a few parts of this which (to the best of my current knowledge) couldn't be automated and was done manually."}),"\n",(0,i.jsx)(n.p,{children:"Right, let's go!"}),"\n",(0,i.jsx)(n.h2,{id:"pre-requisites",children:"Pre-requisites"}),"\n",(0,i.jsx)(n.p,{children:"You will need setup a few things before you can deploy anything to the cloud."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Azure ",(0,i.jsx)(n.a,{href:"https://portal.azure.com",children:"portal account"})]}),"\n",(0,i.jsxs)(n.li,{children:["Azure ",(0,i.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-apt?view=azure-cli-latest",children:"az-cli"})," (command line interface)"]}),"\n",(0,i.jsxs)(n.li,{children:["Terraform ",(0,i.jsx)(n.a,{href:"https://learn.hashicorp.com/terraform/getting-started/install.html",children:"installed"})," (zipped binary, copy to ~/bin)"]}),"\n",(0,i.jsxs)(n.li,{children:["(optional) Kubectl ",(0,i.jsx)(n.a,{href:"https://kubernetes.io/docs/tasks/tools/install-kubectl/",children:"installed"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Once you have all these in place, proceed to the Azure setup"}),"\n",(0,i.jsx)(n.h2,{id:"azure-setup",children:"Azure setup"}),"\n",(0,i.jsx)(n.p,{children:"Once your portal account is created, and you have a valid subscription (Free Tier works), you need to login to link your azure-cli to your account, so from your terminal run this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"az login\n"})}),"\n",(0,i.jsx)(n.p,{children:"a browser window opens, you login with your azure portal account.."}),"\n",(0,i.jsx)(n.p,{children:"and then you'll see something like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'user@laptop:~$ az login\nNote, we have launched a browser for you to login. For old experience with device code, use "az login --use-device-code"\nOpening in existing browser session.\nYou have logged in. Now let us find all the subscriptions to which you have access...\n'})}),"\n",(0,i.jsx)(n.p,{children:"which then spits out some subscription information at you in json"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "cloudName": "AzureCloud",\n    "id": "0d667072-XXXX-46ef-a5b4-86979fdXXXXX",\n    "isDefault": true,\n    "name": "Free Trial",\n    "state": "Enabled",\n    "tenantId": "889cad64-XXXX-410e-b4fd-1cbXXXX537d",\n    "user": {\n      "name": "myname@server.com",\n      "type": "user"\n    }\n  }\n]\n'})}),"\n",(0,i.jsxs)(n.p,{children:["note this is the output of the following command: ",(0,i.jsx)(n.code,{children:"$ az account list"})]}),"\n",(0,i.jsx)(n.p,{children:"next, you need a service principal created to have permissions over your infrastructure"}),"\n",(0,i.jsx)(n.h3,{id:"setup-service-principals-for-cluster",children:"Setup Service Principals for Cluster"}),"\n",(0,i.jsx)(n.p,{children:"You need a Service Principal (sp) setup as Role Based Access Control (rbac) so it has permission and authority over your cluster."}),"\n",(0,i.jsx)(n.p,{children:"Run this to setup an 'sp' for the subscription you see above under 'id'"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'az ad sp create-for-rbac --role="Contributor" --scopes="/subscriptions/XXXXXXX-XXXX-46ef-a5b4-86979fdXXXXX" -n "http://cluster-admin"\n'})}),"\n",(0,i.jsx)(n.p,{children:"what's happening here:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'this creates a new service principal (sp) named "cluster-admin"'}),"\n",(0,i.jsx)(n.li,{children:"the 'Contributor' role is assigned to it"}),"\n",(0,i.jsx)(n.li,{children:"this sp has power over the subscription with id='0d667072-XXXX-46ef-a5b4-86979fdXXXXX' (Contributor has read/write access)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"output example looks like this - first the command throws a notice at you"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'Changing "cluster-admin" to a valid URI of "http://cluster-admin", which is the required format used for service principal names\nRetrying role assignment creation: 1/36\n'})}),"\n",(0,i.jsx)(n.p,{children:"then you get a JSON result"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "appId": "475cafbb-b339-40b4-8e69-XXXXXXXXXXX",\n  "displayName": "cluster-admin",\n  "name": "http://cluster-admin",\n  "password": "6f8c2642-df14-XXX-9438-XXXXXXXXXXXXX",\n  "tenant": "889cad64-XXX-410e-b4fd-1cbfd002537d"\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"so now you have your 'sp' setup, it has the right permissions and you have your appId (client_id) and password (client_secret) to use in terraform for building the cluster."}),"\n",(0,i.jsx)(n.h2,{id:"terraform-setup",children:"Terraform setup"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"Note: using terraform v0.12.0 at time of writing."})}),"\n",(0,i.jsx)(n.p,{children:"As per usual terraform build, we need to configure a few key pieces of infrastructure to be built in our cloud."}),"\n",(0,i.jsx)(n.p,{children:"Key approaches include:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"use workspaces"}),"\n",(0,i.jsx)(n.li,{children:"use service principals"}),"\n",(0,i.jsxs)(n.li,{children:["use cli inputs instead of hard-coded creds (always a good idea ",(0,i.jsx)(n.strong,{children:"not"})," to hard-code creds)"]}),"\n",(0,i.jsx)(n.li,{children:"use an env file to override the default variables.tf"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"terraform-workspace",children:"terraform workspace"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Best Practice Tip: use terraform workspaces to separate you infra code per environment/project."})}),"\n",(0,i.jsxs)(n.p,{children:["run ",(0,i.jsx)(n.code,{children:"terraform workspace new <environment name />"}),"\ne.g."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'13:18 $ terraform workspace new cloudbuilderio\nCreated and switched to workspace "cloudbuilderio"!\n\nYou\'re now on a new, empty workspace. Workspaces isolate their state,\nso if you run "terraform plan" Terraform will not see any existing state\nfor this configuration.\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["then, with all your terraform files in the dir, setup this workspace with:\n",(0,i.jsx)(n.code,{children:"terraform init"})]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Let's have a look at our (updated) files..."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"provider-providertf",children:"Provider (provider.tf)"}),"\n",(0,i.jsx)(n.p,{children:"this is the Azure provider"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'provider "azurerm" {\n  version = "=1.27.0"\n  subscription_id = "$\\{var.subscription_id}"\n  tenant_id="$\\{var.tenant_id}"\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"main-maintf",children:"Main (main.tf)"}),"\n",(0,i.jsx)(n.p,{children:"main includes setup for resource groups and cluster resources"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'# Kubernetes Resources\n\n# resource group for cluster\nresource "azurerm_resource_group" "aks" {\n  name     = "$\\{var.resource_group_name}"\n  location = "$\\{var.location}"\n}\n\n# k8s cluster\nresource "azurerm_kubernetes_cluster" "k8s" {\n  name                = "AKS-$\\{ terraform.workspace }"\n  kubernetes_version  = "$\\{var.kubernetes_version}"\n  location            = "$\\{azurerm_resource_group.aks.location}"\n  resource_group_name = "$\\{azurerm_resource_group.aks.name}"\n  dns_prefix          = "AKS-$\\{var.dns_prefix}"\n\n\n  linux_profile {\n    admin_username = "$\\{var.linux_login_user}"\n\n    ssh_key {\n      key_data = "$\\{var.ssh_public_key}"\n    }\n  }\n\n  agent_pool_profile {\n    name            = "$\\{var.node_pool_name}"\n    count           = "$\\{var.node_pool_size}"\n    vm_size         = "$\\{var.node_pool_vmsize}"\n    os_type         = "$\\{var.node_pool_os}"\n    os_disk_size_gb = 30\n  }\n\n  service_principal {\n    client_id     = "$\\{var.sp_client_id}"\n    client_secret = "$\\{var.sp_client_secret}"\n  }\n\n  tags = {\n    environment = "$\\{var.env_tag}"\n  }\n}\n\n# setup to output your kubeconfig from your terraform build\nresource "local_file" "kubeconfig" {\n  content = "$\\{azurerm_kubernetes_cluster.k8s.kube_config_raw}"\n  filename = "./$\\{ terraform.workspace }-kubeconfig"\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"why is this kubeconfig so important? this is the config file we feed to 'kubectl' so that it knows which cluster things are being applied to!"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"note: you can query for the client_id but you need to know the client_secret. If these don't already exist, you need to setup the service principals."})}),"\n",(0,i.jsx)(n.h4,{id:"output-outputtf",children:"Output (output.tf)"}),"\n",(0,i.jsx)(n.p,{children:"some debugging output to make sure we're seeing the kubeconfig details come back to us, and check the host name."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'output "kube_config" {\n  value = "$\\{azurerm_kubernetes_cluster.k8s.kube_config_raw}"\n}\n\noutput "host" {\n  value = "$\\{azurerm_kubernetes_cluster.k8s.kube_config.0.host}"\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"variables-variablestf",children:"Variables (variables.tf)"}),"\n",(0,i.jsxs)(n.p,{children:["Ok, we need to know what the ",(0,i.jsx)(n.code,{children:'"$\\{var.}"'})," values in our tf files resolve to, so here they all are in the variables.tf files"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'# Variables\n\nvariable "dns_prefix" {\n  description = "DNS prefix"\n}\n\nvariable "cluster_name" {\n  description = "name for your cluster"\n}\n\nvariable "kubernetes_version" {\n  description = "version number."\n}\n\nvariable "linux_login_user" {\n  description = "username to login with"\n  default = "ubuntu"\n}\n\nvariable "ssh_public_key" {\n  description = "ssh key to be used for ssh connections"\n}\n\nvariable "node_pool_name" {\n  description = "The name of the node pool"\n  default = "nodes"\n}\n\nvariable "node_pool_size" {\n  description = "The amount of nodes in the cluster"\n}\n\nvariable "node_pool_vmsize" {\n  description = "The vmsize for the nodes"\n}\n\nvariable "node_pool_os" {\n  description = "The os for the nodes"\n  default = "Linux"\n}\n\nvariable "tenant_id" {\n  description = "azure tenant id"\n}\n\nvariable "sp_client_id" {\n  description = "service principal id"\n}\n\nvariable "sp_client_secret" {\n  description = "service principal secret"\n}\n\nvariable "resource_group_name" {\n  description = "name for your cluster resource group"\n}\n\nvariable "location" {\n  description = "e.g. australiaeast"\n}\n\nvariable "env_tag" {\n  description = "whatever you want here"\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"envtfvars",children:"env.tfvars"}),"\n",(0,i.jsx)(n.p,{children:"Right. your environment file where you declare your variables that will put in place or over-ride the variables.tf values."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'## AKS variables\n\n# subscription details\nsubscription_id = "fill these in!"\ntenant_id = "fill these in!"\nsp_client_id = "fill these in!"\n\n# resource details\nresource_group_name = "fill these in!"\nlinux_login_user = "ubuntu"\nssh_public_key = "ssh-rsa past public key here!"\nnode_pool_size = "3"\nnode_pool_vmsize = "Standard_DS2_v2"\n\n# network details\ndns_prefix = "blog"\n\n# cluster details (change these to what you want!)\nkubernetes_version = "1.12.7"\ncluster_name = "cbio-cluster"\nlocation = "australiaeast"\nenv_tag = "cloudbuilder.io"\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"Awesome. Now let's validate and build this puppy!"}),"\n",(0,i.jsx)(n.h3,{id:"terraform-validate",children:"terraform validate"}),"\n",(0,i.jsx)(n.p,{children:"only started using this recently since upgrading to terraform v0.12.0 but its a good step to quickly sort your code out. think dev's call this a linter? lol."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:' $ terraform validate --var sp_client_secret="your-sp-secret-here" -var-file=env.tfvars\n Success! The configuration is valid.\n'})}),"\n",(0,i.jsx)(n.h3,{id:"terraform-apply",children:"terraform apply"}),"\n",(0,i.jsx)(n.p,{children:"Go!"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'terraform apply --var sp_client_secret="your sp secret goes here" -var-file=env.tfvars -auto-approve\n'})}),"\n",(0,i.jsx)(n.p,{children:"you'll see a bunch of these..."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"azurerm_kubernetes_cluster.k8s: Creating...\nazurerm_kubernetes_cluster.k8s: Still creating... [10s elapsed]\nazurerm_kubernetes_cluster.k8s: Still creating... [20s elapsed]\nazurerm_kubernetes_cluster.k8s: Still creating... [30s elapsed]\nazurerm_kubernetes_cluster.k8s: Still creating... [40s elapsed]\nazurerm_kubernetes_cluster.k8s: Still creating... [50s elapsed]\nazurerm_kubernetes_cluster.k8s: Still creating... [1m0s elapsed]\nazurerm_kubernetes_cluster.k8s: Still creating... [1m10s elapsed]\nazurerm_kubernetes_cluster.k8s: Still creating... [1m20s elapsed]\n"})}),"\n",(0,i.jsx)(n.p,{children:"and then when you're finished you'll get your kubeconfig like this"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"Apply complete! Resources: 2 added, 0 changed, 0 destroyed.\n\nOutputs:\n\nhost = https://aks-blog-xxxxxxx.hcp.australiaeast.azmk8s.io:443\nkube_config = apiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data:\n    ...\n    ...\n    ...\n    server: https://aks-blog-xxxxxx.hcp.australiaeast.azmk8s.io:443\n  name: AKS-cloudbuilderio\ncontexts:\n- context:\n    cluster: AKS-cloudbuilderio\n    user: clusterUser_AKS-CLOUDRESOURCES_AKS-cloudbuilderio\n  name: AKS-cloudbuilderio\ncurrent-context: AKS-cloudbuilderio\nkind: Config\npreferences: {}\nusers:\n- name: clusterUser_AKS-CLOUDRESOURCES_AKS-cloudbuilderio\n  user:\n    client-certificate-data:\n    ...\n    ...\n    ...\n    client-key-data:\n    ...\n    ...\n    token: redacted-token-data\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Success! now you have a file ",(0,i.jsx)(n.code,{children:"cloudbuilderio-kubeconfig"})," in your current directory which you can now use ",(0,i.jsx)(n.code,{children:"kubectl"})," to control your new cluster!"]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"For the record, this cluster took 7m9s to create."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"azurerm_kubernetes_cluster.k8s: Creation complete after 7m9s [id=/subscriptions/.../resourcegroups/AKS-CLOUDRESOURCES/providers/Microsoft.ContainerService/managedClusters/AKS-cloudbuilderio]\n"})}),"\n",(0,i.jsx)(n.h2,{id:"verify-with-az-or-kubectl",children:"Verify with 'az' or 'kubectl'"}),"\n",(0,i.jsxs)(n.p,{children:["Let's have a look at our new AKS cluster using ",(0,i.jsx)(n.code,{children:"kubectl"})," and file=",(0,i.jsx)(n.code,{children:"cloudbuilderio-kubeconfig"})]}),"\n",(0,i.jsx)(n.p,{children:"check it with 'kubectl'"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"14:53 $ kubectl --kubeconfig ./cloudbuilderio-kubeconfig get nodes\nNAME                   STATUS   ROLES   AGE   VERSION\naks-nodes-28201024-0   Ready    agent   41m   v1.12.7\naks-nodes-28201024-1   Ready    agent   41m   v1.12.7\naks-nodes-28201024-2   Ready    agent   41m   v1.12.7\n"})}),"\n",(0,i.jsx)(n.p,{children:"check it with 'az aks'"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"14:53 $ az aks list -o table\nName                Location       ResourceGroup       KubernetesVersion    ProvisioningState    Fqdn\n------------------  -------------  ------------------  -------------------  -------------------  ---------------------------------------------\nAKS-cloudbuilderio  australiaeast  AKS-CLOUDRESOURCES  1.12.7               Succeeded            aks-blog-xxxxx.hcp.australiaeast.azmk8s.io\n"})}),"\n",(0,i.jsxs)(n.p,{children:["or just login to your ",(0,i.jsx)(n.a,{href:"https://portal.azure.com/",children:"azure portal"}),' and have a look at it in the GUI under "Kubernetes services".']}),"\n",(0,i.jsx)(n.p,{children:"In Part 2 we will create an Azure Container Registry using 2 different methods, in which to store our application images ready for deployment."}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.hashicorp.com/blog/kubernetes-cluster-with-aks-and-terraform",children:"Hashicorp - kubernetes cluster with terraform"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.terraform.io/docs/providers/azurerm/",children:"Terraform - azurerm"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/cli/azure/ad/sp?view=azure-cli-latest#az-ad-sp-create-for-rbac",children:"Azure - create service principals"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var s=r(96540);const i={},t=s.createContext(i);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);