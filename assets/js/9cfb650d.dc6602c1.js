"use strict";(self.webpackChunkronamosa_github_io=self.webpackChunkronamosa_github_io||[]).push([[9188],{17490:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"archive/docker-wordpress/2018-04-25-AWS-Docker-Wordpress-Nginx-Ansible-Terraform-Part1","title":"Part 1 - Architecture, Database and Infrastructure.","description":"The following 3-part series of documents will go through setting up a containerized wordpress site, with an NGINX frontend, RDS/MariaDB database backend, build using Terraform and Ansible; and running AWS.","source":"@site/docs/archive/docker-wordpress/2018-04-25-AWS-Docker-Wordpress-Nginx-Ansible-Terraform-Part1.md","sourceDirName":"archive/docker-wordpress","slug":"/archive/docker-wordpress/docker-wordpress-1","permalink":"/docs/archive/docker-wordpress/docker-wordpress-1","draft":false,"unlisted":false,"editUrl":"https://github.com/ronamosa/ronamosa.github.io/edit/main/website/docs/archive/docker-wordpress/2018-04-25-AWS-Docker-Wordpress-Nginx-Ansible-Terraform-Part1.md","tags":[],"version":"current","lastUpdatedBy":"Ron Amosa","lastUpdatedAt":1758526302000,"frontMatter":{"slug":"docker-wordpress-1","title":"Part 1 - Architecture, Database and Infrastructure."},"sidebar":"docsSidebar","previous":{"title":"Beehiiv Custom Domain Setup with Cloudflare - Complete DNS Configuration Guide","permalink":"/docs/engineer/Misc/beehiiv-dns"},"next":{"title":"Part 2 - Provision with Ansible","permalink":"/docs/archive/docker-wordpress/docker-wordpress-2"}}');var t=r(74848),i=r(28453);const a={slug:"docker-wordpress-1",title:"Part 1 - Architecture, Database and Infrastructure."},o=void 0,d={},c=[{value:"Infrastructure Overview",id:"infrastructure-overview",level:2},{value:"EC2 Instance",id:"ec2-instance",level:2},{value:"RDS Database",id:"rds-database",level:2},{value:"Security Groups",id:"security-groups",level:2},{value:"Provider",id:"provider",level:2},{value:"Variables",id:"variables",level:2},{value:"Outputs",id:"outputs",level:2},{value:"Plan it, Run it",id:"plan-it-run-it",level:2},{value:"A few Quirky Points",id:"a-few-quirky-points",level:2},{value:"References",id:"references",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"The following 3-part series of documents will go through setting up a containerized wordpress site, with an NGINX frontend, RDS/MariaDB database backend, build using Terraform and Ansible; and running AWS."}),"\n",(0,t.jsx)(n.p,{children:"I wanted to make the simplest setup to run the docker wordpress site with an RDS/MariaDB backend. So, no ELB (load balancer), no Route53 or CloudFront."}),"\n",(0,t.jsx)(n.p,{children:"Here's a simple diagram of what I want to build"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"diagram of app",src:r(59240).A+"",width:"578",height:"747"})}),"\n",(0,t.jsx)(n.h2,{id:"infrastructure-overview",children:"Infrastructure Overview"}),"\n",(0,t.jsx)(n.p,{children:"This super basic setup consists of:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"1 x EC2 instance with docker, docker-compose installed"}),"\n",(0,t.jsx)(n.li,{children:"1 x RDS MariaDB Database."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"That's it."}),"\n",(0,t.jsx)(n.p,{children:"I want Terraform to take care of standing all the infrastructure up."}),"\n",(0,t.jsxs)(n.p,{children:["Your file list (see ",(0,t.jsx)(n.a,{href:"https://github.com/ronamosa",children:"Github"}),")"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"instance.tf"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"outputs.tf"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"provider.tf"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"rds.tf"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"securitygroups.tf"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"variables.tf"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Let's take a quick look at each component"}),"\n",(0,t.jsx)(n.h2,{id:"ec2-instance",children:"EC2 Instance"}),"\n",(0,t.jsx)(n.p,{children:"What we're working with:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"OS is Ubuntu (AMI)"}),"\n",(0,t.jsx)(n.li,{children:"instance type/size is 't2.micro'"}),"\n",(0,t.jsx)(n.li,{children:"root device is 8GB and will be deleted when instance is terminated"}),"\n",(0,t.jsx)(n.li,{children:"we want the instance to be assigned a Public IP address"}),"\n",(0,t.jsx)(n.li,{children:'an 20GB EBS volume will be added, and available in the "us-east-1c" AZ'}),"\n",(0,t.jsx)(n.li,{children:'EBS volume will be attached under device name "/dev/xvdb"'}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'resource "aws_instance" "web01" {\n  # ubuntu ami\n  ami = "ami-2d39803a"\n  instance_type = "t2.micro"\n  vpc_security_group_ids = ["$\\{aws_security_group.web_server_sg.id}"]\n\n  root_block_device {\n    volume_size = "8"\n    delete_on_termination = true\n  }\n\n  associate_public_ip_address = true\n  ebs_optimized = false\n  key_name = "infra_builder"\n\n  tags {\n    Name = "web01"\n  }\n}\n\nresource "aws_ebs_volume" "web01-ebs-volume1" {\n    availability_zone = "us-east-1c"\n    size = "20"\n    type = "gp2"\n    tags {\n        Name = "Data Volume"\n        CreatedBy = "Terraform"\n    }\n}\n\nresource "aws_volume_attachment" "web01-ebs1" {\n    device_name = "/dev/xvdb"\n    volume_id = "$\\{aws_ebs_volume.web01-ebs-volume1.id}"\n    instance_id = "$\\{aws_instance.web01.id}"\n}\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["the ",(0,t.jsx)(n.code,{children:"key_name"})," you see here must be setup manually via the AWS console."]})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"keypair",src:r(93171).A+"",width:"573",height:"485"})}),"\n",(0,t.jsx)(n.h2,{id:"rds-database",children:"RDS Database"}),"\n",(0,t.jsx)(n.p,{children:"What's happening here:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"a mariadb with 5 GB storage"}),"\n",(0,t.jsxs)(n.li,{children:["its a ",(0,t.jsx)(n.code,{children:"db.t2.medium"})," instance class (anything smaller becomes a problem)"]}),"\n",(0,t.jsx)(n.li,{children:"set the username, password, license model (important as the wrong license throws errors)"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"skip_final_snapshot"})," must be set to 'true'."]}),"\n",(0,t.jsx)(n.li,{children:"databases need subnet groups to straddle, one subnet same as the ec2 instance, and another one for other admin, replication, backup use."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'################ DB INSTANCE ###############\nresource "aws_db_instance" "backend_db" {\n    name = "rds_mysql"\n    allocated_storage = 5\n    engine = "mariadb"\n    storage_type = "gp2"\n    instance_class = "db.t2.medium"\n    identifier = "wordpressdb"\n    username = "wpress"\n    password = "wpress_247x"\n    parameter_group_name = "$\\{aws_db_parameter_group.rds_param_group.id}"\n    license_model = "general-public-license"\n\n    # set to \'true\' so we can destroy\n    skip_final_snapshot = true\n\n    # network config\n    db_subnet_group_name = "$\\{aws_db_subnet_group.rds_subnet_group.id}"\n    vpc_security_group_ids = ["$\\{aws_security_group.db_server_sg.id}"]\n\n    tags {\n        Name = "Backend Database"\n        CreatedBy = "Terraform"\n    }\n}\n\n################  DB SUBNET  ###############\nresource "aws_db_subnet_group" "rds_subnet_group" {\n    name = "rds subnet group"\n    # us-east-1c, us-east-1d\n    subnet_ids = ["subnet-39d6a014","subnet-7a5c7b33"]\n\n    tags {\n        Name = "RDS Subnet Group"\n        CreatedBy = "Terraform"\n    }\n}\n\n################  DB PARAMS  ###############\nresource "aws_db_parameter_group" "rds_param_group" {\n    name = "wp-db-mariadb10-1"\n    family = "mariadb10.1"\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"security-groups",children:"Security Groups"}),"\n",(0,t.jsx)(n.p,{children:"This is probably the glue that allows everything (once they're stood up) to access each other correctly. Security Grounds inbound and outbound rules are all defined and associated here."}),"\n",(0,t.jsx)(n.p,{children:"The following will define TWO security groups. One for the web server instance(s), and the second one for the RDS backend database."}),"\n",(0,t.jsx)(n.p,{children:"There's probably a better way to throw all these together as its just a simple/small configuration, but I like to still use practices that can scale if we decided to jump to a bigger setup. I'm sure this isn't quite what they mean by making all code \"modular\" with Infrastructure as Code (IaC), but it works on the same principle."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'################ GROUPS ###############\n\n# this is your web server GROUP config\n\nresource "aws_security_group" "web_server_sg" {\n    name = "web_server_security"\n    description = "ALLOW inbound traffic to web server"\n    vpc_id = "vpc-534cfe35"\n\n    tags {\n        Name = "web_sg"\n        CreatedBy = "Terraform"\n    }\n}\n\n# this is your RDS database GROUP config\n\nresource "aws_security_group" "db_server_sg" {\n    name = "rds_server_security"\n    description = "ALLOW inbound traffic to RDS/MySQL"\n    vpc_id = "vpc-534cfe35"\n\n    tags {\n        Name = "db_sg"\n        CreatedBy = "Terraform"\n    }\n}\n\n################ WEB RULES ###############\n\n# the following are security group RULES you add\n# to the security GROUP\n\nresource "aws_security_group_rule" "ssh" {\n    type = "ingress"\n    from_port = 22\n    to_port = 22\n    protocol = "tcp"\n    cidr_blocks = ["0.0.0.0/0"]\n\n    # add to the WEB GROUP above\n    security_group_id = "$\\{aws_security_group.web_server_sg.id}"\n}\n\nresource "aws_security_group_rule" "web_http" {\n    type = "ingress"\n    from_port = 80\n    to_port = 80\n    protocol = "tcp"\n    cidr_blocks = ["0.0.0.0/0"]\n\n    # add to the WEB GROUP above\n    security_group_id = "$\\{aws_security_group.web_server_sg.id}"\n}\n\nresource "aws_security_group_rule" "web_https" {\n    type = "ingress"\n    from_port = 443\n    to_port = 443\n    protocol = "tcp"\n    cidr_blocks = ["0.0.0.0/0"]\n\n    # add to the WEB GROUP above\n    security_group_id = "$\\{aws_security_group.web_server_sg.id}"\n}\n\nresource "aws_security_group_rule" "anywhere_outbound" {\n    type = "egress"\n    from_port = 0\n    to_port = 0\n    protocol = "-1"\n    cidr_blocks = ["0.0.0.0/0"]\n\n    # add to the WEB GROUP above\n    security_group_id = "$\\{aws_security_group.web_server_sg.id}"\n}\n\n################ DB RULES ###############\n\nresource "aws_security_group_rule" "db_rds_sg-1" {\n    type = "ingress"\n    from_port = "3306"\n    to_port = "3306"\n    protocol = "tcp"\n\n    # allow inbound from the WEB GROUP\n    source_security_group_id = "$\\{aws_security_group.web_server_sg.id}"\n\n    # references the DB GROUP above\n    security_group_id = "$\\{aws_security_group.db_server_sg.id}"\n}\n\nresource "aws_security_group_rule" "db_rds_sg-2" {\n    type = "egress"\n    from_port = "0"\n    to_port = "0"\n    protocol = "-1"\n    cidr_blocks = ["0.0.0.0/0"]\n\n    # references the DB GROUP above\n    security_group_id = "$\\{aws_security_group.db_server_sg.id}"\n}\n\n'})}),"\n",(0,t.jsx)(n.p,{children:"And the last 2 terraform files in the mix are:"}),"\n",(0,t.jsx)(n.h2,{id:"provider",children:"Provider"}),"\n",(0,t.jsx)(n.p,{children:"Standard setup:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'provider "aws" {\n  access_key = "$\\{var.access_key}"\n  secret_key = "$\\{var.secret_key}"\n  region     = "$\\{var.aws_region}"\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"variables",children:"Variables"}),"\n",(0,t.jsx)(n.p,{children:"then these variables get fed into provider (amongst others):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'variable "access_key" {\n  default = "**************************"\n}\n\nvariable "secret_key" {\n  default = "**************************"\n}\n\nvariable "aws_region" {\n  description = "AWS region"\n  default = "us-east-1"\n}\n\nvariable "aws_vpc_cidr" {\n  default = {\n    "us-east-1" = "172.31.0.0/16"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"outputs",children:"Outputs"}),"\n",(0,t.jsxs)(n.p,{children:["these can be whatever you need outputted to stdout (i.e. your screen) and also tracked by terraform (via ",(0,t.jsx)(n.code,{children:"terraform output"}),") for future use."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"first output will look for ALL public_ip's it can find under aws_instance.web01 (needs to be a list i.e. '[]' wrapped)"}),"\n",(0,t.jsx)(n.li,{children:"second output just the name of the mariadb that's created"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'output "ec2_public_ips" {\n  value = ["$\\{aws_instance.web01.*.public_ip}"]\n}\n\noutput "rds_mysql_db_name" {\n  value = "$\\{aws_db_instance.backend_db.address}"\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"plan-it-run-it",children:"Plan it, Run it"}),"\n",(0,t.jsxs)(n.p,{children:["A rather long video of running ",(0,t.jsx)(n.code,{children:"terraform plan"}),", and when all looks good, no error messages I run ",(0,t.jsx)(n.code,{children:"terraform apply"}),". At a certain point in the video, terraform errors out and I have to fix it on the fly (did it quicker than normal due to having seen this error before)."]}),"\n",(0,t.jsx)(n.p,{children:"Don't let the thumbnail fool you, I switch screens while the RDS database is being created and show the AWS console where things are magically showing up:"}),"\n",(0,t.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube-nocookie.com/embed/c9ufJAYuaZ8?rel=0&controls=0&showinfo=0",frameBorder:"0",allow:"autoplay; encrypted-media",allowFullScreen:!0}),"\n",(0,t.jsx)(n.p,{children:"After all's up & running, login to the new EC2 instance and check it can connect to the new RDS/Maridadb database! (grab the database name from the terraform output):"}),"\n",(0,t.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube-nocookie.com/embed/U4CsQX3ksoE?rel=0&controls=0&showinfo=0",frameBorder:"0",allow:"autoplay; encrypted-media",allowFullScreen:!0}),"\n",(0,t.jsx)(n.h2,{id:"a-few-quirky-points",children:"A few Quirky Points"}),"\n",(0,t.jsx)(n.p,{children:"A few things I ran into while working through this which were good to note:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"mariadb complained with I tried to use db.t2.small. Setting it to db.t2.medium fixed the issue."}),"\n",(0,t.jsx)(n.li,{children:"db password must be longer than 8 char (no kidding)"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"vpc_security_group_ids"})," in the terraform variables needs to be inside '[]' i.e. ",(0,t.jsx)(n.code,{children:"[$\\{aws_security_groups.x.id}]"})," or it won't recognize your reference as a 'list'"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# set to 'true' so we can destroy\nskip_final_snapshot = true\n"})}),"\n",(0,t.jsxs)(n.p,{children:["or you get this error on ",(0,t.jsx)(n.code,{children:"terraform destroy"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"Error: Error applying plan:\n\n1 error(s) occurred:\n\n* aws_db_instance.backend_db (destroy): 1 error(s) occurred:\n\n* aws_db_instance.backend_db: DB Instance FinalSnapshotIdentifier is required when a final snapshot is required\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["dont forget a ",(0,t.jsx)(n.code,{children:"ALL 0.0.0.0/0"})," egress rule on your WEB security group or the outbound request (I tried to telnet to the RDS and it didnt return anything)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Right, that's the end of Part I!"}),"\n",(0,t.jsx)(n.p,{children:"In Part II we will provision some things onto the new EC2 instance to get it ready for running docker and using docker-compose!"}),"\n",(0,t.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/arbabnazar/terraform-ansible-aws-vpc-ha-wordpress.git",children:"terraform vpc examples"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://rbgeek.wordpress.com/2016/03/28/highly-available-wordpress-setup-inside-aws-vpc-using-terraform-ansible/",children:"aws wordpress terraform ansible example"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://hackernoon.com/setup-docker-swarm-on-aws-using-ansible-terraform-daa1eabbc27d",children:"bootstrap credit"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://alex.dzyoba.com/blog/terraform-ansible/",children:"using ansible with terraform"})}),"\n"]})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var s=r(96540);const t={},i=s.createContext(t);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},59240:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/dockerwordpress-appdiagram-a35236b50800df8bbb67315f0a0f9435.png"},93171:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/dockerwordpress-keypair-e3c477fc849182596746a6f6d5e724ca.png"}}]);