"use strict";(self.webpackChunkronamosa_github_io=self.webpackChunkronamosa_github_io||[]).push([[5225],{28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>l});var i=t(96540);const s={},a=i.createContext(s);function d(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(a.Provider,{value:n},e.children)}},35991:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>o,frontMatter:()=>d,metadata:()=>i,toc:()=>r});const i=JSON.parse('{"id":"study/CKS/Runtime Security/RuntimeAuditing","title":"Auditing","description":"api requests --\x3e k8s api --\x3e audit logs","source":"@site/docs/study/CKS/6. Runtime Security/RuntimeAuditing.md","sourceDirName":"study/CKS/6. Runtime Security","slug":"/study/CKS/Runtime Security/RuntimeAuditing","permalink":"/docs/study/CKS/Runtime Security/RuntimeAuditing","draft":false,"unlisted":false,"editUrl":"https://github.com/ronamosa/ronamosa.github.io/edit/main/website/docs/study/CKS/6. Runtime Security/RuntimeAuditing.md","tags":[],"version":"current","lastUpdatedBy":"Ron Amosa","lastUpdatedAt":1758526302000,"frontMatter":{"title":"Auditing"},"sidebar":"docsSidebar","previous":{"title":"Static Analysis","permalink":"/docs/study/CKS/Supply Chain Security/SupplyChainStaticAnalysis"},"next":{"title":"Runtime Host Forensics","permalink":"/docs/study/CKS/Runtime Security/RuntimeHostAnalysis"}}');var s=t(74848),a=t(28453);const d={title:"Auditing"},l=void 0,u={},r=[{value:"setup configure audit logs",id:"setup-configure-audit-logs",level:2},{value:"Assignment",id:"assignment",level:3}];function c(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"api requests --\x3e k8s api --\x3e audit logs"}),"\n",(0,s.jsx)(n.p,{children:"why do we need them?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"check who accessed what"}),"\n",(0,s.jsx)(n.li,{children:"check what user x is doing"}),"\n",(0,s.jsx)(n.li,{children:"debugging apps or crds"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"can log according to audit STAGES, so more granular and not just logging EVERYTHING."}),"\n",(0,s.jsx)(n.p,{children:"stages"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"RequestReceived"}),"\n",(0,s.jsx)(n.li,{children:"ResponseStarted"}),"\n",(0,s.jsx)(n.li,{children:"ResponseComplete"}),"\n",(0,s.jsx)(n.li,{children:"Panic"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:'you can set up "audit policy stages"'}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"none"}),"\n",(0,s.jsx)(n.li,{children:"MetaData"}),"\n",(0,s.jsx)(n.li,{children:"Request"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"setup-configure-audit-logs",children:"setup configure audit logs"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# on master\nmkdir -p /etc/kubernetes/audit\ncd /etc/kubernetes/audit\n"})}),"\n",(0,s.jsx)(n.p,{children:"add to kubeapi manifest to enable audit policy"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"spec:\n  containers:\n  - command:\n    - kube-apiserver\n    - --audit-policy-file=/etc/kubernetes/audit/policy.yaml       # add\n    - --audit-log-path=/etc/kubernetes/audit/logs/audit.log       # add\n    - --audit-log-maxsize=500                                     # add\n    - --audit-log-maxbackup=5                                     # add\n...\n    volumeMounts:\n    - mountPath: /etc/kubernetes/audit      # add\n      name: audit\n...\n  volumes:\n  - hostPath:                               # add\n      path: /etc/kubernetes/audit           # add\n      type: DirectoryOrCreate               # add\n    name: audit                             # add    \n"})}),"\n",(0,s.jsxs)(n.p,{children:["tail ",(0,s.jsx)(n.code,{children:"/etc/kuberenetes/audit/logs/audit.log"})," to see the logged events."]}),"\n",(0,s.jsx)(n.h3,{id:"assignment",children:"Assignment"}),"\n",(0,s.jsx)(n.p,{children:"make a policy that"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["ignores ",(0,s.jsx)(n.code,{children:"RequestReceived"})]}),"\n",(0,s.jsx)(n.li,{children:'ignores "get", "watch", "list"'}),"\n",(0,s.jsx)(n.li,{children:"from Secrets but only metadata level"}),"\n",(0,s.jsxs)(n.li,{children:["everything else at ",(0,s.jsx)(n.code,{children:"RequestResponse"})," level"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: audit.k8s.io/v1 # This is required.\nkind: Policy\n# Don\'t generate audit events for all requests in RequestReceived stage.\nomitStages:\n  - "RequestReceived"\nrules:\n  - level: None\n    verbs: ["get", "watch", "list"]\n\n  - level: Metadata\n    resources:\n    - group: ""\n      resources: ["secrets"]\n\n  - level: RequestResponse\n'})})]})}function o(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);