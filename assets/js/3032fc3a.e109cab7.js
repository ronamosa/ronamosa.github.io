"use strict";(self.webpackChunkronamosa_github_io=self.webpackChunkronamosa_github_io||[]).push([[5592],{26130:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"engineer/Azure/2019-07-20-Sonarqube-AzureDisk-PersistentVolume","title":"SonarQube on AKS with Azure Disk - Helm Chart and Persistent Volume Setup","description":"Deploy SonarQube scanner on Azure Kubernetes Service (AKS) using Helm charts with Azure Disk persistent volumes. Complete setup guide for code quality analysis.","source":"@site/docs/engineer/Azure/2019-07-20-Sonarqube-AzureDisk-PersistentVolume.md","sourceDirName":"engineer/Azure","slug":"/engineer/Azure/2019-07-20-Sonarqube-AzureDisk-PersistentVolume","permalink":"/docs/engineer/Azure/2019-07-20-Sonarqube-AzureDisk-PersistentVolume","draft":false,"unlisted":false,"editUrl":"https://github.com/ronamosa/ronamosa.github.io/edit/main/website/docs/engineer/Azure/2019-07-20-Sonarqube-AzureDisk-PersistentVolume.md","tags":[{"inline":true,"label":"azure","permalink":"/docs/tags/azure"},{"inline":true,"label":"aks","permalink":"/docs/tags/aks"},{"inline":true,"label":"sonarqube","permalink":"/docs/tags/sonarqube"},{"inline":true,"label":"helm","permalink":"/docs/tags/helm"},{"inline":true,"label":"persistent-storage","permalink":"/docs/tags/persistent-storage"}],"version":"current","lastUpdatedBy":"Ron Amosa","lastUpdatedAt":1758526302000,"sidebarPosition":1,"frontMatter":{"title":"SonarQube on AKS with Azure Disk - Helm Chart and Persistent Volume Setup","description":"Deploy SonarQube scanner on Azure Kubernetes Service (AKS) using Helm charts with Azure Disk persistent volumes. Complete setup guide for code quality analysis.","keywords":["sonarqube aks","azure disk","helm chart","persistent volume","code quality","azure kubernetes","sonarqube deployment"],"tags":["azure","aks","sonarqube","helm","persistent-storage"],"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"UPNG: AWS Workshops","permalink":"/docs/upng"},"next":{"title":"Azure Blob Storage Lease Management - Break Terraform State Lock Issues","permalink":"/docs/engineer/Azure/2019-02-12-Azure-Terraform-Lease-Break"}}');var r=n(74848),t=n(28453);const i={title:"SonarQube on AKS with Azure Disk - Helm Chart and Persistent Volume Setup",description:"Deploy SonarQube scanner on Azure Kubernetes Service (AKS) using Helm charts with Azure Disk persistent volumes. Complete setup guide for code quality analysis.",keywords:["sonarqube aks","azure disk","helm chart","persistent volume","code quality","azure kubernetes","sonarqube deployment"],tags:["azure","aks","sonarqube","helm","persistent-storage"],sidebar_position:1},l=void 0,o={},d=[{value:"Pre-requirements",id:"pre-requirements",level:2},{value:"Quick K8s Storage Overview",id:"quick-k8s-storage-overview",level:2},{value:"Understanding PersistentVolumes and PersistentVolumeClaims",id:"understanding-persistentvolumes-and-persistentvolumeclaims",level:3},{value:"The abstractions: Volumes, PV, StorageClasses and PVC&#39;s",id:"the-abstractions-volumes-pv-storageclasses-and-pvcs",level:3},{value:"Provision your AzureDisks",id:"provision-your-azuredisks",level:2},{value:"storageClass.yaml",id:"storageclassyaml",level:2},{value:"Sonarqube Helm Chart",id:"sonarqube-helm-chart",level:2},{value:"Update sonarqube values.yaml",id:"update-sonarqube-valuesyaml",level:3},{value:"Create pv.yaml for sonarqube chart",id:"create-pvyaml-for-sonarqube-chart",level:3},{value:"PostgreSQL Helm Sub Chart",id:"postgresql-helm-sub-chart",level:2},{value:"Add postgresql values.yaml",id:"add-postgresql-valuesyaml",level:3},{value:"Create pv.yaml for PostgreSQL sub-chart",id:"create-pvyaml-for-postgresql-sub-chart",level:2},{value:"Zip PostgreSQL (optional)",id:"zip-postgresql-optional",level:2},{value:"Helm deploy chart",id:"helm-deploy-chart",level:2},{value:"References",id:"references",level:2}];function c(e){const s={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.admonition,{type:"info",children:(0,r.jsx)(s.p,{children:"Published Date: 20-JUL-2019"})}),"\n",(0,r.jsxs)(s.p,{children:["As-is, this sonarqube helm chart will survive a deleted pod event, maybe even a helm delete. But if your cluster is rebuilt, or you run a ",(0,r.jsx)(s.code,{children:"helm delete --purge sonarqube"})," you're going to lose any data and reports that were living with your deployment."]}),"\n",(0,r.jsx)(s.h2,{id:"pre-requirements",children:"Pre-requirements"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"2 x AzureDisk"}),"\n",(0,r.jsx)(s.li,{children:"1 x K8s cluster"}),"\n",(0,r.jsx)(s.li,{children:"helm"}),"\n",(0,r.jsx)(s.li,{children:"kubectl"}),"\n",(0,r.jsx)(s.li,{children:"az-cli"}),"\n"]}),"\n",(0,r.jsx)(s.admonition,{type:"tip",children:(0,r.jsxs)(s.p,{children:["installation instructions for these tools can be found ",(0,r.jsx)(s.a,{href:"2019-01-28-Azure-Kubernetes-up-and-running-1/",children:"here."})]})}),"\n",(0,r.jsx)(s.h2,{id:"quick-k8s-storage-overview",children:"Quick K8s Storage Overview"}),"\n",(0,r.jsx)(s.p,{children:"K8s storage took a bit to wrap my head around but essentially when I understood the following topics, it all made sense:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://kubernetes.io/docs/concepts/storage/volumes/",children:"Volumes"})}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"https://kubernetes.io/docs/concepts/storage/persistent-volumes/",children:"PersistentVolumes"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims",children:"PersistentVolumeClaims"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://kubernetes.io/docs/concepts/storage/storage-classes/",children:"Storage Classes"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/",children:"Dynamic Volume Provisioning"})}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"understanding-persistentvolumes-and-persistentvolumeclaims",children:"Understanding PersistentVolumes and PersistentVolumeClaims"}),"\n",(0,r.jsxs)(s.p,{children:["This ",(0,r.jsx)(s.a,{href:"https://www.youtube.com/watch?v=OulmwTYTauI",children:"video"})," by \"IBM FSS FCI and Counter Fraud Management\" (no idea why they're called this?!) is probably the clearest explanation I've seen online."]}),"\n",(0,r.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube-nocookie.com/embed/OulmwTYTauI?controls=0",frameBorder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}),"\n",(0,r.jsx)(s.h3,{id:"the-abstractions-volumes-pv-storageclasses-and-pvcs",children:"The abstractions: Volumes, PV, StorageClasses and PVC's"}),"\n",(0,r.jsx)(s.p,{children:"Here's a diagram:"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{src:"https://social.technet.microsoft.com/wiki/cfs-filesystemfile.ashx/__key/communityserver-wikis-components-files/00-00-00-00-05/7485.persistent_2D00_volume_2D00_claims.png",alt:"AKS PV PVC"})}),"\n",(0,r.jsx)(s.p,{children:"Essentially, in an oversimplified nutshell:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Volumes"})," are derived from Physical Disks that an Admin provisions"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"PersistentVolumes"})," (static) are an abstraction of the Physical Disks"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"StorageClasses"})," (dynamic) are also an abstraction of the Physical Disks"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"PersistentVolumeClaims"}),' is what the Pod will actually mount as a "volume". The PVC will determine if you\'ll be mounting a static PV, or a storageClass Volume.']}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"Right, so now that we've got that out of the way, let's build some things."}),"\n",(0,r.jsx)(s.h2,{id:"provision-your-azuredisks",children:"Provision your AzureDisks"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"1 x sonarqube data disk"}),"\n",(0,r.jsx)(s.li,{children:"1 x postgresql database disk"}),"\n"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"az disk create -g AKS-CLOUDRESOURCES -n sonarqube-data --size-gb 10 --sku Standard_LRS --tags application=sonarqube\naz disk create -g AKS-CLOUDRESOURCES -n postgresql-data --size-gb 16 --sku Standard_LRS --tags application=postgresql\n"})}),"\n",(0,r.jsx)(s.p,{children:"example output for sonarqube disk"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n  "creationData": {\n    "createOption": "Empty",\n    "imageReference": null,\n    "sourceResourceId": null,\n    "sourceUri": null,\n    "storageAccountId": null\n  },\n  "diskIopsReadWrite": 500,\n  "diskMbpsReadWrite": 60,\n  "diskSizeGb": 10,\n  "encryptionSettings": null,\n  "id": "/subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX/resourceGroups/AKS-CLOUDRESOURCES/providers/Microsoft.Compute/disks/sonarqube-data",\n  "location": "australiaeast",\n  "managedBy": null,\n  "name": "sonarqube-data",\n  "osType": null,\n  "provisioningState": "Succeeded",\n  "resourceGroup": "AKS-CLOUDRESOURCES",\n  "sku": {\n    "name": "Standard_LRS",\n    "tier": "Standard"\n  },\n  "tags": {\n    "application": "sonarqube"\n  },\n  "timeCreated": "2019-07-23T11:01:16.893039+00:00",\n  "type": "Microsoft.Compute/disks",\n  "zones": null\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"storageclassyaml",children:"storageClass.yaml"}),"\n",(0,r.jsxs)(s.p,{children:["Create your storage class. Notice the ",(0,r.jsx)(s.code,{children:"Retain"})," reclaimPolicy so that the volumes aren't deleted when pods and container disappear."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",children:"  apiVersion: storage.k8s.io/v1\n  kind: StorageClass\n  metadata:\n    name: staticManagedVolumeRetain\n  provisioner: kubernetes.io/azure-disk\n  parameters:\n    kind: Managed\n    storageaccounttype: Standard_LRS\n  reclaimPolicy: Retain\n"})}),"\n",(0,r.jsx)(s.p,{children:"apply"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"kubectl apply -f storageClass.yaml"})}),"\n",(0,r.jsx)(s.h2,{id:"sonarqube-helm-chart",children:"Sonarqube Helm Chart"}),"\n",(0,r.jsx)(s.p,{children:"Grab a copy of the official sonarqube helm chart from Github"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://github.com/helm/charts/tree/master/stable/sonarqube",children:"Official Sonarqube Helm Chart"})}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"update-sonarqube-valuesyaml",children:"Update sonarqube values.yaml"}),"\n",(0,r.jsxs)(s.p,{children:["add these values to the ",(0,r.jsx)(s.code,{children:"values.yaml"})," file"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",children:'persistence:\n  enabled: true\n  storageClass: "staticManagedVolumeRetain"\n  accessMode: ReadWriteOnce\n  size: 5Gi\n\nazureDisk:\n  kind: Managed\n  diskName: sonarqube-data\n  diskURI: /subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX/resourceGroups/AKS-CLOUDRESOURCES/providers/Microsoft.Compute/disks/sonarqube-data\n'})}),"\n",(0,r.jsx)(s.h3,{id:"create-pvyaml-for-sonarqube-chart",children:"Create pv.yaml for sonarqube chart"}),"\n",(0,r.jsxs)(s.p,{children:["Place this under ",(0,r.jsx)(s.code,{children:"/sonarqube/templates/"})]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",metastring:'title="sonarqube-pv.yaml"',children:'\\{\\{- if and .Values.persistence.enabled (not .Values.persistence.existingClaim) \\}\\}\nkind: PersistentVolume\napiVersion: v1\nmetadata:\n  name: pv-\\{\\{ template "sonarqube.name" . \\}\\}-data\n  labels:\n    app: \\{\\{ template "sonarqube.name" . \\}\\}\n    chart: "\\{\\{ .Chart.Name \\}\\}-\\{\\{ .Chart.Version \\}\\}"\n    release: "\\{\\{ .Release.Name \\}\\}"\n    heritage: "\\{\\{ .Release.Service \\}\\}"\nspec:\n  capacity:\n    storage: \\{\\{ .Values.persistence.size \\}\\}\n  storageClassName: \\{\\{ .Values.persistence.storageClassName | quote \\}\\}\n  azureDisk:\n    kind: \\{\\{ .Values.azureDisk.kind | quote \\}\\}\n    diskName: \\{\\{ .Values.azureDisk.diskName | quote \\}\\}\n    diskURI: \\{\\{ .Values.azureDisk.diskURI | quote \\}\\}\n  accessModes:\n    - \\{\\{ .Values.persistence.accessMode | quote \\}\\}\n\\{\\{- end \\}\\}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"postgresql-helm-sub-chart",children:"PostgreSQL Helm Sub Chart"}),"\n",(0,r.jsxs)(s.p,{children:["We are going to use this ",(0,r.jsx)(s.a,{href:"https://github.com/databus23/charts/tree/master/stable/postgresql",children:"PostgreSQL"})," helm chart as a subchart to sonarqube."]}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["Create a directory called ",(0,r.jsx)(s.code,{children:"'/charts/'"})," in the sonarqube root directory."]}),"\n",(0,r.jsxs)(s.li,{children:["Download the postgresql chart into ",(0,r.jsx)(s.code,{children:"/charts/"}),"."]}),"\n",(0,r.jsx)(s.li,{children:"Make the following changes."}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"add-postgresql-valuesyaml",children:"Add postgresql values.yaml"}),"\n",(0,r.jsx)(s.p,{children:"Add the following values (that match the azureDisk's you provisioned earlier)."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",children:'persistence:\n  enabled: true\n  storageClass: "staticManagedVolumeRetain"\n  accessMode: ReadWriteOnce\n  size: 5Gi\n\nazureDisk:\n  kind: Managed\n  diskName: postgresql-data\n  diskURI: /subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX/resourceGroups/AKS-CLOUDRESOURCES/providers/Microsoft.Compute/disks/postgresql-data\n'})}),"\n",(0,r.jsx)(s.h2,{id:"create-pvyaml-for-postgresql-sub-chart",children:"Create pv.yaml for PostgreSQL sub-chart"}),"\n",(0,r.jsxs)(s.p,{children:["Place this under ",(0,r.jsx)(s.code,{children:"/post/templates/"}),":"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",metastring:'title="sonarqube-pv.yaml"',children:'\\{\\{- if and .Values.persistence.enabled (not .Values.persistence.existingClaim) \\}\\}\nkind: PersistentVolume\napiVersion: v1\nmetadata:\n  name: pv-\\{\\{ template "sonarqube.name" . \\}\\}-data\n  labels:\n    app: \\{\\{ template "sonarqube.name" . \\}\\}\n    chart: "\\{\\{ .Chart.Name \\}\\}-\\{\\{ .Chart.Version \\}\\}"\n    release: "\\{\\{ .Release.Name \\}\\}"\n    heritage: "\\{\\{ .Release.Service \\}\\}"\nspec:\n  capacity:\n    storage: \\{\\{ .Values.persistence.size \\}\\}\n  storageClassName: \\{\\{ .Values.persistence.storageClassName | quote \\}\\}\n  azureDisk:\n    kind: \\{\\{ .Values.azureDisk.kind | quote \\}\\}\n    diskName: \\{\\{ .Values.azureDisk.diskName | quote \\}\\}\n    diskURI: \\{\\{ .Values.azureDisk.diskURI | quote \\}\\}\n  accessModes:\n    - \\{\\{ .Values.persistence.accessMode | quote \\}\\}\n\\{\\{- end \\}\\}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"zip-postgresql-optional",children:"Zip PostgreSQL (optional)"}),"\n",(0,r.jsxs)(s.p,{children:["After adding the ",(0,r.jsx)(s.code,{children:"pv.yaml"})," file to the postgresql/templates directory and adding the details into the postgresql ",(0,r.jsx)(s.code,{children:"values.yaml"})," file you can tar zip that up so as ",(0,r.jsx)(s.strong,{children:"postgresql-0.8.3.tgz"})," and make sure it can be found under ",(0,r.jsx)(s.code,{children:"sonarqube/charts"})," folder."]}),"\n",(0,r.jsxs)(s.p,{children:["You can also just keep the files unzipped in their folders under ",(0,r.jsx)(s.code,{children:"sonarqube/charts/postgresql/"})," etc."]}),"\n",(0,r.jsxs)(s.p,{children:["Worse case scenario none of this makes sense and is hard to follow - have a look at my git repo with the files laid out how it worked for me: ",(0,r.jsx)(s.a,{href:"https://github.com/ronamosa/sonarqube-static-disks.git",children:"https://github.com/ronamosa/sonarqube-static-disks.git"}),"ng}"]}),"\n",(0,r.jsx)(s.h2,{id:"helm-deploy-chart",children:"Helm deploy chart"}),"\n",(0,r.jsx)(s.p,{children:"You can now run whatever helm deploy line you usually do to put that badboy into your k8s cluster."}),"\n",(0,r.jsx)(s.p,{children:"Test the persistence by doing a"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"helm delete --purge sonarqube"})," or"]}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"terraform destroy myAksCluster"})}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"and watch when you re-deploy sonarqube that the deployment will find and mount the existing PV's into the pod and you'll see all your previous sonarqube data."}),"\n",(0,r.jsx)(s.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://github.com/ronamosa/charts/tree/master/stable/sonarqube",children:"My Customised Sonarqube Helm Chart"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://github.com/helm/charts/tree/master/stable/sonarqube",children:"Official Sonarqube Helm Chart"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/cli/azure/disk?view=azure-cli-latest",children:"Azure Managed Disks (az-cli)"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://kubernetes.io/docs/concepts/storage/",children:"Kubernetes Storage"})}),"\n"]})]})}function u(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>l});var a=n(96540);const r={},t=a.createContext(r);function i(e){const s=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(t.Provider,{value:s},e.children)}}}]);