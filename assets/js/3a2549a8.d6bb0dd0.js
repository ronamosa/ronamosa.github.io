"use strict";(self.webpackChunkronamosa_github_io=self.webpackChunkronamosa_github_io||[]).push([[9502],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var i=t(96540);const s={},o=i.createContext(s);function l(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(o.Provider,{value:n},e.children)}},65726:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"study/CKS/Runtime Security/RuntimeImmutable","title":"Immutability","description":"Immutability","source":"@site/docs/study/CKS/6. Runtime Security/RuntimeImmutable.md","sourceDirName":"study/CKS/6. Runtime Security","slug":"/study/CKS/Runtime Security/RuntimeImmutable","permalink":"/docs/study/CKS/Runtime Security/RuntimeImmutable","draft":false,"unlisted":false,"editUrl":"https://github.com/ronamosa/ronamosa.github.io/edit/main/website/docs/study/CKS/6. Runtime Security/RuntimeImmutable.md","tags":[],"version":"current","lastUpdatedBy":"Ron Amosa","lastUpdatedAt":1758526302000,"frontMatter":{"title":"Immutability"},"sidebar":"docsSidebar","previous":{"title":"Runtime Host Forensics","permalink":"/docs/study/CKS/Runtime Security/RuntimeHostAnalysis"},"next":{"title":"Open Policy Agent (OPA)","permalink":"/docs/study/CKS/OPAGatekeeper"}}');var s=t(74848),o=t(28453);const l={title:"Immutability"},r=void 0,a={},c=[{value:"Immutability",id:"immutability",level:2},{value:"Container and Pod level enforcement",id:"container-and-pod-level-enforcement",level:2},{value:"Scenarios to ensure Pods containers are immutable",id:"scenarios-to-ensure-pods-containers-are-immutable",level:2},{value:"securityContext",id:"securitycontext",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"immutability",children:"Immutability"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"wont be modified during its lifetime"}),"\n",(0,s.jsx)(n.li,{children:"mutable example is a vm where you ssh in and update it, install other things"}),"\n",(0,s.jsx)(n.li,{children:"immutable example is a vm, but you never change it, you delete the vm and create a new vm whole"}),"\n",(0,s.jsx)(n.li,{children:"you ALWAYS know the state"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"why do it?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"adv. deployment methods"}),"\n",(0,s.jsx)(n.li,{children:"easy rollback"}),"\n",(0,s.jsx)(n.li,{children:"more reliable/stable"}),"\n",(0,s.jsx)(n.li,{children:"better security"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"container-and-pod-level-enforcement",children:"Container and Pod level enforcement"}),"\n",(0,s.jsx)(n.p,{children:"how to enforce this?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"remove shells from image"}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"readOnlyRootFilesystem"})}),"\n",(0,s.jsx)(n.li,{children:"runAsNonRoot"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"if you can't control the container?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"try some hacky methods to run commands at Pod startup time to modify the app container on the way up."}),"\n",(0,s.jsx)(n.li,{children:"OR use securityContext"}),"\n",(0,s.jsx)(n.li,{children:"use init container to run commands against a shared vol. with the app to harden."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"scenarios-to-ensure-pods-containers-are-immutable",children:"Scenarios to ensure Pods containers are immutable"}),"\n",(0,s.jsxs)(n.p,{children:["let's use ",(0,s.jsx)(n.code,{children:"startupProbe"})," in a Pod"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: pod\n  name: immutable\nspec:\n  containers:\n  - image: nginx\n    name: pod\n    resources: {}\n    startupProbe:\n      exec:\n        command:\n        - rm\n        - /bin/touch\n      initialDelaySeconds: 5\n      periodSeconds: 5\n  dnsPolicy: ClusterFirst\n  restartPolicy: Always\nstatus: {}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["create it and try to ",(0,s.jsx)(n.code,{children:"touch"})," a file"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"root@immutable:~# touch file\nbash: touch: command not found\nroot@immutable:~# whereis touch\ntouch: /usr/bin/touch\nroot@immutable:~# ls -l /usr/bin/touch\nlrwxrwxrwx 1 root root 10 Sep  2 00:00 /usr/bin/touch -> /bin/touch\nroot@immutable:~# ls -l /bin/touch\nls: cannot access '/bin/touch': No such file or directory\n"})}),"\n",(0,s.jsx)(n.p,{children:"gone burgers."}),"\n",(0,s.jsxs)(n.p,{children:["if you make the command to remove ",(0,s.jsx)(n.code,{children:"/bin/bash"})," then you get no shell into the pod."]}),"\n",(0,s.jsx)(n.h3,{id:"securitycontext",children:"securityContext"}),"\n",(0,s.jsx)(n.p,{children:"read-only file system"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: immutable\n  name: immutable\nspec:\n  containers:\n  - image: httpd\n    name: immutable\n    resources: {}\n    securityContext:\n      readOnlyRootFilesystem: true\n  dnsPolicy: ClusterFirst\n  restartPolicy: Always\nstatus: {}\n"})}),"\n",(0,s.jsx)(n.p,{children:"create and it crashes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"k get pods\nNAME        READY   STATUS             RESTARTS   AGE\napache      1/1     Running            0          6h23m\nimmutable   0/1     CrashLoopBackOff   1          13s\nnginx       1/1     Running            0          24h\n\nk logs immutable\nAH00558: httpd: Could not reliably determine the server's fully qualified domain name, using 10.244.0.11. Set the 'ServerName' directive globally to suppress this message\nAH00558: httpd: Could not reliably determine the server's fully qualified domain name, using 10.244.0.11. Set the 'ServerName' directive globally to suppress this message\n[Thu Sep 09 07:51:18.263916 2021] [core:error] [pid 1:tid 140122618406016] (30)Read-only file system: AH00099: could not create /usr/local/apache2/logs/httpd.pid.jPx4A7\n[Thu Sep 09 07:51:18.263981 2021] [core:error] [pid 1:tid 140122618406016] AH00100: httpd: could not log pid to file /usr/local/apache2/logs/httpd.pid\n"})}),"\n",(0,s.jsxs)(n.p,{children:["we need an ",(0,s.jsx)(n.code,{children:"emptyDir: {}"})," for the logs"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: immutable\n  name: immutable\nspec:\n  containers:\n  - image: httpd\n    name: immutable\n    volumeMounts:\n    - mountPath: /usr/local/apache2/logs\n      name: logs-vol\n    resources: {}\n    securityContext:\n      readOnlyRootFilesystem: true\n  volumes:\n  - name: logs-vol\n    emptyDir: {}\n  dnsPolicy: ClusterFirst\n  restartPolicy: Always\nstatus: {}\n"})}),"\n",(0,s.jsx)(n.p,{children:"re-create it and see it succeed!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"k logs immutable\nAH00558: httpd: Could not reliably determine the server's fully qualified domain name, using 10.244.0.12. Set the 'ServerName' directive globally to suppress this message\nAH00558: httpd: Could not reliably determine the server's fully qualified domain name, using 10.244.0.12. Set the 'ServerName' directive globally to suppress this message\n[Thu Sep 09 07:56:48.809975 2021] [mpm_event:notice] [pid 1:tid 139712294405248] AH00489: Apache/2.4.48 (Unix) configured -- resuming normal operations\n[Thu Sep 09 07:56:48.810092 2021] [core:notice] [pid 1:tid 139712294405248] AH00094: Command line: 'httpd -D FOREGROUND'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["so, logs can write to the volume (you can too if you exec in), but the ROOT filesystem ",(0,s.jsx)(n.code,{children:"/"})," is read-only."]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);