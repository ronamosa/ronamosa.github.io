"use strict";(self.webpackChunkronamosa_github_io=self.webpackChunkronamosa_github_io||[]).push([[2917],{28453:(n,e,s)=>{s.d(e,{R:()=>l,x:()=>d});var o=s(96540);const i={},r=o.createContext(i);function l(n){const e=o.useContext(r);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:l(n.components),o.createElement(r.Provider,{value:e},n.children)}},96510:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>t,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"engineer/LAB/pihole-servfail-unbound","title":"Fixing SERVFAIL DNS Resolution for AWS Console with Pi-hole + Unbound","description":"Diagnosing and fixing SERVFAIL errors when resolving AWS console domains via Pi-hole + Unbound in a Docker setup.","source":"@site/docs/engineer/LAB/pihole-servfail-unbound.md","sourceDirName":"engineer/LAB","slug":"/engineer/LAB/fixing-pihole-unbound-servfail-aws","permalink":"/docs/engineer/LAB/fixing-pihole-unbound-servfail-aws","draft":false,"unlisted":false,"editUrl":"https://github.com/ronamosa/ronamosa.github.io/edit/main/website/docs/engineer/LAB/pihole-servfail-unbound.md","tags":[{"inline":true,"label":"dns","permalink":"/docs/tags/dns"},{"inline":true,"label":"pihole","permalink":"/docs/tags/pihole"},{"inline":true,"label":"unbound","permalink":"/docs/tags/unbound"},{"inline":true,"label":"docker","permalink":"/docs/tags/docker"},{"inline":true,"label":"aws","permalink":"/docs/tags/aws"}],"version":"current","lastUpdatedBy":"Ron Amosa","lastUpdatedAt":1758526302000,"frontMatter":{"slug":"fixing-pihole-unbound-servfail-aws","title":"Fixing SERVFAIL DNS Resolution for AWS Console with Pi-hole + Unbound","authors":"ron","tags":["dns","pihole","unbound","docker","aws"],"description":"Diagnosing and fixing SERVFAIL errors when resolving AWS console domains via Pi-hole + Unbound in a Docker setup.","image":"/img/blog/pihole-unbound.png"},"sidebar":"docsSidebar","previous":{"title":"Pihole Checking for Compromise","permalink":"/docs/engineer/LAB/pihole-compromise"},"next":{"title":"Proxmox: Systems Administration Notes","permalink":"/docs/engineer/LAB/proxmox-sysad"}}');var i=s(74848),r=s(28453);const l={slug:"fixing-pihole-unbound-servfail-aws",title:"Fixing SERVFAIL DNS Resolution for AWS Console with Pi-hole + Unbound",authors:"ron",tags:["dns","pihole","unbound","docker","aws"],description:"Diagnosing and fixing SERVFAIL errors when resolving AWS console domains via Pi-hole + Unbound in a Docker setup.",image:"/img/blog/pihole-unbound.png"},d=void 0,t={},a=[{value:"\ud83d\udd25 The Problem",id:"-the-problem",level:2},{value:"\ud83d\udd0d Root Cause",id:"-root-cause",level:2},{value:"\ud83e\uddea Step-by-Step Diagnosis",id:"-step-by-step-diagnosis",level:2},{value:"\u2705 The Fix (Recommended)",id:"-the-fix-recommended",level:2},{value:"\ud83d\udee0 Edit <code>unbound.conf</code> (or <code>pi-hole.conf</code>)",id:"-edit-unboundconf-or-pi-holeconf",level:3},{value:"\ud83e\uddf0 Optional: Update DNSSEC Trust Anchors (if you want to keep DNSSEC)",id:"-optional-update-dnssec-trust-anchors-if-you-want-to-keep-dnssec",level:2},{value:"\ud83d\udc33 Docker Networking Tips",id:"-docker-networking-tips",level:2},{value:"\ud83e\udde9 Summary",id:"-summary",level:2},{value:"\ud83e\udde0 Final Thoughts",id:"-final-thoughts",level:2}];function c(n){const e={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:["If you're running ",(0,i.jsx)(e.a,{href:"https://pi-hole.net/",children:"Pi-hole"})," with ",(0,i.jsx)(e.a,{href:"https://nlnetlabs.nl/projects/unbound/about/",children:"Unbound"})," in Docker containers and hit a ",(0,i.jsx)(e.code,{children:"SERVFAIL"})," when trying to access the AWS Console, this post is for you."]}),"\n",(0,i.jsxs)(e.p,{children:["I run Pi-hole and Unbound in side-by-side containers using Docker Compose. Recently, DNS lookups to ",(0,i.jsx)(e.code,{children:"console.aws.amazon.com"})," began failing intermittently with a ",(0,i.jsx)(e.code,{children:"SERVFAIL"}),"."]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"-the-problem",children:"\ud83d\udd25 The Problem"}),"\n",(0,i.jsxs)(e.p,{children:["Access to ",(0,i.jsx)(e.code,{children:"console.aws.amazon.com"})," failed, and Pi-hole logs showed:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"query\\[A] console.aws.amazon.com from 172.16.2.35\ncached console.aws.amazon.com is <CNAME />\n...\nforwarded console.aws.amazon.com to 192.168.0.2\nreply error is SERVFAIL\n"})}),"\n",(0,i.jsx)(e.p,{children:"Unbound logs were repetitive and useless at first glance:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"info: generate keytag query \\_ta-4f66-9728. NULL IN\n"})}),"\n",(0,i.jsxs)(e.p,{children:["This pointed to: ",(0,i.jsx)(e.strong,{children:"DNSSEC validation failure"}),", specifically with Unbound\u2019s trust anchor setup."]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"-root-cause",children:"\ud83d\udd0d Root Cause"}),"\n",(0,i.jsxs)(e.p,{children:["Unbound uses DN SSEC by default to validate domain authenticity. AWS domains like ",(0,i.jsx)(e.code,{children:"console.aws.amazon.com"})," involve:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Deep CNAME chains"}),"\n",(0,i.jsx)(e.li,{children:"Regional DNS records"}),"\n",(0,i.jsx)(e.li,{children:"DNSSEC-enabled responses"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["When Unbound\u2019s DNSSEC trust anchor is outdated or misconfigured, it can't verify these chains and returns ",(0,i.jsx)(e.code,{children:"SERVFAIL"}),"."]}),"\n",(0,i.jsx)(e.p,{children:"That log line?"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-text",children:"generate keytag query _ta-4f66-9728. NULL IN\n"})}),"\n",(0,i.jsxs)(e.p,{children:["It means Unbound is repeatedly querying for the DNS trust anchor ",(0,i.jsx)(e.code,{children:"_ta-4f66-9728"}),", likely because:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"The trust anchor expired."}),"\n",(0,i.jsxs)(e.li,{children:["The ",(0,i.jsx)(e.code,{children:"root.key"})," file was never updated."]}),"\n",(0,i.jsxs)(e.li,{children:["Or your container doesn\u2019t run ",(0,i.jsx)(e.code,{children:"unbound-anchor"})," regularly."]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"-step-by-step-diagnosis",children:"\ud83e\uddea Step-by-Step Diagnosis"}),"\n",(0,i.jsx)(e.p,{children:"Here\u2019s how I verified the issue:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"From the host"}),", run:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"dig console.aws.amazon.com @192.168.0.2\n"})}),"\n",(0,i.jsxs)(e.p,{children:["\u2192 ",(0,i.jsx)(e.code,{children:"SERVFAIL"})]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"From inside Unbound container"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"docker exec -it unbound dig console.aws.amazon.com @127.0.0.1\n"})}),"\n",(0,i.jsxs)(e.p,{children:["\u2192 also ",(0,i.jsx)(e.code,{children:"SERVFAIL"})]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Check logs"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"docker logs unbound | grep ta-4f66\n"})}),"\n",(0,i.jsx)(e.p,{children:"\u2192 endless keytag queries = broken DNSSEC validation"}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Temporarily switch Pi-hole to 1.1.1.1 or 8.8.8.8 as upstream"})," \u2192 everything worked again."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"-the-fix-recommended",children:"\u2705 The Fix (Recommended)"}),"\n",(0,i.jsxs)(e.p,{children:["Since DNSSEC isn't critical in my setup and updating trust anchors in Docker regularly is annoying, I ",(0,i.jsx)(e.strong,{children:"disabled DNSSEC"})," in Unbound:"]}),"\n",(0,i.jsxs)(e.h3,{id:"-edit-unboundconf-or-pi-holeconf",children:["\ud83d\udee0 Edit ",(0,i.jsx)(e.code,{children:"unbound.conf"})," (or ",(0,i.jsx)(e.code,{children:"pi-hole.conf"}),")"]}),"\n",(0,i.jsx)(e.p,{children:"Make sure this is in your config:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-conf",children:"server:\n  # ... other config ...\n  dnssec-validation: no\n"})}),"\n",(0,i.jsx)(e.p,{children:"Then restart the container:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"docker restart unbound\n"})}),"\n",(0,i.jsxs)(e.p,{children:["\ud83c\udf89 That\u2019s it. All AWS domains resolve cleanly now, no ",(0,i.jsx)(e.code,{children:"SERVFAIL"}),"."]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"-optional-update-dnssec-trust-anchors-if-you-want-to-keep-dnssec",children:"\ud83e\uddf0 Optional: Update DNSSEC Trust Anchors (if you want to keep DNSSEC)"}),"\n",(0,i.jsx)(e.p,{children:"If you do want to keep DNSSEC on, you\u2019ll need to:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Download a fresh root trust anchor:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"curl -o root.key https://data.iana.org/root-anchors/root-anchors.xml\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["Mount ",(0,i.jsx)(e.code,{children:"root.key"})," into the container:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-yaml",children:"volumes:\n  - ./root.key:/etc/unbound/root.key\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Add to Unbound config:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-conf",children:'trust-anchor-file: "/etc/unbound/root.key"\n'})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Restart Unbound."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.admonition,{title:"Note",type:"caution",children:(0,i.jsxs)(e.p,{children:["You\u2019ll need to update this file regularly unless you automate it with ",(0,i.jsx)(e.code,{children:"unbound-anchor"}),", which is non-trivial in a minimal container setup."]})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"-docker-networking-tips",children:"\ud83d\udc33 Docker Networking Tips"}),"\n",(0,i.jsx)(e.p,{children:"Make sure both containers are on a user-defined Docker network:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"docker network create dns-net\n"})}),"\n",(0,i.jsx)(e.p,{children:"Then update your Compose:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-yaml",children:"services:\n  unbound:\n    container_name: unbound\n    image: mvance/unbound:latest\n    networks:\n      - dns-net\n    ...\n\n  pihole:\n    container_name: pihole\n    image: pihole/pihole:latest\n    networks:\n      - dns-net\n    environment:\n      - PIHOLE_DNS_=unbound#53\n    ...\nnetworks:\n  dns-net:\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Using container names (",(0,i.jsx)(e.code,{children:"unbound#53"}),") avoids needing IPs."]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"-summary",children:"\ud83e\udde9 Summary"}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Symptom"}),(0,i.jsx)(e.th,{children:"Cause"}),(0,i.jsx)(e.th,{children:"Fix"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.code,{children:"SERVFAIL"})," on AWS domains"]}),(0,i.jsx)(e.td,{children:"DNSSEC trust anchor outdated"}),(0,i.jsx)(e.td,{children:"Disable DNSSEC or update trust anchor"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsxs)(e.td,{children:["Endless ",(0,i.jsx)(e.code,{children:"_ta-4f66-9728"})," queries"]}),(0,i.jsx)(e.td,{children:"Root key not valid or missing"}),(0,i.jsxs)(e.td,{children:["Use ",(0,i.jsx)(e.code,{children:"dnssec-validation: no"})," in Unbound"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Works with 1.1.1.1 but not Unbound"}),(0,i.jsx)(e.td,{children:"Confirms internal resolver issue"}),(0,i.jsx)(e.td,{children:"Fix Unbound, not Pi-hole"})]})]})]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"-final-thoughts",children:"\ud83e\udde0 Final Thoughts"}),"\n",(0,i.jsx)(e.p,{children:"If you're running Pi-hole + Unbound in containers, you\u2019re likely doing it for privacy, not full DNSSEC correctness. Disabling DNSSEC is a valid tradeoff unless you're actively auditing DNS trust chains."}),"\n",(0,i.jsx)(e.p,{children:"Pi-hole is powerful, but issues like these can sneak in when upstream resolvers fail quietly and you only see the downstream effect like well-known domains failing to resolve."}),"\n",(0,i.jsx)(e.p,{children:"Anyway, a possible fix if you find yourself in the same situation."}),"\n",(0,i.jsx)(e.admonition,{title:"Disclaimer",type:"caution",children:(0,i.jsx)(e.p,{children:"This document is an AI summary of a troubleshooting session I had with my AI, formatted for blog consumption."})})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}}}]);