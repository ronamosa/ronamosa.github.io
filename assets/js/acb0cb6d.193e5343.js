"use strict";(self.webpackChunkronamosa_github_io=self.webpackChunkronamosa_github_io||[]).push([[5152],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var t=s(96540);const r={},a=t.createContext(r);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(a.Provider,{value:n},e.children)}},44530:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"archive/2020-09-18-EKS-Spot-Instances","title":"EKS with Spot Instances using Terraform","description":"Published Date: 18-SEP-2020","source":"@site/docs/archive/2020-09-18-EKS-Spot-Instances.md","sourceDirName":"archive","slug":"/archive/2020-09-18-EKS-Spot-Instances","permalink":"/docs/archive/2020-09-18-EKS-Spot-Instances","draft":false,"unlisted":false,"editUrl":"https://github.com/ronamosa/ronamosa.github.io/edit/main/website/docs/archive/2020-09-18-EKS-Spot-Instances.md","tags":[],"version":"current","lastUpdatedBy":"Ron Amosa","lastUpdatedAt":1758526302000,"frontMatter":{"title":"EKS with Spot Instances using Terraform"},"sidebar":"docsSidebar","previous":{"title":"Install eksctl tool for AWS Elastic Kubernetes Service (EKS)","permalink":"/docs/archive/2020-04-27-Install-AWS-eksctl"},"next":{"title":"Ubiquiti Home Network: Part.1","permalink":"/docs/archive/2020-11-19-Ubiquiti-Home-Network-Part1"}}');var r=s(74848),a=s(28453);const o={title:"EKS with Spot Instances using Terraform"},i=void 0,c={},l=[{value:"Overview",id:"overview",level:2},{value:"Module: AWS EKS",id:"module-aws-eks",level:2},{value:"locals",id:"locals",level:3},{value:"terraform_remote_state",id:"terraform_remote_state",level:3},{value:"kubernetes provider",id:"kubernetes-provider",level:3},{value:"worker_groups",id:"worker_groups",level:3},{value:"Terraform: Remote State Files",id:"terraform-remote-state-files",level:2},{value:"CLI: aws-cli and kubectl",id:"cli-aws-cli-and-kubectl",level:2},{value:"IAM: minimum permissions",id:"iam-minimum-permissions",level:2},{value:"References",id:"references",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"Published Date: 18-SEP-2020"})}),"\n",(0,r.jsx)(n.p,{children:'The objective of this post is not to get a fully running AWS EKS cluster running with spot instances, but rather the key "pain points" I run into when trying to spin up this infrastructure using Terraform.'}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"I am building:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"1 x AWS EKS cluster"}),"\n",(0,r.jsx)(n.li,{children:"using the AWS official 'eks' module"}),"\n",(0,r.jsx)(n.li,{children:"Spot Instances"}),"\n",(0,r.jsx)(n.li,{children:"2 x Worker Groups (nodes)"}),"\n",(0,r.jsx)(n.li,{children:"Autoscaling Groups"}),"\n",(0,r.jsx)(n.li,{children:"using Terraform 0.12"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"module-aws-eks",children:"Module: AWS EKS"}),"\n",(0,r.jsx)(n.p,{children:"Using the official EKS terraform module by AWS, looks like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'module "eks" {\n  source       = "terraform-aws-modules/eks/aws"\n  version      = "12.2.0"\n  cluster_name = local.cluster_name\n  subnets      = data.terraform_remote_state.vpc.outputs.private_subnets\n\n  tags = {\n    Environment = "prod"\n  }\n\n  vpc_id = data.terraform_remote_state.vpc.outputs.vpc_id\n\n  worker_groups = [\n    {\n      name  = "worker-group-1"\n      instance_type = local.instance_type\n      spot_price = local.spot_price\n      asg_desired_capacity = local.asg_desired_capacity\n      asg_max_size = local.asg_max_size\n      asg_min_size = local.asg_min_size\n      additional_security_group_ids = [aws_security_group.worker_group_mgmt_one.id]\n      additional_userdata = "worker group config"\n      tags = [{\n          key = "worker-group-tag"\n          value = "worker-group-1"\n          propagate_at_launch = true\n      }]\n    },\n    {\n      name  = "worker-group-2"\n      instance_type = local.instance_type\n      spot_price = local.spot_price\n      asg_desired_capacity = local.asg_desired_capacity\n      asg_max_size = local.asg_max_size\n      asg_min_size = local.asg_min_size\n      additional_security_group_ids = [aws_security_group.worker_group_mgmt_two.id]\n      additional_userdata = "worker group config"\n      tags = [{\n          key = "worker-group-tag"\n          value = "worker-group-2"\n          propagate_at_launch = true\n      }]\n    },\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Breaking down what's going on here:"}),"\n",(0,r.jsx)(n.h3,{id:"locals",children:"locals"}),"\n",(0,r.jsxs)(n.p,{children:["I'm using a ",(0,r.jsx)(n.code,{children:"locals"})," block for cluster specific variables"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'locals{\n  cluster_name = "prod-eks-cluster"\n  cluster_enabled_log_types = ["api", "audit", "authenticator", "controllerManager", "scheduler"]\n  asg_desired_capacity = 1\n  asg_max_size = 3\n  asg_min_size = 1\n  instance_type = "m4.large"\n  spot_price = "0.20"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"terraform_remote_state",children:"terraform_remote_state"}),"\n",(0,r.jsxs)(n.p,{children:["I'm using ",(0,r.jsx)(n.code,{children:"terraform_remote_state"})," data source to import the state-file of the VPC I created in another folder"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'data "terraform_remote_state" "vpc" {\n  backend = "s3"\n\n  config = {\n    bucket = "tfstates3"\n    key    = "prod/network/terraform.tfstate"\n    region  = var.region\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"These are the references to the vpc subnets and id"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"subnets      = data.terraform_remote_state.vpc.outputs.private_subnets\nvpc_id = data.terraform_remote_state.vpc.outputs.vpc_id\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Since v0.12 the ",(0,r.jsx)(n.code,{children:".outputs."})," part is what calls whatever is defined in the modules ",(0,r.jsx)(n.code,{children:"outputs.tf"})," file for the resources."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"See more details on this below."})}),"\n",(0,r.jsx)(n.h3,{id:"kubernetes-provider",children:"kubernetes provider"}),"\n",(0,r.jsx)(n.p,{children:"make sure you have these 3 resources:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'data "aws_eks_cluster" "cluster" {\n  name = module.eks.cluster_id\n}\n\ndata "aws_eks_cluster_auth" "cluster" {\n  name = module.eks.cluster_id\n}\n\nprovider "kubernetes" {\n  host                   = data.aws_eks_cluster.cluster.endpoint\n  cluster_ca_certificate = base64decode(data.aws_eks_cluster.cluster.certificate_authority.0.data)\n  token                  = data.aws_eks_cluster_auth.cluster.token\n  load_config_file       = false\n  version                = "~> 1.11"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"otherwise you'll see this error near end of EKS setup"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:'...\nmodule.eks.aws_autoscaling_group.workers[1]: Creation complete after 1m50s [id=prod-eks-cluster-worker-group-220200917111118233900000009]\n\nError: Post "https://prod-bc5a71e2.hcp.australiaeast.azmk8s.io:443/api/v1/namespaces/kube-system/configmaps": dial tcp: lookup prod-bc5a71e2.hcp.australiaeast.azmk8s.io on 127.0.0.53:53: no such host\n\n  on .terraform/modules/eks/aws_auth.tf line 64, in resource "kubernetes_config_map" "aws_auth":\n  64: resource "kubernetes_config_map" "aws_auth" {\n...\n'})}),"\n",(0,r.jsx)(n.h3,{id:"worker_groups",children:"worker_groups"}),"\n",(0,r.jsxs)(n.p,{children:['Self-explanatory, you can define however many "worker groups" you want (I think). In here you will define the autoscaling min, max, desired instances, and instance type (',(0,r.jsx)(n.code,{children:"m4.large"})," is the smallest type you can use with errors), and spot instance bid price (0.20)."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'  worker_groups = [\n    {\n      name  = "worker-group-1"\n      instance_type = local.instance_type\n      spot_price = local.spot_price\n      asg_desired_capacity = local.asg_desired_capacity\n      asg_max_size = local.asg_max_size\n      asg_min_size = local.asg_min_size\n      additional_security_group_ids = [aws_security_group.worker_group_mgmt_one.id]\n      additional_userdata = "worker group config"\n      tags = [{\n          key = "worker-group-tag"\n          value = "worker-group-1"\n          propagate_at_launch = true\n      }]\n    },\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The security groups referenced in ",(0,r.jsx)(n.code,{children:"additional_security_group_ids = [aws_security_group.worker_group_mgmt_one.id]"})," (list), is in another ",(0,r.jsx)(n.code,{children:"security.tf"})," and basically sets up all nodes to open port 22 from specific ",(0,r.jsx)(n.code,{children:"cidr_blocks"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"terraform-remote-state-files",children:"Terraform: Remote State Files"}),"\n",(0,r.jsx)(n.p,{children:'If you have the "best practice" setup of having each component/section of your infrastructure layout in separate folders e.g. eks in one folder, vpc in another -- and they have their own state files, which means they can\'t just reference each other.'}),"\n",(0,r.jsxs)(n.p,{children:["The solution is using ",(0,r.jsx)(n.code,{children:"terraform_remote_state"})," data source."]}),"\n",(0,r.jsx)(n.p,{children:"In your VPC module, your remote state file key looks like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'terraform {\n  backend "s3" {\n    key       = "prod/vpc/terraform.tfstate"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"to use this in another folder which builds your EKS infrastructure, you need this reference:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'data "terraform_remote_state" "vpc" {\n  backend = "s3"\n\n  config = {\n    bucket = "tfstates3"\n    key    = "prod/vpc/terraform.tfstate" # references the VPC statefile \'key\'\n    region = "us-east-2"\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["and now you can call the VPC modules ",(0,r.jsx)(n.code,{children:"outputs"})," like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'module "eks" {\n  source       = "terraform-aws-modules/eks/aws"\n  version      = "12.2.0"\n  cluster_name = local.cluster_name\n  subnets      = data.terraform_remote_state.vpc.outputs.private_subnets\n\n  tags = {\n    Environment = "prod"\n  }\n\n  vpc_id = data.terraform_remote_state.vpc.outputs.vpc_id\n'})}),"\n",(0,r.jsxs)(n.p,{children:["your VPC ",(0,r.jsx)(n.code,{children:"outputs.tf"})," file needs to have the corresponding outputs e.g."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'output "vpc_id" {\n  description = "The ID of the VPC"\n  value       = module.vpc.vpc_id\n}\n\noutput "private_subnets" {\n  description = "List of IDs of private subnets"\n  value       = module.vpc.private_subnets\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"cli-aws-cli-and-kubectl",children:"CLI: aws-cli and kubectl"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"kubectl"})," needs your aws-cli to be able to find the same aws user you used to create the EKS cluster i.e. either your 'default' ",(0,r.jsx)(n.code,{children:"~/.aws/credentials"})," profile is the ",(0,r.jsx)(n.code,{children:"terraform"})," one you used as environment variable credentials to run ",(0,r.jsx)(n.code,{children:"terraform apply"})," OR you just have a default ",(0,r.jsx)(n.code,{children:"[default]"})," block that has the same credentials."]}),"\n",(0,r.jsx)(n.p,{children:"This is the error you see when aws can't find the terraform aws creds"}),"\n",(0,r.jsx)(n.p,{children:"from your terraform outout..."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"Error: Error running command 'aws eks --region us-west-2 update-kubeconfig --name prod-eks-cluster': exit status 255. Output:\nAn error occurred (ResourceNotFoundException) when calling the DescribeCluster operation: No cluster found for name: prod-eks-cluster.\n"})}),"\n",(0,r.jsxs)(n.p,{children:["to trying to update your local kubeconfig file via ",(0,r.jsx)(n.code,{children:"aws"})," command"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:'$ aws eks --region us-west-2 update-kubeconfig --name prod-eks-cluster\nUnable to locate credentials. You can configure credentials by running "aws configure".\n'})}),"\n",(0,r.jsxs)(n.p,{children:["to running kubectl with ",(0,r.jsx)(n.code,{children:"--kubeconfig"})," on the kubeconfig file that was outputted by terraform to make a call to the EKS cluster"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"$ kubectl --kubeconfig ./kubeconfig_prod-eks-cluster get nodes\ncould not get token: NoCredentialProviders: no valid providers in chain. Deprecated.\n  For verbose messaging see aws.Config.CredentialsChainVerboseErrors\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The solution was to add the ",(0,r.jsx)(n.code,{children:"[default]"})," block to ",(0,r.jsx)(n.code,{children:"~/.aws/credentials"})," and voila:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"kubectl --kubeconfig ./kubeconfig_prod-eks-cluster get nodes\nNAME                                       STATUS   ROLES    AGE     VERSION\nip-10-0-1-130.us-east-2.compute.internal   Ready    <none />   4m56s   v1.16.13-eks-2ba888\nip-10-0-3-180.us-east-2.compute.internal   Ready    <none />   4m53s   v1.16.13-eks-2ba888\n"})}),"\n",(0,r.jsxs)(n.p,{children:["and configure ",(0,r.jsx)(n.code,{children:"kubectl"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:" aws eks --region us-east-2 update-kubeconfig --name prod-eks-cluster\nAdded new context arn:aws:eks:us-east-2:000000000000:cluster/prod-eks-cluster to /home/user/.kube/config\n"})}),"\n",(0,r.jsx)(n.p,{children:"run it"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"kubectl get nodes\nNAME                                       STATUS   ROLES    AGE   VERSION\nip-10-0-1-130.us-east-2.compute.internal   Ready    <none />   32m   v1.16.13-eks-2ba888\nip-10-0-3-180.us-east-2.compute.internal   Ready    <none />   32m   v1.16.13-eks-2ba888\n"})}),"\n",(0,r.jsx)(n.h2,{id:"iam-minimum-permissions",children:"IAM: minimum permissions"}),"\n",(0,r.jsxs)(n.p,{children:["When you create a user for ",(0,r.jsx)(n.code,{children:"terraform"})," to be able to create your EKS infrastructure, the bare minimum permissions you need to assign, as a policy, to your user is the following:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "Version": "2012-10-17",\n    "Statement": [\n        {\n            "Sid": "VisualEditor0",\n            "Effect": "Allow",\n            "Action": [\n                "autoscaling:AttachInstances",\n                "autoscaling:CreateAutoScalingGroup",\n                "autoscaling:CreateLaunchConfiguration",\n                "autoscaling:CreateOrUpdateTags",\n                "autoscaling:DeleteAutoScalingGroup",\n                "autoscaling:DeleteLaunchConfiguration",\n                "autoscaling:DeleteTags",\n                "autoscaling:Describe*",\n                "autoscaling:DetachInstances",\n                "autoscaling:SetDesiredCapacity",\n                "autoscaling:UpdateAutoScalingGroup",\n                "autoscaling:SuspendProcesses",\n                "ec2:AllocateAddress",\n                "ec2:AssignPrivateIpAddresses",\n                "ec2:Associate*",\n                "ec2:AttachInternetGateway",\n                "ec2:AttachNetworkInterface",\n                "ec2:AuthorizeSecurityGroupEgress",\n                "ec2:AuthorizeSecurityGroupIngress",\n                "ec2:CreateDefaultSubnet",\n                "ec2:CreateDhcpOptions",\n                "ec2:CreateEgressOnlyInternetGateway",\n                "ec2:CreateInternetGateway",\n                "ec2:CreateNatGateway",\n                "ec2:CreateNetworkInterface",\n                "ec2:CreateRoute",\n                "ec2:CreateRouteTable",\n                "ec2:CreateSecurityGroup",\n                "ec2:CreateSubnet",\n                "ec2:CreateTags",\n                "ec2:CreateVolume",\n                "ec2:CreateVpc",\n                "ec2:DeleteDhcpOptions",\n                "ec2:DeleteEgressOnlyInternetGateway",\n                "ec2:DeleteInternetGateway",\n                "ec2:DeleteNatGateway",\n                "ec2:DeleteNetworkInterface",\n                "ec2:DeleteRoute",\n                "ec2:DeleteRouteTable",\n                "ec2:DeleteSecurityGroup",\n                "ec2:DeleteSubnet",\n                "ec2:DeleteTags",\n                "ec2:DeleteVolume",\n                "ec2:DeleteVpc",\n                "ec2:DeleteVpnGateway",\n                "ec2:Describe*",\n                "ec2:DetachInternetGateway",\n                "ec2:DetachNetworkInterface",\n                "ec2:DetachVolume",\n                "ec2:Disassociate*",\n                "ec2:ModifySubnetAttribute",\n                "ec2:ModifyVpcAttribute",\n                "ec2:ModifyVpcEndpoint",\n                "ec2:ReleaseAddress",\n                "ec2:RevokeSecurityGroupEgress",\n                "ec2:RevokeSecurityGroupIngress",\n                "ec2:UpdateSecurityGroupRuleDescriptionsEgress",\n                "ec2:UpdateSecurityGroupRuleDescriptionsIngress",\n                "ec2:CreateLaunchTemplate",\n                "ec2:CreateLaunchTemplateVersion",\n                "ec2:DeleteLaunchTemplate",\n                "ec2:DeleteLaunchTemplateVersions",\n                "ec2:DescribeLaunchTemplates",\n                "ec2:DescribeLaunchTemplateVersions",\n                "ec2:GetLaunchTemplateData",\n                "ec2:ModifyLaunchTemplate",\n                "ec2:RunInstances",\n                "eks:CreateCluster",\n                "eks:DeleteCluster",\n                "eks:DescribeCluster",\n                "eks:ListClusters",\n                "eks:UpdateClusterConfig",\n                "eks:UpdateClusterVersion",\n                "eks:DescribeUpdate",\n                "eks:TagResource",\n                "eks:UntagResource",\n                "eks:ListTagsForResource",\n                "eks:CreateFargateProfile",\n                "eks:DeleteFargateProfile",\n                "eks:DescribeFargateProfile",\n                "eks:ListFargateProfiles",\n                "eks:CreateNodegroup",\n                "eks:DeleteNodegroup",\n                "eks:DescribeNodegroup",\n                "eks:ListNodegroups",\n                "eks:UpdateNodegroupConfig",\n                "eks:UpdateNodegroupVersion",\n                "iam:AddRoleToInstanceProfile",\n                "iam:AttachRolePolicy",\n                "iam:CreateInstanceProfile",\n                "iam:CreateOpenIDConnectProvider",\n                "iam:CreateServiceLinkedRole",\n                "iam:CreatePolicy",\n                "iam:CreatePolicyVersion",\n                "iam:CreateRole",\n                "iam:DeleteInstanceProfile",\n                "iam:DeleteOpenIDConnectProvider",\n                "iam:DeletePolicy",\n                "iam:DeleteRole",\n                "iam:DeleteRolePolicy",\n                "iam:DeleteServiceLinkedRole",\n                "iam:DetachRolePolicy",\n                "iam:GetInstanceProfile",\n                "iam:GetOpenIDConnectProvider",\n                "iam:GetPolicy",\n                "iam:GetPolicyVersion",\n                "iam:GetRole",\n                "iam:GetRolePolicy",\n                "iam:List*",\n                "iam:PassRole",\n                "iam:PutRolePolicy",\n                "iam:RemoveRoleFromInstanceProfile",\n                "iam:TagRole",\n                "iam:UntagRole",\n                "iam:UpdateAssumeRolePolicy",\n                // Following permissions are needed if cluster_enabled_log_types is enabled\n                "logs:CreateLogGroup",\n                "logs:DescribeLogGroups",\n                "logs:DeleteLogGroup",\n                "logs:ListTagsLogGroup",\n                "logs:PutRetentionPolicy",\n                // Following permissions for working with secrets_encryption example\n                "kms:CreateGrant",\n                "kms:CreateKey",\n                "kms:DescribeKey",\n                "kms:GetKeyPolicy",\n                "kms:GetKeyRotationStatus",\n                "kms:ListResourceTags",\n                "kms:ScheduleKeyDeletion"\n            ],\n            "Resource": "*"\n        }\n    ]\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"As long as your AWS user has this policy attached, it will be able to create all the resources EKS requires."}),"\n",(0,r.jsx)(n.p,{children:"That's it for now, I'll update this if I come across any more pain points."}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/terraform-aws-modules/terraform-aws-eks/blob/master/docs/iam-permissions.md",children:"https://github.com/terraform-aws-modules/terraform-aws-eks/blob/master/docs/iam-permissions.md"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);