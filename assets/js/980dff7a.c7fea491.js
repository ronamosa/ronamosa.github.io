"use strict";(self.webpackChunkronamosa_github_io=self.webpackChunkronamosa_github_io||[]).push([[8312],{28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>o});var r=s(96540);const t={},i=r.createContext(t);function c(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),r.createElement(i.Provider,{value:n},e.children)}},3e4:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"study/CKS/Cluster Setup/ClusterSecureIngress","title":"Secure Ingress","description":"Ingress","source":"@site/docs/study/CKS/1. Cluster Setup/ClusterSecureIngress.md","sourceDirName":"study/CKS/1. Cluster Setup","slug":"/study/CKS/Cluster Setup/ClusterSecureIngress","permalink":"/docs/study/CKS/Cluster Setup/ClusterSecureIngress","draft":false,"unlisted":false,"editUrl":"https://github.com/ronamosa/ronamosa.github.io/edit/main/website/docs/study/CKS/1. Cluster Setup/ClusterSecureIngress.md","tags":[],"version":"current","lastUpdatedBy":"Ron Amosa","lastUpdatedAt":1758526302000,"frontMatter":{"title":"Secure Ingress"},"sidebar":"docsSidebar","previous":{"title":"Node Metadata","permalink":"/docs/study/CKS/Cluster Setup/ClusterNodeMetatdata"},"next":{"title":"Role Based Access Control (RBAC)","permalink":"/docs/study/CKS/Cluster Hardening/HardenRBAC"}}');var t=s(74848),i=s(28453);const c={title:"Secure Ingress"},o=void 0,a={},l=[{value:"Ingress",id:"ingress",level:2},{value:"Services",id:"services",level:2},{value:"Create an Ingress",id:"create-an-ingress",level:2},{value:"Install NGINX Ingress",id:"install-nginx-ingress",level:3},{value:"Secure the Ingress",id:"secure-the-ingress",level:2},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"ingress",children:"Ingress"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Usually an nginx pod Ingress"}),"\n",(0,t.jsx)(n.li,{children:"We just create YAML, Ingress and NGINX config is created with it, we don't touch it."}),"\n",(0,t.jsx)(n.li,{children:"Service always points to Pods (via labels) - not deployments, daemonSets - always Pods."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"services",children:"Services"}),"\n",(0,t.jsx)(n.p,{children:"There are 3 x types of services, they all work like each other:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"clusterIP"})," - internal points to Pod"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"nodePort"})," - opens port on a Node, works like a ",(0,t.jsx)(n.code,{children:"clusterIP"})," (theoretically because a NodePort makes a clusterIP reachable from the outside), there's only NodePort service there, but think of it like a clusterIP (i.e. points to a Pod)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"LoadBalancer"})," - creates NodePort --\x3e ClusterIP --\x3e points to Pod/NGINX"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"create-an-ingress",children:"Create an Ingress"}),"\n",(0,t.jsx)(n.p,{children:"Scenario:"}),"\n",(0,t.jsxs)(n.p,{children:["request --\x3e ",(0,t.jsx)(n.code,{children:"NodePort"})," --\x3e ",(0,t.jsx)(n.code,{children:"NGINX Ingress"}),"\n",(0,t.jsx)(n.code,{children:"NGINX Ingress"})," --\x3e /service1: ",(0,t.jsx)(n.code,{children:"ClusterIP"})," --\x3e ",(0,t.jsx)(n.code,{children:"Pod1"}),"\n",(0,t.jsx)(n.code,{children:"NGINX Ingress"})," --\x3e /service2: ",(0,t.jsx)(n.code,{children:"ClusterIP"})," --\x3e ",(0,t.jsx)(n.code,{children:"Pod2"})]}),"\n",(0,t.jsx)(n.h3,{id:"install-nginx-ingress",children:"Install NGINX Ingress"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.40.2/deploy/static/provider/baremetal/deploy.yaml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"root@cks-master:~# kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.40.2/deploy/static/provider/baremetal/deploy.yaml\nnamespace/ingress-nginx created\nserviceaccount/ingress-nginx created\nconfigmap/ingress-nginx-controller created\nclusterrole.rbac.authorization.k8s.io/ingress-nginx created\nclusterrolebinding.rbac.authorization.k8s.io/ingress-nginx created\nrole.rbac.authorization.k8s.io/ingress-nginx created\nrolebinding.rbac.authorization.k8s.io/ingress-nginx created\nservice/ingress-nginx-controller-admission created\nservice/ingress-nginx-controller created\ndeployment.apps/ingress-nginx-controller created\nvalidatingwebhookconfiguration.admissionregistration.k8s.io/ingress-nginx-admission created\nserviceaccount/ingress-nginx-admission created\nclusterrole.rbac.authorization.k8s.io/ingress-nginx-admission created\nclusterrolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created\nrole.rbac.authorization.k8s.io/ingress-nginx-admission created\nrolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created\njob.batch/ingress-nginx-admission-create created\njob.batch/ingress-nginx-admission-patch created\n"})}),"\n",(0,t.jsx)(n.p,{children:"check new ingress pods,svc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"root@cks-master:~# k -n ingress-nginx get pods,svc\nNAME                                            READY   STATUS      RESTARTS   AGE\npod/ingress-nginx-admission-create-8fsvv        0/1     Completed   0          57s\npod/ingress-nginx-admission-patch-wdvrk         0/1     Completed   2          57s\npod/ingress-nginx-controller-655cc55649-5rnxl   1/1     Running     0          57s\n\nNAME                                         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE\nservice/ingress-nginx-controller             NodePort    10.105.163.30    <none />        80:32677/TCP,443:31926/TCP   57s\nservice/ingress-nginx-controller-admission   ClusterIP   10.107.227.109   <none />        443/TCP                      57s\n"})}),"\n",(0,t.jsxs)(n.p,{children:["get worker external IP address from GCP: ",(0,t.jsx)(n.code,{children:"gcloud compute instances describe cks-worker"})]}),"\n",(0,t.jsx)(n.p,{children:"curl the external IP + http NodePort"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ curl http://35.244.67.113:32677\n<html />\n<head /><title />404 Not Found</title></head>\n<body />\n<center /><h1 />404 Not Found</h1></center>\n<hr /><center />nginx</center>\n</body>\n</html>\n"})}),"\n",(0,t.jsx)(n.p,{children:"now we want a service1 and service2 config for nginx"}),"\n",(0,t.jsxs)(n.p,{children:["example from ",(0,t.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/services-networking/ingress/#examples",children:"kubernetes.io/ingress"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: minimal-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\nspec:\n  rules:\n  - http:\n      paths:\n      - path: /testpath\n        pathType: Prefix\n        backend:\n          service:\n            name: test\n            port:\n              number: 80\n"})}),"\n",(0,t.jsx)(n.p,{children:"edit for service1, service2"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: secure-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\nspec:\n  rules:\n  - http:\n      paths:\n      - path: /service1\n        pathType: Prefix\n        backend:\n          service:\n            name: service1\n            port:\n              number: 80\n\n      - path: /service2\n        pathType: Prefix\n        backend:\n          service:\n            name: service2\n            port:\n              number: 80\n"})}),"\n",(0,t.jsx)(n.p,{children:"check"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"root@cks-master:~# k create -f ingress.yaml\ningress.networking.k8s.io/secure-ingress created\nroot@cks-master:~# k get ing\nNAME             CLASS    HOSTS   ADDRESS   PORTS   AGE\nsecure-ingress   <none />   *                 80      9s\n"})}),"\n",(0,t.jsx)(n.p,{children:"now create our pods for the services, and expose them"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"root@cks-master:~# k run pod1 --image=nginx\npod/pod1 created\nroot@cks-master:~# k run pod2 --image=httpd\npod/pod2 created\nroot@cks-master:~# k expose pod pod1 --port 80 --name service1\nservice/service1 exposed\nroot@cks-master:~# k expose pod pod2 --port 80 --name service2\nservice/service2 exposed\n"})}),"\n",(0,t.jsx)(n.p,{children:"note: make sure your default-deny network policies are removed from previous sessions."}),"\n",(0,t.jsx)(n.p,{children:"checking with curl service1 (nginx)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl http://35.244.67.113:32677/service1\n<!DOCTYPE html>\n<html />\n<head />\n<title />Welcome to nginx!</title>\n<style />\n    body {\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n    }\n</style>\n</head>\n<body />\n<h1 />Welcome to nginx!</h1>\n<p />If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p />For online documentation and support please refer to\n<a href="http://nginx.org/" />nginx.org</a>.<br/>\nCommercial support is available at\n<a href="http://nginx.com/" />nginx.com</a>.</p>\n\n<p /><em />Thank you for using nginx.</em></p>\n</body>\n</html>\n'})}),"\n",(0,t.jsx)(n.p,{children:"service2 (httpd)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl http://35.244.67.113:32677/service2\n<html /><body /><h1 />It works!</h1></body></html>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"secure-the-ingress",children:"Secure the Ingress"}),"\n",(0,t.jsx)(n.p,{children:"securing it over HTTPS into the NodePort"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl https://35.244.67.113:31926\ncurl: (60) SSL certificate problem: unable to get local issuer certificate\nMore details here: https://curl.haxx.se/docs/sslcerts.html\n\ncurl failed to verify the legitimacy of the server and therefore could not\nestablish a secure connection to it. To learn more about this situation and\nhow to fix it, please visit the web page mentioned above.\n"})}),"\n",(0,t.jsxs)(n.p,{children:["use ",(0,t.jsx)(n.code,{children:"-k"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl -k https://35.244.67.113:31926\n<html />\n<head /><title />404 Not Found</title></head>\n<body />\n<center /><h1 />404 Not Found</h1></center>\n<hr /><center />nginx</center>\n</body>\n</html>\n\ncurl -k https://35.244.67.113:31926/service2\n<html /><body /><h1 />It works!</h1></body></html>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["seems to be working! check out ",(0,t.jsx)(n.code,{children:"-kv"})," for more details"]}),"\n",(0,t.jsx)(n.p,{children:"it's using a fake k8s cert"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl -vk https://35.244.67.113:31926/service2\n*   Trying 35.244.67.113:31926...\n* TCP_NODELAY set\n* Connected to 35.244.67.113 (35.244.67.113) port 31926 (#0)\n* ALPN, offering h2\n* ALPN, offering http/1.1\n* successfully set certificate verify locations:\n*   CAfile: /etc/ssl/certs/ca-certificates.crt\n  CApath: /etc/ssl/certs\n* TLSv1.3 (OUT), TLS handshake, Client hello (1):\n* TLSv1.3 (IN), TLS handshake, Server hello (2):\n* TLSv1.3 (IN), TLS handshake, Encrypted Extensions (8):\n* TLSv1.3 (IN), TLS handshake, Certificate (11):\n* TLSv1.3 (IN), TLS handshake, CERT verify (15):\n* TLSv1.3 (IN), TLS handshake, Finished (20):\n* TLSv1.3 (OUT), TLS change cipher, Change cipher spec (1):\n* TLSv1.3 (OUT), TLS handshake, Finished (20):\n* SSL connection using TLSv1.3 / TLS_AES_256_GCM_SHA384\n* ALPN, server accepted to use h2\n* Server certificate:\n*  subject: O=Acme Co; CN=Kubernetes Ingress Controller Fake Certificate\n*  start date: Aug 30 05:37:36 2021 GMT\n*  expire date: Aug 30 05:37:36 2022 GMT\n*  issuer: O=Acme Co; CN=Kubernetes Ingress Controller Fake Certificate\n*  SSL certificate verify result: unable to get local issuer certificate (20), continuing anyway.\n* Using HTTP2, server supports multi-use\n* Connection state changed (HTTP/2 confirmed)\n* Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0\n* Using Stream ID: 1 (easy handle 0x5623a3f6bd40)\n> GET /service2 HTTP/2\n> Host: 35.244.67.113:31926\n> user-agent: curl/7.68.0\n> accept: */*\n>\n* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):\n* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):\n* old SSL session ID is stale, removing\n* Connection state changed (MAX_CONCURRENT_STREAMS == 128)!\n< HTTP/2 200\n< date: Mon, 30 Aug 2021 06:08:43 GMT\n< content-type: text/html\n< content-length: 45\n< last-modified: Mon, 11 Jun 2007 18:53:14 GMT\n< etag: "2d-432a5e4a73a80"\n< accept-ranges: bytes\n< strict-transport-security: max-age=15724800; includeSubDomains\n<\n<html /><body /><h1 />It works!</h1></body></html>\n* Connection #0 to host 35.244.67.113 left intact\n'})}),"\n",(0,t.jsx)(n.p,{children:"fake ingress cert"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"* Server certificate:\n*  subject: O=Acme Co; CN=Kubernetes Ingress Controller Fake Certificate\n"})}),"\n",(0,t.jsxs)(n.p,{children:["let's create our own ",(0,t.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/services-networking/ingress/#tls",children:"TLS"})," cert, where we need to"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"create our certs"}),"\n",(0,t.jsx)(n.li,{children:"store it in secrets"}),"\n",(0,t.jsx)(n.li,{children:"extend our Ingress config to use https & which secret holds the certs"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["create cert: ",(0,t.jsx)(n.code,{children:"openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes"})," (Common Name (e.g. server FQDN or YOUR name) []",":secure-ingress",".com)"]}),"\n",(0,t.jsx)(n.p,{children:"create secret:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"k create secret tls secure-ingress --cert=./cert.pem --key=./key.pem\nsecret/secure-ingress created\n"})}),"\n",(0,t.jsx)(n.p,{children:"extend Ingress:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: secure-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\nspec:\n  tls:\n  - hosts:\n      - secure-ingress.com\n    secretName: secure-ingress\n  rules:\n  - http:\n      paths:\n      - path: /service1\n        pathType: Prefix\n        backend:\n          service:\n            name: service1\n            port:\n              number: 80\n\n      - path: /service2\n        pathType: Prefix\n        backend:\n          service:\n            name: service2\n            port:\n              number: 80\n"})}),"\n",(0,t.jsxs)(n.p,{children:["test config -- remember, our services are now under the ",(0,t.jsx)(n.code,{children:"secure-ingress.com"})," host, as per our Ingress config, but also that domain doesn't exist -- so we call the URL as that domain, BUT we resolve the hostname ourselves using ",(0,t.jsx)(n.code,{children:"--resolve"})," to point to the IP",":port"," we have setup for our ",(0,t.jsx)(n.code,{children:"cks-worker"})," node:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl -vk https://secure-ingress.com:31926/service2 --resolve secure-ingress.com:31926:35.244.67.113\n\n* Added secure-ingress.com:31926:35.244.67.113 to DNS cache\n* Hostname secure-ingress.com was found in DNS cache\n*   Trying 35.244.67.113:31926...\n* TCP_NODELAY set\n* Connected to secure-ingress.com (35.244.67.113) port 31926 (#0)\n* ALPN, offering h2\n* ALPN, offering http/1.1\n* successfully set certificate verify locations:\n*   CAfile: /etc/ssl/certs/ca-certificates.crt\n  CApath: /etc/ssl/certs\n* TLSv1.3 (OUT), TLS handshake, Client hello (1):\n* TLSv1.3 (IN), TLS handshake, Server hello (2):\n* TLSv1.3 (IN), TLS handshake, Encrypted Extensions (8):\n* TLSv1.3 (IN), TLS handshake, Certificate (11):\n* TLSv1.3 (IN), TLS handshake, CERT verify (15):\n* TLSv1.3 (IN), TLS handshake, Finished (20):\n* TLSv1.3 (OUT), TLS change cipher, Change cipher spec (1):\n* TLSv1.3 (OUT), TLS handshake, Finished (20):\n* SSL connection using TLSv1.3 / TLS_AES_256_GCM_SHA384\n* ALPN, server accepted to use h2\n* Server certificate:\n*  subject: C=NZ; ST=Some-State; O=Internet Widgits Pty Ltd; CN=secure-ingress.com\n*  start date: Aug 30 06:14:33 2021 GMT\n*  expire date: Aug 30 06:14:33 2022 GMT\n*  issuer: C=NZ; ST=Some-State; O=Internet Widgits Pty Ltd; CN=secure-ingress.com\n*  SSL certificate verify result: self signed certificate (18), continuing anyway.\n* Using HTTP2, server supports multi-use\n* Connection state changed (HTTP/2 confirmed)\n* Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0\n* Using Stream ID: 1 (easy handle 0x560ae97fbd40)\n> GET /service2 HTTP/2\n> Host: secure-ingress.com:31926\n> user-agent: curl/7.68.0\n> accept: */*\n>\n* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):\n* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):\n* old SSL session ID is stale, removing\n* Connection state changed (MAX_CONCURRENT_STREAMS == 128)!\n< HTTP/2 200\n< date: Mon, 30 Aug 2021 06:21:57 GMT\n< content-type: text/html\n< content-length: 45\n< last-modified: Mon, 11 Jun 2007 18:53:14 GMT\n< etag: "2d-432a5e4a73a80"\n< accept-ranges: bytes\n< strict-transport-security: max-age=15724800; includeSubDomains\n<\n<html /><body /><h1 />It works!</h1></body></html>\n* Connection #0 to host secure-ingress.com left intact\n'})}),"\n",(0,t.jsx)(n.p,{children:"notice the TLS certificate section"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"* Server certificate:\n*  subject: C=NZ; ST=Some-State; O=Internet Widgits Pty Ltd; CN=secure-ingress.com\n*  start date: Aug 30 06:14:33 2021 GMT\n*  expire date: Aug 30 06:14:33 2022 GMT\n*  issuer: C=NZ; ST=Some-State; O=Internet Widgits Pty Ltd; CN=secure-ingress.com\n*  SSL certificate verify result: self signed certificate (18), continuing anyway.\n"})}),"\n",(0,t.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/services-networking/ingress/#tls",children:"K8s Secure Ingress with TLS"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/services-networking/ingress",children:"K8s Ingress Documentation"})}),"\n"]})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);