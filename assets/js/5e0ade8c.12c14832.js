"use strict";(self.webpackChunkronamosa_github_io=self.webpackChunkronamosa_github_io||[]).push([[3238],{28453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>c});var t=n(96540);const s={},i=t.createContext(s);function o(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:r},e.children)}},83682:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"archive/2017-10-13-Docker_Private_Registry_v2.0","title":"Docker Private Registry 2.0","description":"Quick Notes on setting up Docker Private Registry with TLS (secure), shout out to bobcares.com as I\'m basically cannibalizing their notes with my edits because they\'ve already written out some great notes, just tailoring it to my own situation.","source":"@site/docs/archive/2017-10-13-Docker_Private_Registry_v2.0.md","sourceDirName":"archive","slug":"/archive/2017-10-13-Docker_Private_Registry_v2.0","permalink":"/docs/archive/2017-10-13-Docker_Private_Registry_v2.0","draft":false,"unlisted":false,"editUrl":"https://github.com/ronamosa/ronamosa.github.io/edit/main/website/docs/archive/2017-10-13-Docker_Private_Registry_v2.0.md","tags":[],"version":"current","lastUpdatedBy":"Ron Amosa","lastUpdatedAt":1758526302000,"frontMatter":{"title":"Docker Private Registry 2.0"},"sidebar":"docsSidebar","previous":{"title":"Reset Windows10 VMWare Guest Password.","permalink":"/docs/archive/2017-09-14-Reset_Win10_Passwd_Vmware_Guest"},"next":{"title":"NGINX on CentOS 7 with SELinux issues","permalink":"/docs/archive/2017-10-20-NGINX-Centos7-SELinux"}}');var s=n(74848),i=n(28453);const o={title:"Docker Private Registry 2.0"},c=void 0,a={},d=[{value:"Generate SSL via container",id:"generate-ssl-via-container",level:3},{value:"Native Basic Auth",id:"native-basic-auth",level:3},{value:"Add new Certificate Authority (CA)",id:"add-new-certificate-authority-ca",level:3},{value:"Registry &#39;config.yml&#39;",id:"registry-configyml",level:3},{value:"Docker compose your image with SSL",id:"docker-compose-your-image-with-ssl",level:3},{value:"Run docker-compose",id:"run-docker-compose",level:3},{value:"logging in",id:"logging-in",level:4},{value:"pull",id:"pull",level:4},{value:"tag",id:"tag",level:4},{value:"push",id:"push",level:4},{value:"Troubleshooting",id:"troubleshooting",level:3},{value:"Proxy Matters",id:"proxy-matters",level:4},{value:"Error generating ssl",id:"error-generating-ssl",level:4},{value:"Expired ca.crt",id:"expired-cacrt",level:4},{value:"docker login failed - bad certificate",id:"docker-login-failed---bad-certificate",level:4}];function l(e){const r={a:"a",admonition:"admonition",code:"code",em:"em",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["Quick Notes on setting up Docker Private Registry with TLS (secure), shout out to ",(0,s.jsx)(r.a,{href:"https://bobcares.com/blog/docker-private-repository/",children:"bobcares.com"})," as I'm basically cannibalizing their notes with my edits because they've already written out some great notes, just tailoring it to my own situation."]}),"\n",(0,s.jsx)(r.h3,{id:"generate-ssl-via-container",children:"Generate SSL via container"}),"\n",(0,s.jsx)(r.p,{children:"create working directories:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"mkdir -p /opt/registry/{auth,data,ssl,config}\n"})}),"\n",(0,s.jsx)(r.p,{children:"(optional) if you have selinux running, you need to change permissions on your registry directory"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"chcon -Rt svirt_sandbox_file_t <registry_dir />\n"})}),"\n",(0,s.jsx)(r.p,{children:"replace the 'SSL_SUBJECT' with your own and run this command to generate your SSL files"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"docker run --rm -v /opt/registry/ssl:/certs -e SSL_SUBJECT=registry.docker-repo.net paulczar/omgwtfssl\n"})}),"\n",(0,s.jsx)(r.h3,{id:"native-basic-auth",children:"Native Basic Auth"}),"\n",(0,s.jsxs)(r.p,{children:["from /registry/ dir:\n",(0,s.jsx)(r.code,{children:"docker run --entrypoint htpasswd registry:2 -Bbn usertest userpasswd > auth/htpasswd"})]}),"\n",(0,s.jsx)(r.h3,{id:"add-new-certificate-authority-ca",children:"Add new Certificate Authority (CA)"}),"\n",(0,s.jsx)(r.p,{children:"your registry clients need to recognize the CA when it connects to the registry so you need to install that CA on your client machines.\ne.g."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"[root@registry]$ scp /var/opt/registry/ssl/ca.pem user@other-host:~/\n[user@other-host]$ mkdir -p /etc/docker/cert.d/registry:5000/\n[user@other-host]$ cp ca.pem /etc/docker/cert.d/registry:5000/\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Install the ca-certificates package: ",(0,s.jsx)(r.code,{children:"yum install ca-certificates"}),"\nEnable the dynamic CA configuration feature: ",(0,s.jsx)(r.code,{children:"update-ca-trust force-enable"}),"\nretart docker ",(0,s.jsx)(r.code,{children:"systemctl restart docker"})]}),"\n",(0,s.jsx)(r.h3,{id:"registry-configyml",children:"Registry 'config.yml'"}),"\n",(0,s.jsx)(r.p,{children:"needed to configure registry within the container:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-yaml",children:"version: 0.1\nlog:\n  fields:\n    service: registry\nstorage:\n  delete:\n    enabled: true\n  cache:\n    blobdescriptor: inmemory\n  filesystem:\n    rootdirectory: /var/lib/registry\nhttp:\n  addr: :5000\n  headers:\n    X-Content-Type-Options: [nosniff]\n    Access-Control-Allow-Origin: ['http://dockeregistry.darksyde']\n    Access-Control-Allow-Methods: ['HEAD', 'GET', 'OPTIONS', 'DELETE']\n    Access-Control-Allow-Headers: ['Authorization,Credentials']\n    Access-Control-Max-Age: [1728000]\n    Access-Control-Allow-Credentials: [true]\n    Access-Control-Expose-Headers: ['Docker-Content-Digest']\nauth:\n  htpasswd:\n    realm: basic-realm\n    path: /auth/htpasswd\nhealth:\n  storagedriver:\n    enabled: true\n    interval: 10s\n    threshold: 3\n\n"})}),"\n",(0,s.jsx)(r.h3,{id:"docker-compose-your-image-with-ssl",children:"Docker compose your image with SSL"}),"\n",(0,s.jsx)(r.p,{children:"docker-compose file for the cert generating image:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-yaml",children:"# docker trusted registry (private) compose\n\nregistry:\n  restart: always\n  image: registry:2\n  container_name: registry2\n  ports:\n    - 5000:5000\n  environment:\n    REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /var/opt/registry/data\n    REGISTRY_HTTP_TLS_CERTIFICATE: /var/opt/registry/ssl/cert.pem\n    REGISTRY_HTTP_TLS_KEY: /var/opt/registry/ssl/key.pem\n    REGISTRY_AUTH: htpasswd\n    REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd\n    REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm\n  volumes:\n    - /var/opt/registry:/var/opt/registry\n    - /var/opt/registry/auth:/auth\n    - /var/opt/registry/config/config.yml:/etc/docker/registry/config.yml\n"})}),"\n",(0,s.jsx)(r.h3,{id:"run-docker-compose",children:"Run docker-compose"}),"\n",(0,s.jsx)(r.p,{children:"if all the files are in place and the CA is installed on all client hosts, you should be able to run:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"[root@registry /var/opt/registry ]$ docker-compose up -d\n"})}),"\n",(0,s.jsx)(r.p,{children:"check our registry container is running:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:'[root@dockeregistry registry]# docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\na60a47bcad92        registry:2          "/entrypoint.sh /etc/"   26 minutes ago      Up 1 seconds        0.0.0.0:5000->5000/tcp   registry2\n'})}),"\n",(0,s.jsx)(r.p,{children:"from a client host (i.e. a host that needs to talk to the registry and has the CA added to it) try"}),"\n",(0,s.jsx)(r.h4,{id:"logging-in",children:"logging in"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"[root@docker certs.d]# docker login http://dockeregistry.darksyde.net:5000\nUsername (usertest):\nPassword:\nLogin Succeeded\n"})}),"\n",(0,s.jsx)(r.p,{children:"now try and pull an image, tag it with our private registry and push it"}),"\n",(0,s.jsx)(r.h4,{id:"pull",children:"pull"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"[root@docker ~]# docker pull ubuntu:16.04\nTrying to pull repository docker.io/library/ubuntu ...\n16.04: Pulling from docker.io/library/ubuntu\nae79f2514705: Pull complete\n5ad56d5fc149: Pull complete\n170e558760e8: Pull complete\n395460e233f5: Pull complete\n6f01dc62e444: Pull complete\nDigest: sha256:506e2d5852de1d7c90d538c5332bd3cc33b9cbd26f6ca653875899c505c82687\n"})}),"\n",(0,s.jsx)(r.h4,{id:"tag",children:"tag"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"[root@docker ~]# docker tag ubuntu:16.04 dockeregistry.darksyde.net:5000/myubuntu\n"})}),"\n",(0,s.jsx)(r.h4,{id:"push",children:"push"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"[root@docker ~]# docker push dockeregistry.darksyde.net:5000/myubuntu\nThe push refers to a repository [dockeregistry.darksyde.net:5000/myubuntu]\n49907af65b0a: Pushed\n4589f96366e6: Pushed\nb97229212d30: Pushed\ncd181336f142: Pushed\n0f5ff0cf6a1c: Pushing [=========================================>         ] 101.9 MB/122 MB\n...\nlatest: digest: sha256:550f6e26da4b4cb8655a96dd6458ea01e2fb3dcb99d24e6dc427c08ea42c9785 size: 1357\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.em,{children:"SUCCESS!"})})}),"\n",(0,s.jsx)(r.h3,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(r.h4,{id:"proxy-matters",children:"Proxy Matters"}),"\n",(0,s.jsxs)(r.p,{children:["if you're behind a proxy ",(0,s.jsx)(r.code,{children:"vim /etc/sysconfig/docker"})," and add your proxy settings for docker if there's no internet connection from the box"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"# PROXY\nHTTP_PROXY='http://proxy.darksyde.net:80'\nHTTPS_PROXY='http://proxy.darksyde.net:80'\nNO_PROXY='dockeregistry.darksyde.net'\n"})}),"\n",(0,s.jsx)(r.p,{children:"note: if you dont specify the 'no_proxy' you wont be able to push to your private registry because the request gets routed through the HTTP_PROXY."}),"\n",(0,s.jsx)(r.h4,{id:"error-generating-ssl",children:"Error generating ssl"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-log",children:"Digest: sha256:486c1ebae77f9d8b39ab1943fcf98d91f9c48610c9e471010a1ea53df47713ee\n----------------------------\n| OMGWTFSSL Cert Generator |\n----------------------------\n\n--\x3e Certificate Authority\n====> Generating new CA key ca-key.pem\nca-key.pem: Permission denied\n139662982777740:error:0200100D:system library:fopen:Permission denied:bss_file.c:402:fopen('ca-key.pem','w')\n139662982777740:error:20074002:BIO routines:FILE_CTRL:system lib:bss_file.c:404:\n====> Generating new CA Certificate ca.pem\nError opening Private Key ca-key.pem\n139862407768972:error:02001002:system library:fopen:No such file or directory:bss_file.c:402:fopen('ca-key.pem','r')\n139862407768972:error:20074002:BIO routines:FILE_CTRL:system lib:bss_file.c:404:\nunable to load Private Key\n"})}),"\n",(0,s.jsx)(r.p,{children:"check SELINUX"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"ausearch -m avc -ts today | audit2allow"})}),"\n",(0,s.jsx)(r.p,{children:"set rule to allow,"}),"\n",(0,s.jsx)(r.p,{children:"before :"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"[root@dockeregistry opt]# ls -ltrZ registry/\ndrwxr-xr-x. root root unconfined_u:object_r:var_t:s0   ssl\ndrwxr-xr-x. root root unconfined_u:object_r:var_t:s0   data\ndrwxr-xr-x. root root unconfined_u:object_r:var_t:s0   config\n"})}),"\n",(0,s.jsx)(r.p,{children:"run command on your 'registry' folder (or where the docker image is going to write to host filesystem)"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"[root@dockeregistry opt]# chcon -Rt svirt_sandbox_file_t registry/\n"})}),"\n",(0,s.jsx)(r.p,{children:"after :"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"[root@dockeregistry opt]# ls -ltrZ registry\ndrwxr-xr-x. root root unconfined_u:object_r:svirt_sandbox_file_t:s0 ssl\ndrwxr-xr-x. root root unconfined_u:object_r:svirt_sandbox_file_t:s0 data\ndrwxr-xr-x. root root unconfined_u:object_r:svirt_sandbox_file_t:s0 config\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"SUCCESS:"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-log",children:"----------------------------\n| OMGWTFSSL Cert Generator |\n----------------------------\n\n--\x3e Certificate Authority\n====> Generating new CA key ca-key.pem\nGenerating RSA private key, 2048 bit long modulus\n...........+++\n..................................+++\ne is 65537 (0x10001)\n====> Generating new CA Certificate ca.pem\n====> Generating new config file openssl.cnf\n====> Generating new SSL KEY key.pem\nGenerating RSA private key, 2048 bit long modulus\n.................................................................+++\n..............................................................................................................................................+++\ne is 65537 (0x10001)\n====> Generating new SSL CSR key.csr\n====> Generating new SSL CERT cert.pem\nSignature ok\nsubject=/CN=dockeregistry.darksyde.net\nGetting CA Private Key\n====> Complete\nkeys can be found in volume mapped to /certs\n\n====> Output results as YAML\n...\n...\n...\n\n"})}),"\n",(0,s.jsxs)(r.p,{children:["See ",(0,s.jsx)(r.a,{href:"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_atomic_host/7/html/container_security_guide/docker_selinux_security_policy",children:"Redhat"})," documentation for more info on ",(0,s.jsx)(r.code,{children:"svirt_sandbox_file_t"})]}),"\n",(0,s.jsx)(r.h4,{id:"expired-cacrt",children:"Expired ca.crt"}),"\n",(0,s.jsx)(r.p,{children:"check ca.crt for expiry:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"openssl x509 -in /etc/docker/cert.d/<registry />/ca.crt -text -noout\n"})}),"\n",(0,s.jsx)(r.h4,{id:"docker-login-failed---bad-certificate",children:"docker login failed - bad certificate"}),"\n",(0,s.jsx)(r.p,{children:"on the client you get this error logging in:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"[root@docker ~]# docker login http://dockeregistry.darksyde.net:5000\nUsername: usertest\nPassword:\nError response from daemon: Get https://dockeregistry.darksyde.net:5000/v1/users/: x509: certificate signed by unknown authority\n"})}),"\n",(0,s.jsxs)(r.p,{children:["you check on the registry host with ",(0,s.jsx)(r.code,{children:"docker logs -f registry2"})," and see this:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-log",children:"2017/10/13 07:58:07 http: TLS handshake error from 172.16.20.10:33562: remote error: tls: bad certificate\n2017/10/13 07:58:07 http: TLS handshake error from 172.16.20.10:33564: remote error: tls: bad certificate\n"})}),"\n",(0,s.jsx)(r.p,{children:"usually means the host calling the registry does NOT recognize the CA of the registry."}),"\n",(0,s.jsxs)(r.p,{children:["the ",(0,s.jsx)(r.code,{children:"ca.pem"})," from the step above (\"Generate SSL via container\") needs to be on EVERY HOST that needs to talk to the registry\ne.g. if your registry is called 'dockeregistry' you'd need to find ",(0,s.jsx)(r.code,{children:"ca.crt"})," in ",(0,s.jsx)(r.code,{children:"/etc/docker/certs.d/dockeregistry:5000"})," (includes ':5000')"]}),"\n",(0,s.jsx)(r.admonition,{type:"note",children:(0,s.jsx)(r.p,{children:"The directory in '/etc/docker/cert.d/' must match the name of the registry you're logging into - if the registry is \"docker.registry.org:6000\" the directory must be EXACTLY '/etc/docker/cert.d/docker.registry.org:6000'**"})})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);