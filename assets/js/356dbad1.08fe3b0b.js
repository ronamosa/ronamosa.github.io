"use strict";(self.webpackChunkronamosa_github_io=self.webpackChunkronamosa_github_io||[]).push([[7440],{22236:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>a,frontMatter:()=>d,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"engineer/Misc/bits-bytes-hex","title":"Computer Science Fundamentals - Bits, Bytes, Hex, and Memory Management","description":"Essential computer science fundamentals covering bits, bytes, hexadecimal, memory management, and assembly debugging. Learn low-level programming concepts and system internals.","source":"@site/docs/engineer/Misc/bits-bytes-hex.md","sourceDirName":"engineer/Misc","slug":"/engineer/Misc/bits-bytes-hex","permalink":"/docs/engineer/Misc/bits-bytes-hex","draft":false,"unlisted":false,"editUrl":"https://github.com/ronamosa/ronamosa.github.io/edit/main/website/docs/engineer/Misc/bits-bytes-hex.md","tags":[{"inline":true,"label":"computer-science","permalink":"/docs/tags/computer-science"},{"inline":true,"label":"fundamentals","permalink":"/docs/tags/fundamentals"},{"inline":true,"label":"memory","permalink":"/docs/tags/memory"},{"inline":true,"label":"assembly","permalink":"/docs/tags/assembly"},{"inline":true,"label":"debugging","permalink":"/docs/tags/debugging"}],"version":"current","lastUpdatedBy":"Ron Amosa","lastUpdatedAt":1758526302000,"sidebarPosition":2,"frontMatter":{"title":"Computer Science Fundamentals - Bits, Bytes, Hex, and Memory Management","description":"Essential computer science fundamentals covering bits, bytes, hexadecimal, memory management, and assembly debugging. Learn low-level programming concepts and system internals.","keywords":["computer science fundamentals","bits bytes hex","memory management","assembly debugging","low level programming","system internals","binary representation"],"tags":["computer-science","fundamentals","memory","assembly","debugging"],"sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Docusaurus GitHub Pages Deployment - Complete Setup Guide","permalink":"/docs/engineer/Misc/docusaurus-setup"},"next":{"title":"Algolia Search Integration for Docusaurus - Complete Setup with Cloudflare CDN","permalink":"/docs/engineer/Misc/docusaurus-algolia-search"}}');var t=n(74848),r=n(28453);const d={title:"Computer Science Fundamentals - Bits, Bytes, Hex, and Memory Management",description:"Essential computer science fundamentals covering bits, bytes, hexadecimal, memory management, and assembly debugging. Learn low-level programming concepts and system internals.",keywords:["computer science fundamentals","bits bytes hex","memory management","assembly debugging","low level programming","system internals","binary representation"],tags:["computer-science","fundamentals","memory","assembly","debugging"],sidebar_position:2},l=void 0,c={},o=[{value:"Overview",id:"overview",level:2},{value:"Bits, Bytes, Hex",id:"bits-bytes-hex",level:2},{value:"binary to decimal",id:"binary-to-decimal",level:3},{value:"Hexadecimal",id:"hexadecimal",level:3},{value:"Resources",id:"resources",level:2}];function h(e){const s={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(s.p,{children:"Notes, study and understanding computer science fundamentals around bits, bytes and hex; how memory works, how to read and debug assembly."}),"\n",(0,t.jsx)(s.h2,{id:"bits-bytes-hex",children:"Bits, Bytes, Hex"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"1 bit"}),' = 0 or 1 so "1 bit can represent 2 x numbers"']}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"1 byte"})," = 8 bits i.e. 00000000, 00000001 and every combo of 8-bit 0's and 1's"]}),"\n"]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsx)(s.tr,{children:(0,t.jsx)(s.th,{children:"Numbers in 2 bits = 4"})})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsx)(s.tr,{children:(0,t.jsx)(s.td,{children:"00"})}),(0,t.jsx)(s.tr,{children:(0,t.jsx)(s.td,{children:"01"})}),(0,t.jsx)(s.tr,{children:(0,t.jsx)(s.td,{children:"10"})}),(0,t.jsx)(s.tr,{children:(0,t.jsx)(s.td,{children:"11"})})]})]}),"\n",(0,t.jsxs)(s.p,{children:["If we're calculating for ",(0,t.jsx)(s.code,{children:"3 bits"})]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsxs)(s.th,{children:["Number in ",(0,t.jsx)(s.code,{children:"3 bits"})]}),(0,t.jsx)(s.th,{children:"2 * (No's in 2 bits) = 8"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"0XX"}),(0,t.jsxs)(s.td,{children:["where ",(0,t.jsx)(s.code,{children:"XX"})," is equal to the ",(0,t.jsx)(s.code,{children:"2 bit"})," calculation"]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"1XX"}),(0,t.jsxs)(s.td,{children:["where ",(0,t.jsx)(s.code,{children:"XX"})," is equal to the ",(0,t.jsx)(s.code,{children:"2 bit"})," calculation"]})]})]})]}),"\n",(0,t.jsxs)(s.p,{children:["If we're calculating for ",(0,t.jsx)(s.code,{children:"4 bits"})]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsxs)(s.th,{children:["Number in ",(0,t.jsx)(s.code,{children:"4 bits"})]}),(0,t.jsx)(s.th,{children:"2 * (No's in 3 bits) = 16"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"0XXX"}),(0,t.jsxs)(s.td,{children:["where ",(0,t.jsx)(s.code,{children:"XXX"})," is equal to the ",(0,t.jsx)(s.code,{children:"3 bit"})," calculation"]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"1XXX"}),(0,t.jsxs)(s.td,{children:["where ",(0,t.jsx)(s.code,{children:"XXX"})," is equal to the ",(0,t.jsx)(s.code,{children:"3 bit"})," calculation"]})]})]})]}),"\n",(0,t.jsx)(s.p,{children:"To summarize the sequence/pattern here:"}),"\n",(0,t.jsxs)(s.admonition,{title:"Rule of 2",type:"tip",children:[(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"1 bit = 2^1 = 2 numbers"}),"\n",(0,t.jsx)(s.li,{children:"2 bit = 2^2 = 4 numbers"}),"\n",(0,t.jsx)(s.li,{children:"3 bit = 2^3 = 8 numbers"}),"\n",(0,t.jsx)(s.li,{children:"4 bit = 2^4 = 16 numbers"}),"\n"]}),(0,t.jsx)(s.p,{children:"N bits = 2^N numbers"})]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsx)(s.p,{children:(0,t.jsxs)(s.em,{children:["How many numbers can ",(0,t.jsx)(s.code,{children:"1 byte"})," represent?"]})}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.code,{children:"N bits = 2^N numbers i.e. 2^8 = 256"})}),"\n",(0,t.jsx)(s.h3,{id:"binary-to-decimal",children:"binary to decimal"}),"\n",(0,t.jsxs)(s.p,{children:["Take this binary number ",(0,t.jsx)(s.code,{children:"10011101"})," and convert to decimal."]}),"\n",(0,t.jsxs)(s.p,{children:['Read this as, "left most" position --\x3e ',(0,t.jsx)(s.code,{children:"10011101"}),' \u2190 count positions starting from the "right most" position where the ',(0,t.jsx)(s.code,{children:"1"}),' is the "zero position", and moving to the left from there the ',(0,t.jsx)(s.code,{children:"0"}),' is the "first" position.']}),"\n",(0,t.jsx)(s.admonition,{title:"Calculate position",type:"info",children:(0,t.jsx)(s.p,{children:"Position is counted starting from the right-most bit, and counting from 'zero'"})}),"\n",(0,t.jsx)(s.p,{children:'Put the number veritcally into this table from the "left most" bit at top.'}),"\n",(0,t.jsxs)(s.p,{children:["We ONLY do calculations on the ",(0,t.jsx)(s.code,{children:"1"})," bits and skip the ",(0,t.jsx)(s.code,{children:"0"})," bits."]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"bit"}),(0,t.jsx)(s.th,{children:"calculation"}),(0,t.jsx)(s.th,{children:"result"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"1"}),(0,t.jsx)(s.td,{children:"2^7 (7th position)"}),(0,t.jsx)(s.td,{children:"128"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"0"}),(0,t.jsxs)(s.td,{children:["6th position but ",(0,t.jsx)(s.code,{children:"0"})]}),(0,t.jsx)(s.td,{children:"0"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"0"}),(0,t.jsxs)(s.td,{children:["5th position but ",(0,t.jsx)(s.code,{children:"0"})]}),(0,t.jsx)(s.td,{children:"0"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"1"}),(0,t.jsx)(s.td,{children:"2^4th position"}),(0,t.jsx)(s.td,{children:"16"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"1"}),(0,t.jsx)(s.td,{children:"2^3 (3rd position)"}),(0,t.jsx)(s.td,{children:"8"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"1"}),(0,t.jsx)(s.td,{children:"2^2 (3rd position)"}),(0,t.jsx)(s.td,{children:"4"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"0"}),(0,t.jsxs)(s.td,{children:["1st position but ",(0,t.jsx)(s.code,{children:"0"})]}),(0,t.jsx)(s.td,{})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"1"}),(0,t.jsx)(s.td,{children:"2^0 (zero position)"}),(0,t.jsx)(s.td,{children:"1"})]})]})]}),"\n",(0,t.jsxs)(s.p,{children:["The sum = ",(0,t.jsx)(s.code,{children:"157"})," is the decimal representation of ",(0,t.jsx)(s.code,{children:"10011101"}),"."]}),"\n",(0,t.jsx)(s.h3,{id:"hexadecimal",children:"Hexadecimal"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"0...9"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"A (10), B (11), C (12), D (13), E (14), F (15)"})}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["Take hex value ",(0,t.jsx)(s.code,{children:"0x3EA"})]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"bit"}),(0,t.jsx)(s.th,{children:"calculation"}),(0,t.jsx)(s.th,{children:"result"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"3"}),(0,t.jsx)(s.td,{children:"3*16^2 (2nd position)"}),(0,t.jsx)(s.td,{children:"3 x (256) = 768"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"E"}),(0,t.jsx)(s.td,{children:"14*16^1 (1st position)"}),(0,t.jsx)(s.td,{children:"14 x (16) = 224"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"A"}),(0,t.jsx)(s.td,{children:"10*16^0 (zero position)"}),(0,t.jsx)(s.td,{children:"10 x (1) = 10"})]})]})]}),"\n",(0,t.jsxs)(s.p,{children:["The sum = ",(0,t.jsx)(s.code,{children:"1002"})," is the decimal representation of ",(0,t.jsx)(s.code,{children:"0x3EA"})]}),"\n",(0,t.jsx)(s.h2,{id:"resources",children:"Resources"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"https://www.youtube.com/watch?v=PmG2qgQbvc8",children:"bits, bytes, hex"})}),"\n"]})]})}function a(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>d,x:()=>l});var i=n(96540);const t={},r=i.createContext(t);function d(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(r.Provider,{value:s},e.children)}}}]);