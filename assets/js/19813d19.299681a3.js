"use strict";(self.webpackChunkronamosa_github_io=self.webpackChunkronamosa_github_io||[]).push([[15],{28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var i=n(96540);const a={},o=i.createContext(a);function s(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(o.Provider,{value:t},e.children)}},85138:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"engineer/AI/LLMLangChainProject","title":"LangChain AutoGPT Development - Building Autonomous AI Agents","description":"Complete guide to building AutoGPT-style autonomous AI agents using LangChain. Learn agent architectures, tool integration, and autonomous AI system development.","source":"@site/docs/engineer/AI/LLMLangChainProject.md","sourceDirName":"engineer/AI","slug":"/engineer/AI/LLMLangChainProject","permalink":"/docs/engineer/AI/LLMLangChainProject","draft":false,"unlisted":false,"editUrl":"https://github.com/ronamosa/ronamosa.github.io/edit/main/website/docs/engineer/AI/LLMLangChainProject.md","tags":[{"inline":true,"label":"langchain","permalink":"/docs/tags/langchain"},{"inline":true,"label":"autogpt","permalink":"/docs/tags/autogpt"},{"inline":true,"label":"ai-agents","permalink":"/docs/tags/ai-agents"},{"inline":true,"label":"automation","permalink":"/docs/tags/automation"},{"inline":true,"label":"development","permalink":"/docs/tags/development"}],"version":"current","lastUpdatedBy":"Ron Amosa","lastUpdatedAt":1758526302000,"sidebarPosition":13,"frontMatter":{"title":"LangChain AutoGPT Development - Building Autonomous AI Agents","description":"Complete guide to building AutoGPT-style autonomous AI agents using LangChain. Learn agent architectures, tool integration, and autonomous AI system development.","keywords":["langchain autogpt","autonomous ai agents","ai agents","langchain development","autogpt","ai automation","agent frameworks"],"tags":["langchain","autogpt","ai-agents","automation","development"],"sidebar_position":13},"sidebar":"docsSidebar","previous":{"title":"Amazon Bedrock and LangChain Workshop - Enterprise AI Application Development","permalink":"/docs/engineer/AI/BedrockLangChainWorkshop1"},"next":{"title":"\ud83d\udee0\ufe0f Projects","permalink":"/docs/category/\ufe0f-projects"}}');var a=n(74848),o=n(28453);const s={title:"LangChain AutoGPT Development - Building Autonomous AI Agents",description:"Complete guide to building AutoGPT-style autonomous AI agents using LangChain. Learn agent architectures, tool integration, and autonomous AI system development.",keywords:["langchain autogpt","autonomous ai agents","ai agents","langchain development","autogpt","ai automation","agent frameworks"],tags:["langchain","autogpt","ai-agents","automation","development"],sidebar_position:13},r=void 0,l={},c=[{value:"What does this do?",id:"what-does-this-do",level:2},{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Code",id:"code",level:2},{value:"LangChain Output",id:"langchain-output",level:2},{value:"The Final Script",id:"the-final-script",level:2}];function u(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsxs)(t.p,{children:["Following ",(0,a.jsx)(t.a,{href:"https://www.youtube.com/watch?v=MlK6SIjcjE8&ab_channel=NicholasRenotte",children:"LangChain Crash Course: Build a AutoGPT app in 25 minutes!"})," by Nicholas Renotte."]})}),"\n",(0,a.jsx)(t.h2,{id:"what-does-this-do",children:"What does this do?"}),"\n",(0,a.jsx)(t.p,{children:'Langchain "chains together" different calls to LLM API\'s, to co-ordinate a sort of task manager or "agent", if you will.'}),"\n",(0,a.jsx)(t.p,{children:"This particular app does the following"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"generates a Youtube video script"}),"\n",(0,a.jsx)(t.li,{children:"based on the topic or subject you enter"}),"\n",(0,a.jsxs)(t.li,{children:["uses ",(0,a.jsx)(t.code,{children:"PromptTemplate"})," to separate and capture the title and the script of the video"]}),"\n",(0,a.jsxs)(t.li,{children:["uses ",(0,a.jsx)(t.code,{children:"ConversationBufferMemory"}),' to remember the "conversation" of the title and script history']}),"\n",(0,a.jsxs)(t.li,{children:["uses the OpenAI API via ",(0,a.jsx)(t.code,{children:"llm"})," and feeds this inside ",(0,a.jsx)(t.code,{children:"LLMChain"})," which is chaining the title_template and the title_memory together, and the same for script."]}),"\n",(0,a.jsxs)(t.li,{children:["uses ",(0,a.jsx)(t.code,{children:"WikipediaAPIWrapper"}),' to "wrap" the prompt (i.e. what the user fed to ',(0,a.jsx)(t.code,{children:"streamlit"}),") and send it to Wiki's API for info"]}),"\n",(0,a.jsxs)(t.li,{children:["then formats and lays everything out nicely with streamlit object ",(0,a.jsx)(t.code,{children:"st"})]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"pre-requisites",children:"Pre-requisites"}),"\n",(0,a.jsxs)(t.p,{children:["Git Repo: ",(0,a.jsx)(t.code,{children:"https://github.com/nicknochnack/Langchain-Crash-Course.git"}),", go ahead and ",(0,a.jsx)(t.code,{children:"git clone..."})," that."]}),"\n",(0,a.jsx)(t.p,{children:"You only need two files:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"appkey.py"})," \u2b05\ufe0f get your LLM API key into there."]}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"app.py"})}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"install the following:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sh",children:"pip install streamlit langchain openai wikipedia chromadb tiktoken\n"})}),"\n",(0,a.jsxs)(t.p,{children:["To run the app, run ",(0,a.jsx)(t.code,{children:"streamlit run app.py"})]}),"\n",(0,a.jsx)(t.h2,{id:"code",children:"Code"}),"\n",(0,a.jsxs)(t.p,{children:["This is ",(0,a.jsx)(t.code,{children:"app.py"})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"# Bring in deps\nimport os \nfrom apikey import apikey \n\nimport streamlit as st \nfrom langchain.llms import OpenAI\nfrom langchain.prompts import PromptTemplate\nfrom langchain.chains import LLMChain, SequentialChain \nfrom langchain.memory import ConversationBufferMemory\nfrom langchain.utilities import WikipediaAPIWrapper \n\nos.environ['OPENAI_API_KEY'] = apikey\n\n# App framework\nst.title('\ud83e\udd9c\ud83d\udd17 YouTube GPT Creator')\nprompt = st.text_input('Plug in your prompt here') \n\n# Prompt templates\ntitle_template = PromptTemplate(\n    input_variables = ['topic'], \n    template='write me a youtube video title about {topic}'\n)\n\nscript_template = PromptTemplate(\n    input_variables = ['title', 'wikipedia_research'], \n    template='write me a youtube video script based on this title TITLE: {title} while leveraging this wikipedia reserch:{wikipedia_research} '\n)\n\n# Memory \ntitle_memory = ConversationBufferMemory(input_key='topic', memory_key='chat_history')\nscript_memory = ConversationBufferMemory(input_key='title', memory_key='chat_history')\n\n\n# Llms\nllm = OpenAI(temperature=0.9) \ntitle_chain = LLMChain(llm=llm, prompt=title_template, verbose=True, output_key='title', memory=title_memory)\nscript_chain = LLMChain(llm=llm, prompt=script_template, verbose=True, output_key='script', memory=script_memory)\n\nwiki = WikipediaAPIWrapper()\n\n# Show stuff to the screen if there's a prompt\nif prompt: \n    title = title_chain.run(prompt)\n    wiki_research = wiki.run(prompt) \n    script = script_chain.run(title=title, wikipedia_research=wiki_research)\n\n    st.write(title) \n    st.write(script) \n\n    with st.expander('Title History'): \n        st.info(title_memory.buffer)\n\n    with st.expander('Script History'): \n        st.info(script_memory.buffer)\n\n    with st.expander('Wikipedia Research'): \n        st.info(wiki_research)\n"})}),"\n",(0,a.jsx)(t.h2,{id:"langchain-output",children:"LangChain Output"}),"\n",(0,a.jsx)(t.p,{children:"This is what the output looks like, which the app shows each chain being processed (pretty cool actually!)"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:'parallax@dev:~/repos/Langchain-Crash-Course$ streamlit run app.py\n\nCollecting usage statistics. To deactivate, set browser.gatherUsageStats to False.\n\n\n  You can now view your Streamlit app in your browser.\n\n  Network URL: http://172.16.2.101:8501\n  External URL: http://115.188.132.124:8501\n\n\n\n> Entering new LLMChain chain...\nPrompt after formatting:\nwrite me a youtube video title about Cloud Computing\n\n> Finished chain.\n\n\n> Entering new LLMChain chain...\nPrompt after formatting:\nwrite me a youtube video script based on this title TITLE: \n\n"Cloud Computing for Beginners: A Guide to Getting Started" while leveraging this wikipedia reserch:Page: Cloud computing\nSummary: Cloud computing is the on-demand availability of computer system resources, especially data storage (cloud storage) and computing power, without direct active management by the user. Large clouds often have functions distributed over multiple locations, each of which is a data center. Cloud computing relies on sharing of resources to achieve coherence and typically uses a pay-as-you-go model, which can help in reducing capital expenses but may also lead to unexpected operating expenses for users.\n\n\n\nPage: Cloud computing security\nSummary: Cloud computing security or, more simply, cloud security, refers to a broad set of policies, technologies, applications, and controls utilized to protect virtualized IP, data, applications, services, and the associated infrastructure of cloud computing. It is a sub-domain of computer security, network security, and, more broadly, information security.\n\nPage: Cloud-native computing\nSummary: Cloud native computing is an approach in software development that utilizes cloud computing to "build and run scalable applications in modern, dynamic environments such as public, private, and hybrid clouds". These technologies such as containers, microservices, serverless functions, cloud native processors and immutable infrastructure, deployed via \ndeclarative code are common elements of this architectural style. Cloud native technologies focus on minimizing users\' operational burden.Cloud native techniques "enable loosely coupled systems that are resilient, manageable, and observable. Combined with robust automation, they allow engineers to make high-impact changes frequently and predictably with minimal toil."Frequently, cloud-native applications are built as a set of microservices that run in Open Container Initiative compliant containers, such as Containerd, and may be orchestrated in Kubernetes and managed and deployed using DevOps and Git CI workflows (although there is a large amount of competing open source that supports cloud-native development). The advantage of using containers is the ability to package all software needed to execute into one executable package. The container runs in a virtualized environment, which isolates the contained application from its environment. \n\n> Finished chain.\n'})}),"\n",(0,a.jsx)(t.h2,{id:"the-final-script",children:"The Final Script"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-plaintext",children:'"Introduction to Cloud Computing: Exploring the Benefits and Challenges"\n\nScript:\n\nHello and welcome to this YouTube video introduction to cloud computing. Cloud computing is the on-demand availability of computer system resources, such as data storage and computing power, to users without active management. It allows for cost savings, scalability, and efficiency - but it also brings new challenges.\n\nToday, we\u2019ll begin by exploring the benefits of cloud computing for users. We\u2019ll discuss the cost savings of cloud computing, as well as its scalability and efficiency. We\u2019ll then discuss the various cloud security measures (such as policies, technologies, and applications) that are used to protect data and applications.\n\nAfter that, we\u2019ll explore what cloud-native computing is. We\u2019ll talk about how it uses containers, microservices, and serverless functions to create scalability and minimize operational burden. We\u2019ll discuss how cloud-native can be deployed with declarative code and orchestrated in Kubernetes.\n\nFinally, we\u2019ll end by discussing some of the challenges that come with cloud computing, such as security concerns and data privacy.\n\nThat\u2019s it for the introduction to cloud computing. Now you know the benefits\n'})}),"\n",(0,a.jsx)(t.admonition,{title:"Next Project?",type:"tip",children:(0,a.jsx)(t.p,{children:'Talk with PDFs i.e. use LangChain to upload (locally) and "chat" with my PDF files'})})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);