"use strict";(self.webpackChunkronamosa_github_io=self.webpackChunkronamosa_github_io||[]).push([[1415],{13314:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"engineer/GCP/2019-11-27-GCP-Install-Ambassador-Helm2","title":"Setup Ambassador API Gateway on GCP.","description":"Published Date: 27-NOV-2019","source":"@site/docs/engineer/GCP/2019-11-27-GCP-Install-Ambassador-Helm2.md","sourceDirName":"engineer/GCP","slug":"/engineer/GCP/2019-11-27-GCP-Install-Ambassador-Helm2","permalink":"/docs/engineer/GCP/2019-11-27-GCP-Install-Ambassador-Helm2","draft":false,"unlisted":false,"editUrl":"https://github.com/ronamosa/ronamosa.github.io/edit/main/website/docs/engineer/GCP/2019-11-27-GCP-Install-Ambassador-Helm2.md","tags":[],"version":"current","lastUpdatedBy":"Ron Amosa","lastUpdatedAt":1758526302000,"frontMatter":{"title":"Setup Ambassador API Gateway on GCP."},"sidebar":"docsSidebar","previous":{"title":"AKS Azure AD Integration - Complete Security Setup with Kubernetes RBAC","permalink":"/docs/engineer/Azure/2020-09-27-AKS-AzureAD-Integration-2020"},"next":{"title":"Setup Google Compute Engine VM to ssh using OS Login.","permalink":"/docs/engineer/GCP/2020-05-25-GCE-OS-Login-VM"}}');var t=s(74848),r=s(28453);const i={title:"Setup Ambassador API Gateway on GCP."},l=void 0,o={},c=[{value:"key components",id:"key-components",level:3},{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Create your GKE Cluster",id:"create-your-gke-cluster",level:2},{value:"Setup your kubectl",id:"setup-your-kubectl",level:2},{value:"Setup charts : helm version 2",id:"setup-charts--helm-version-2",level:2},{value:"create tiller-rbac service account",id:"create-tiller-rbac-service-account",level:3},{value:"install tiller",id:"install-tiller",level:3},{value:"helm fetch ambassador charts",id:"helm-fetch-ambassador-charts",level:3},{value:"setup ingress, application namespaces",id:"setup-ingress-application-namespaces",level:3},{value:"deploy helm2 chart",id:"deploy-helm2-chart",level:3},{value:"Create &amp; Deploy a demo pod",id:"create--deploy-a-demo-pod",level:2},{value:"helm create",id:"helm-create",level:3},{value:"edit the service.yaml",id:"edit-the-serviceyaml",level:3},{value:"deploy the www-demo chart",id:"deploy-the-www-demo-chart",level:3},{value:"test direct connection to the pod",id:"test-direct-connection-to-the-pod",level:3},{value:"test the external IP address (ingress)",id:"test-the-external-ip-address-ingress",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"Published Date: 27-NOV-2019"})}),"\n",(0,t.jsxs)(n.p,{children:["A pre-requisite to another post I'm writing where I'm setting up a Nexus instance, requires a working Ambassador setup. I only figured that out when trying to deploy my Nexus setup so here I am writing the pre-cursor to writing that blog i.e. set this up so I can set ",(0,t.jsx)(n.em,{children:"that"})," up."]}),"\n",(0,t.jsxs)(n.p,{children:["I've written about ",(0,t.jsx)(n.a,{href:"https://www.getambassador.io/",children:"Ambassador"})," before."]}),"\n",(0,t.jsxs)(n.p,{children:["Learn a little bit about it on a blog I wrote about ",(0,t.jsx)(n.a,{href:"/docs/engineer/K8s/2019-07-09-Ambassador-Disable-TLS1",children:"disabling tls1, tls1.0 on Ambassador"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Basically, this is a quick run through setting up a simple ambassador API gateway that proxies connections through to a nginx backend pod/service using helm (version 2 for now)."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"architecture",src:s(82215).A+"",width:"654",height:"420"})}),"\n",(0,t.jsx)(n.h3,{id:"key-components",children:"key components"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"ambassador deployment"}),"\n",(0,t.jsx)(n.li,{children:"www-demo deployment"}),"\n",(0,t.jsxs)(n.li,{children:["gcp ingress points = IP addresses by virtue of ambassador's ",(0,t.jsx)(n.code,{children:"LoadBalancer"})," IP exposing ambassador service to the internet."]}),"\n",(0,t.jsx)(n.li,{children:"the ambassador annotation that does the ambassador->backend mapping or routing."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"pre-requisites",children:"Pre-requisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"kubectl"})," installed"]}),"\n",(0,t.jsxs)(n.li,{children:["grabbed a ",(0,t.jsx)(n.code,{children:"kubeconfig"})," file from your GKE cluster"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/engineer/K8s/2019-11-11-Helm-3-Kubernetes-Package-Manager",children:"helm3"})," installed."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"create-your-gke-cluster",children:"Create your GKE Cluster"}),"\n",(0,t.jsxs)(n.p,{children:["However you want to do it, via terraform or via ",(0,t.jsx)(n.a,{href:"https://console.cloud.google.com",children:"https://console.cloud.google.com"})," just get one up & running."]}),"\n",(0,t.jsx)(n.h2,{id:"setup-your-kubectl",children:"Setup your kubectl"}),"\n",(0,t.jsxs)(n.p,{children:["For me I setup a demo cluster ",(0,t.jsx)(n.code,{children:"development-cluster-1"})," in ",(0,t.jsx)(n.code,{children:"us-central1-a"})," on my ",(0,t.jsx)(n.code,{children:"cloudbuilderio"})," project"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"gcloud container clusters get-credentials development-cluster-1 --zone us-central1-a --project cloudbuilderio\n"})}),"\n",(0,t.jsx)(n.p,{children:"test it"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"ubuntudevbox:~/GCP$ kubectl get nodes\nNAME                                                  STATUS   ROLES    AGE   VERSION\ngke-development-cluster--default-pool-d0e1b087-llxh   Ready    <none />   32m   v1.13.11-gke.14\ngke-development-cluster--default-pool-d0e1b087-z8gh   Ready    <none />   32m   v1.13.11-gke.14\ngke-development-cluster--default-pool-d0e1b087-z8s7   Ready    <none />   32m   v1.13.11-gke.14\n"})}),"\n",(0,t.jsx)(n.h2,{id:"setup-charts--helm-version-2",children:"Setup charts : helm version 2"}),"\n",(0,t.jsx)(n.h3,{id:"create-tiller-rbac-service-account",children:"create tiller-rbac service account"}),"\n",(0,t.jsx)(n.p,{children:"Deploy this yaml config"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="tiller-rbac.yaml"',children:'apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: tiller\n  namespace: kube-system\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: tiller-clusterrolebinding\nsubjects:\n- kind: ServiceAccount\n  name: tiller\n  namespace: kube-system\nroleRef:\n  kind: ClusterRole\n  name: cluster-admin\n  apiGroup: ""\n'})}),"\n",(0,t.jsxs)(n.p,{children:["deploy with : ",(0,t.jsx)(n.code,{children:"$ kubectl create -f ./tiller-rbac.yaml"})]}),"\n",(0,t.jsx)(n.h3,{id:"install-tiller",children:"install tiller"}),"\n",(0,t.jsxs)(n.p,{children:["helm v2 needs tiller, so run ",(0,t.jsx)(n.code,{children:"helm init"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"23:30 $ helm2 init\nCreating /home/user1/.helm\nCreating /home/user1/.helm/repository\nCreating /home/user1/.helm/repository/cache\nCreating /home/user1/.helm/repository/local\nCreating /home/user1/.helm/plugins\nCreating /home/user1/.helm/starters\nCreating /home/user1/.helm/cache/archive\nCreating /home/user1/.helm/repository/repositories.yaml\nAdding stable repo with URL: https://kubernetes-charts.storage.googleapis.com\nAdding local repo with URL: http://127.0.0.1:8879/charts\n$HELM_HOME has been configured at /home/user1/.helm.\n\nTiller (the Helm server-side component) has been installed into your Kubernetes Cluster.\n\nPlease note: by default, Tiller is deployed with an insecure 'allow unauthenticated users' policy.\nTo prevent this, run `helm init` with the --tiller-tls-verify flag.\nFor more information on securing your installation see: https://docs.helm.sh/using_helm/#securing-your-helm-installation\n"})}),"\n",(0,t.jsx)(n.h3,{id:"helm-fetch-ambassador-charts",children:"helm fetch ambassador charts"}),"\n",(0,t.jsx)(n.p,{children:"As helm2 fetch the latest stable ambassador helm chart"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"helm2 fetch stable/ambassador --untar\n"})}),"\n",(0,t.jsx)(n.h3,{id:"setup-ingress-application-namespaces",children:"setup ingress, application namespaces"}),"\n",(0,t.jsx)(n.p,{children:"We will setup a namespace for ambassador (ingress), and another one for a web app demo (application) that ambassador will proxy through to"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ kubectl create ns ingress\nnamespace/ingress created\n\n$ kubectl create ns application\nnamespace/application created\n"})}),"\n",(0,t.jsx)(n.p,{children:"check namespaces"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"23:52 $ kubectl get ns\nNAME              STATUS   AGE\napplication       Active   7m26s\ndefault           Active   32m\ningress           Active   7m32s\nkube-node-lease   Active   32m\nkube-public       Active   32m\nkube-system       Active   32m\n"})}),"\n",(0,t.jsx)(n.h3,{id:"deploy-helm2-chart",children:"deploy helm2 chart"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"$ helm2 install ambassador/ -n ambassador --namespace ingress"})}),"\n",(0,t.jsx)(n.p,{children:"output"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"NAME:   ambassador\nLAST DEPLOYED: Sun Dec  1 00:25:54 2019\nNAMESPACE: ingress\nSTATUS: DEPLOYED\n\nRESOURCES:\n==> v1/Deployment\nNAME        READY  UP-TO-DATE  AVAILABLE  AGE\nambassador  0/3    3           0          1s\n\n==> v1/Pod(related)\nNAME                        READY  STATUS             RESTARTS  AGE\nambassador-d7fbbd8f6-cfwc7  0/1    ContainerCreating  0         1s\nambassador-d7fbbd8f6-vbcd4  0/1    ContainerCreating  0         1s\nambassador-d7fbbd8f6-xhcgs  0/1    ContainerCreating  0         1s\n\n==> v1/Service\nNAME              TYPE          CLUSTER-IP  EXTERNAL-IP  PORT(S)                     AGE\nambassador        LoadBalancer  10.4.14.46  <pending />    80:30491/TCP,443:30181/TCP  1s\nambassador-admin  ClusterIP     10.4.9.233  <none />       8877/TCP                    1s\n\n==> v1/ServiceAccount\nNAME        SECRETS  AGE\nambassador  1        1s\n\n==> v1beta1/ClusterRole\nNAME             AGE\nambassador       1s\nambassador-crds  1s\n\n==> v1beta1/ClusterRoleBinding\nNAME             AGE\nambassador       1s\nambassador-crds  1s\n\n\nNOTES:\nCongratulations! You\\'ve successfully installed Ambassador.\n\nFor help, visit our Slack at https://d6e.co/slack or view the documentation online at https://www.getambassador.io.\n\nTo get the IP address of Ambassador, run the following commands:\nNOTE: It may take a few minutes for the LoadBalancer IP to be available.\n     You can watch the status of by running 'kubectl get svc -w  --namespace ingress ambassador'\n\n  On GKE/Azure:\n  export SERVICE_IP=$(kubectl get svc --namespace ingress ambassador -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n\n  On AWS:\n  export SERVICE_IP=$(kubectl get svc --namespace ingress ambassador -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')\n\n  echo http://$SERVICE_IP:\n"})}),"\n",(0,t.jsx)(n.p,{children:"you can now see this in GCP's console"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"installed",src:s(56590).A+"",width:"766",height:"341"})}),"\n",(0,t.jsx)(n.p,{children:"Ok. Ambassador installed and we're ready to rock'n'roll."}),"\n",(0,t.jsx)(n.h2,{id:"create--deploy-a-demo-pod",children:"Create & Deploy a demo pod"}),"\n",(0,t.jsx)(n.h3,{id:"helm-create",children:"helm create"}),"\n",(0,t.jsx)(n.p,{children:"create a dummy/demo helm chart"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"~/helm/charts/v2 $ helm2 create www-demo\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"helm2 is my symlink to the helm v2 binary cos I have helm3 installed as the default 'helm' command"})}),"\n",(0,t.jsx)(n.p,{children:"this is your new demo chart"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\u2714 ~/helm/charts/v2/www-demo\n21:16 $ tree\n.\n\u251c\u2500\u2500 charts\n\u251c\u2500\u2500 Chart.yaml\n\u251c\u2500\u2500 templates\n\u2502\xa0\xa0 \u251c\u2500\u2500 deployment.yaml\n\u2502\xa0\xa0 \u251c\u2500\u2500 _helpers.tpl\n\u2502\xa0\xa0 \u251c\u2500\u2500 ingress.yaml\n\u2502\xa0\xa0 \u251c\u2500\u2500 NOTES.txt\n\u2502\xa0\xa0 \u251c\u2500\u2500 service.yaml\n\u2502\xa0\xa0 \u2514\u2500\u2500 tests\n\u2502\xa0\xa0     \u2514\u2500\u2500 test-connection.yaml\n\u2514\u2500\u2500 values.yaml\n\n3 directories, 8 files\n"})}),"\n",(0,t.jsx)(n.h3,{id:"edit-the-serviceyaml",children:"edit the service.yaml"}),"\n",(0,t.jsxs)(n.p,{children:["update your ",(0,t.jsx)(n.code,{children:"templates/service.yaml"})," file so it looks like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Service\nmetadata:\n  name: \\{\\{ include "www-demo.fullname" . \\}\\}\n  labels:\n\\{\\{ include "www-demo.labels" . | indent 4 \\}\\}\n  annotations:\n    getambassador.io/config: |\n      ---\n      apiVersion: ambassador/v1\n      kind: Mapping\n      name: www_mapping\n      prefix: /\n      service: \\{\\{ include "www-demo.fullname" . \\}\\}.application:80\nspec:\n  type: \\{\\{ .Values.service.type \\}\\}\n  ports:\n    - port: \\{\\{ .Values.service.port \\}\\}\n      targetPort: http\n      protocol: TCP\n      name: http\n  selector:\n    app.kubernetes.io/name: \\{\\{ include "www-demo.name" . \\}\\}\n    app.kubernetes.io/instance: \\{\\{ .Release.Name \\}\\}\n'})}),"\n",(0,t.jsx)(n.p,{children:"key things in this config"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"the 'service' in the annotation name has to match the name of this service."}),"\n",(0,t.jsxs)(n.li,{children:["the service annotation also follows the form ",(0,t.jsx)(n.code,{children:"service_name.namespace_name:port"})," and we will be deploying the demo in the ",(0,t.jsx)(n.code,{children:"application"})," namespace on the ",(0,t.jsx)(n.code,{children:"http"})," port (80)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"deploy-the-www-demo-chart",children:"deploy the www-demo chart"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'19:58 $ helm2 upgrade --install www-demo www-demo/\nWARNING: Namespace "default" doesnt match with previous. Release will be deployed to application\nRelease "www-demo" has been upgraded.\nLAST DEPLOYED: Mon Dec  2 19:58:13 2019\nNAMESPACE: application\nSTATUS: DEPLOYED\n\nRESOURCES:\n==> v1/Deployment\nNAME      READY  UP-TO-DATE  AVAILABLE  AGE\nwww-demo  1/1    1           1          7m8s\n\n==> v1/Pod(related)\nNAME                      READY  STATUS   RESTARTS  AGE\nwww-demo-8895fbdcb-gj8bh  1/1    Running  0         7m8s\n\n==> v1/Service\nNAME      TYPE       CLUSTER-IP  EXTERNAL-IP  PORT(S)  AGE\nwww-demo  ClusterIP  10.4.2.172  <none />       80/TCP   7m8s\n\n\nNOTES:\n1. Get the application URL by running these commands:\n  export POD_NAME=$(kubectl get pods --namespace application -l "app.kubernetes.io/name=www-demo,app.kubernetes.io/instance=www-demo" -o jsonpath="{.items[0].metadata.name}")\n  echo "Visit http://127.0.0.1:8080 to use your application"\n  kubectl port-forward $POD_NAME 8080:80\n'})}),"\n",(0,t.jsx)(n.h3,{id:"test-direct-connection-to-the-pod",children:"test direct connection to the pod"}),"\n",(0,t.jsxs)(n.p,{children:["using ",(0,t.jsx)(n.code,{children:"kubectl"})," port-forwarding, let's just check the service & port is up & running ready for business"]}),"\n",(0,t.jsx)(n.p,{children:"Get the pod name"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl -n application get pods\nNAME                       READY   STATUS    RESTARTS   AGE\nwww-demo-8895fbdcb-gj8bh   1/1     Running   0          102m\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"port-forward"})," to the remote pod on port 80, from local port 8080"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl -n application port-forward www-demo-8895fbdcb-gj8bh 8080:80 --address 0.0.0.0\nForwarding from 0.0.0.0:8080 -> 80\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["I'm doing the ",(0,t.jsx)(n.code,{children:"--address"})," switch because I'm running this command on a different box (with IP address 192.168.1.19) and want to open the connection local to this machine I'm writing on."]})})}),"\n",(0,t.jsx)(n.p,{children:"should get this if everything's in order"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"port-forward",src:s(36196).A+"",width:"846",height:"462"})}),"\n",(0,t.jsx)(n.h3,{id:"test-the-external-ip-address-ingress",children:"test the external IP address (ingress)"}),"\n",(0,t.jsx)(n.p,{children:"If the ambassador mapping is correct and the www-demo pod is up & running (which we've confirmed) we should be able to go to the Public IP on GCP's \"Services & Ingress\" page - 35.244.116.86 - on port 80 and see this"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"ingress",src:s(35437).A+"",width:"797",height:"631"})}),"\n",(0,t.jsx)(n.p,{children:"And that's it!"}),"\n",(0,t.jsx)(n.p,{children:"Tune in next time when I try and get helm3 charts working for ambassador (maybe)."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>l});var a=s(96540);const t={},r=a.createContext(t);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(r.Provider,{value:n},e.children)}},35437:(e,n,s)=>{s.d(n,{A:()=>a});const a=s.p+"assets/images/gcp-ambassador-ingress-51d661e517453eebe5d4c80b7020f7f3.png"},36196:(e,n,s)=>{s.d(n,{A:()=>a});const a=s.p+"assets/images/gcp-ambassador-portforward-852779a566917c0f87ae0d056ca0e351.png"},56590:(e,n,s)=>{s.d(n,{A:()=>a});const a=s.p+"assets/images/gcp-ambassador-installed-1147d1b9db5e9aded7093d04490d864c.png"},82215:(e,n,s)=>{s.d(n,{A:()=>a});const a=s.p+"assets/images/gcp-ambassador-architecture-0ddef981a611a69fb793ab798cdc98f4.png"}}]);