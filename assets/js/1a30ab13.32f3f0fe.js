"use strict";(self.webpackChunkronamosa_github_io=self.webpackChunkronamosa_github_io||[]).push([[3961],{28453:(e,t,a)=>{a.d(t,{R:()=>r,x:()=>c});var s=a(96540);const n={},o=s.createContext(n);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),s.createElement(o.Provider,{value:t},e.children)}},79787:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"study/CKS/Cluster Setup/ClusterNodeMetatdata","title":"Node Metadata","description":"Cloud Platform Node Metadata","source":"@site/docs/study/CKS/1. Cluster Setup/ClusterNodeMetatdata.md","sourceDirName":"study/CKS/1. Cluster Setup","slug":"/study/CKS/Cluster Setup/ClusterNodeMetatdata","permalink":"/docs/study/CKS/Cluster Setup/ClusterNodeMetatdata","draft":false,"unlisted":false,"editUrl":"https://github.com/ronamosa/ronamosa.github.io/edit/main/website/docs/study/CKS/1. Cluster Setup/ClusterNodeMetatdata.md","tags":[],"version":"current","lastUpdatedBy":"Ron Amosa","lastUpdatedAt":1758526302000,"frontMatter":{"title":"Node Metadata"},"sidebar":"docsSidebar","previous":{"title":"Network Policies","permalink":"/docs/study/CKS/Cluster Setup/ClusterNetworkPolicies"},"next":{"title":"Secure Ingress","permalink":"/docs/study/CKS/Cluster Setup/ClusterSecureIngress"}}');var n=a(74848),o=a(28453);const r={title:"Node Metadata"},c=void 0,d={},l=[{value:"Cloud Platform Node Metadata",id:"cloud-platform-node-metadata",level:2},{value:"Access sensitive Node Metadata",id:"access-sensitive-node-metadata",level:2},{value:"Restrict access using NetworkPolicies",id:"restrict-access-using-networkpolicies",level:2},{value:"block access to metadata server with NP",id:"block-access-to-metadata-server-with-np",level:2}];function i(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"cloud-platform-node-metadata",children:"Cloud Platform Node Metadata"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"metadata service run by provider (not accessible by us)"}),"\n",(0,n.jsx)(t.li,{children:"VMs can reach it"}),"\n",(0,n.jsx)(t.li,{children:"can contain cloud credentials for vms/nodes"}),"\n",(0,n.jsx)(t.li,{children:"can contain kubelet creds"}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"access-sensitive-node-metadata",children:"Access sensitive Node Metadata"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"outside scope of k8s, but the cloud accounts where instance running needs correct permissions."}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"restrict-access-using-networkpolicies",children:"Restrict access using NetworkPolicies"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"default config, pods can talk to meta-data service"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"calling GCP meta-data server"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:'https://cloud.google.com/compute/docs/storing-retrieving-metadata\n\n# from master node\nroot@cks-master:~# curl "http://metadata.google.internal/computeMetadata/v1/instance/disks/" -H "Metadata-Flavor: Google"\n0/\n\n# from pod\nroot@cks-master:~# k exec pod/pod1 -it -- bash\nroot@pod1:/# curl "http://metadata.google.internal/computeMetadata/v1/instance/disks/" -H "Metadata-Flavor: Google"\n0/\nroot@pod1:/# \n'})}),"\n",(0,n.jsx)(t.h2,{id:"block-access-to-metadata-server-with-np",children:"block access to metadata server with NP"}),"\n",(0,n.jsxs)(t.p,{children:["grab policies from ",(0,n.jsx)(t.a,{href:"https://github.com/killer-sh/cks-course-environment/tree/master/course-content/cluster-setup/protect-node-metadata",children:"cks-github"})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"# all pods in namespace cannot access metadata endpoint\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: cloud-metadata-deny\n  namespace: default\nspec:\n  podSelector: {}\n  policyTypes:\n  - Egress\n  egress:\n  - to:\n    - ipBlock:\n        cidr: 0.0.0.0/0\n        except:\n        - 169.254.169.254/32\n"})}),"\n",(0,n.jsxs)(t.p,{children:["allow all egress, except metadata server ",(0,n.jsx)(t.code,{children:"169.254.169.254/32"})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"# only pods with label are allowed to access metadata endpoint\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: cloud-metadata-allow\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      role: metadata-accessor\n  policyTypes:\n  - Egress\n  egress:\n  - to:\n    - ipBlock:\n        cidr: 169.254.169.254/32\n"})}),"\n",(0,n.jsxs)(t.p,{children:["for all pods labeled ",(0,n.jsx)(t.code,{children:"metadata-accessor"}),", going Egress, allowed to metadata-server ",(0,n.jsx)(t.code,{children:"169.254.169.254/32"})]}),"\n",(0,n.jsxs)(t.p,{children:["make sure to label your pods with this using ",(0,n.jsx)(t.code,{children:"k label pod nginx role=metadata-accessor"})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Note"}),": use BOTH policies to a) have a default-deny and THEN b) allow for labeled pods ONLY."]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(i,{...e})}):i(e)}}}]);