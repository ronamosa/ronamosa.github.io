"use strict";(self.webpackChunkronamosa_github_io=self.webpackChunkronamosa_github_io||[]).push([[2043],{28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var o=r(96540);const t={},s=o.createContext(t);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(s.Provider,{value:n},e.children)}},55534:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"archive/terraform-aws-ec2/2018-04-02-Terraform-AWS-EC2-Deployment-Part1","title":"Part 1 - Accounts, Single Deployment","description":"I found myself wanting to convert a cloudformation config file to terraform and realised I haven\'t worked with terraform before.","source":"@site/docs/archive/terraform-aws-ec2/2018-04-02-Terraform-AWS-EC2-Deployment-Part1.md","sourceDirName":"archive/terraform-aws-ec2","slug":"/archive/terraform-aws-ec2/terraform-aws-1","permalink":"/docs/archive/terraform-aws-ec2/terraform-aws-1","draft":false,"unlisted":false,"editUrl":"https://github.com/ronamosa/ronamosa.github.io/edit/main/website/docs/archive/terraform-aws-ec2/2018-04-02-Terraform-AWS-EC2-Deployment-Part1.md","tags":[],"version":"current","lastUpdatedBy":"Ron Amosa","lastUpdatedAt":1758526302000,"frontMatter":{"slug":"terraform-aws-1","title":"Part 1 - Accounts, Single Deployment"},"sidebar":"docsSidebar","previous":{"title":"Part 3 - NGINX SSL Frontend, Docker Compose and Demo.","permalink":"/docs/archive/docker-wordpress/docker-wordpress-3"},"next":{"title":"Part 2 - Clusters, Launch Config, Auto-Scaling Groups.","permalink":"/docs/archive/terraform-aws-ec2/terraform-aws-2"}}');var t=r(74848),s=r(28453);const a={slug:"terraform-aws-1",title:"Part 1 - Accounts, Single Deployment"},i=void 0,c={},l=[{value:"Setup",id:"setup",level:2},{value:"AWS Account",id:"aws-account",level:3},{value:"Install Terraform",id:"install-terraform",level:3},{value:"Initialize Terraform",id:"initialize-terraform",level:3},{value:"A Single Instance Deployment",id:"a-single-instance-deployment",level:2},{value:"Terraform Plan",id:"terraform-plan",level:3},{value:"Terraform Apply",id:"terraform-apply",level:3},{value:"Update plan and re-apply",id:"update-plan-and-re-apply",level:3},{value:"Deploy a Single Web Server",id:"deploy-a-single-web-server",level:2},{value:"outputs.tf",id:"outputstf",level:3},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"I found myself wanting to convert a cloudformation config file to terraform and realised I haven't worked with terraform before."}),"\n",(0,t.jsx)(n.p,{children:"So let's fix that by finding a beginner's guide to getting your hands dirty with Terrafom."}),"\n",(0,t.jsxs)(n.p,{children:["I found and started following @gruntwork's ",(0,t.jsx)(n.a,{href:"https://blog.gruntwork.io/an-introduction-to-terraform-f17df9c6d180",children:'"Introduction to Terraform"'}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Admittedly its from 2016 and was bit outdated, but I was already halfway through it before I checked how current it was :)"}),"\n",(0,t.jsxs)(n.p,{children:["No matter, learning is learning so here are my notes getting started with ",(0,t.jsx)(n.a,{href:"https://www.terraform.io",children:"Terraform"})," from my laptop."]}),"\n",(0,t.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,t.jsx)(n.p,{children:"Before you can do anything, you need the following"}),"\n",(0,t.jsx)(n.admonition,{title:"Pre-requisites",type:"info",children:(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"AWS account"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"iam"})," user with limited permissions (",(0,t.jsx)(n.code,{children:"AmazonEC2FullAccess"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"AWS_SECRET_KEY"})," and ",(0,t.jsx)(n.code,{children:"AWS_ACCESS_KEY"})," of your iam user"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"terraform"})," installed"]}),"\n"]})}),"\n",(0,t.jsx)(n.h3,{id:"aws-account",children:"AWS Account"}),"\n",(0,t.jsx)(n.p,{children:"Setup your AWS user account"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["you need programmatic access","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["download the credentials.csv with your ",(0,t.jsx)(n.code,{children:"KEY"})," and ",(0,t.jsx)(n.code,{children:"SECRET"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["minimum '",(0,t.jsx)(n.code,{children:"AmazonEC2FullAccess"}),"' permissions"]}),"\n",(0,t.jsx)(n.li,{children:"DONT use your root account, create another user account with min. privileges to play around with."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"install-terraform",children:"Install Terraform"}),"\n",(0,t.jsx)(n.p,{children:"make sure you've got terraform installed"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ terraform\nUsage: terraform [--version] [--help] <command /> [args]\n\nThe available commands for execution are listed below.\nThe most common, useful commands are shown first, followed by\nless common or more advanced commands. If you're just getting\nstarted with Terraform, stick with the common commands. For the\nother commands, please read the help and docs before usage.\n\nCommon commands:\n    apply              Builds or changes infrastructure\n    console            Interactive console for Terraform interpolations\n    destroy            Destroy Terraform-managed infrastructure\n"})}),"\n",(0,t.jsx)(n.h3,{id:"initialize-terraform",children:"Initialize Terraform"}),"\n",(0,t.jsxs)(n.p,{children:["If you've never run terraform before you will probably need to run ",(0,t.jsx)(n.code,{children:"terraform init"})," in the folder you're working in so terraform can pull down any plugins it needs for your particular project"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'$ terraform init\n\nInitializing provider plugins...\n- Checking for available provider plugins on https://releases.hashicorp.com...\n- Downloading plugin for provider "aws" (1.13.0)...\n\nThe following providers do not have any version constraints in configuration,\nso the latest version was installed.\n\nTo prevent automatic upgrades to new major versions that may contain breaking\nchanges, it is recommended to add version = "..." constraints to the\ncorresponding provider blocks in configuration, with the constraint strings\nsuggested below.\n\n* provider.aws: version = "~> 1.13"\n\nTerraform has been successfully initialized!\n\nYou may now begin working with Terraform. Try running "terraform plan" to see\nany changes that are required for your infrastructure. All Terraform commands\nshould now work.\n\nIf you ever set or change modules or backend configuration for Terraform,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.\n'})}),"\n",(0,t.jsx)(n.p,{children:"otherwise you'll get this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'$ terraform plan\nPlugin reinitialization required. Please run "terraform init".\nReason: Could not satisfy plugin requirements.\n\nPlugins are external binaries that Terraform uses to access and manipulate\nresources. The configuration provided requires plugins which can\'t be located,\ndon\'t satisfy the version constraints, or are otherwise incompatible.\n\n1 error(s) occurred:\n\n* provider.aws: no suitable version installed\n  version requirements: "(any version)"\n  versions installed: none\n\nTerraform automatically discovers provider requirements from your\nconfiguration, including providers used in child modules. To see the\nrequirements and constraints from each module, run "terraform providers".\n\n\nError: error satisfying plugin requirements\n'})}),"\n",(0,t.jsx)(n.h2,{id:"a-single-instance-deployment",children:"A Single Instance Deployment"}),"\n",(0,t.jsxs)(n.p,{children:["Create a file named ",(0,t.jsx)(n.code,{children:"main.tf"})," with this in it:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'provider "aws" {\n  access_key = "$\\{var.access_key}"\n  secret_key = "$\\{var.secret_key}"\n  region     = "$\\{var.region}"\n}\n\nresource "aws_instance" "single" {\n  ami = "ami-2d39803a"\n  instance_type = "t2.micro"\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"terraform-plan",children:"Terraform Plan"}),"\n",(0,t.jsxs)(n.p,{children:["Run ",(0,t.jsx)(n.code,{children:"terraform plan"})," to check what you're intending to provision"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'$ terraform plan\nRefreshing Terraform state in-memory prior to plan...\nThe refreshed state will be used to calculate this plan, but will not be\npersisted to local or remote state storage.\n\n\n------------------------------------------------------------------------\n\nAn execution plan has been generated and is shown below.\nResource actions are indicated with the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  + aws_instance.example\n      id:                           <computed />\n      ami:                          "ami-2d39803a"\n      associate_public_ip_address:  <computed />\n      availability_zone:            <computed />\n      ebs_block_device.#:           <computed />\n      ephemeral_block_device.#:     <computed />\n      get_password_data:            "false"\n      instance_state:               <computed />\n      instance_type:                "t2.micro"\n      ipv6_address_count:           <computed />\n      ipv6_addresses.#:             <computed />\n      key_name:                     <computed />\n      network_interface.#:          <computed />\n      network_interface_id:         <computed />\n      password_data:                <computed />\n      placement_group:              <computed />\n      primary_network_interface_id: <computed />\n      private_dns:                  <computed />\n      private_ip:                   <computed />\n      public_dns:                   <computed />\n      public_ip:                    <computed />\n      root_block_device.#:          <computed />\n      security_groups.#:            <computed />\n      source_dest_check:            "true"\n      subnet_id:                    <computed />\n      tenancy:                      <computed />\n      volume_tags.%:                <computed />\n      vpc_security_group_ids.#:     <computed />\n\n\nPlan: 1 to add, 0 to change, 0 to destroy.\n\n------------------------------------------------------------------------\n\nNote: You didn\'t specify an "-out" parameter to save this plan, so Terraform\ncan\'t guarantee that exactly these actions will be performed if\n"terraform apply" is subsequently run.\n'})}),"\n",(0,t.jsx)(n.h3,{id:"terraform-apply",children:"Terraform Apply"}),"\n",(0,t.jsxs)(n.p,{children:["Now run ",(0,t.jsx)(n.code,{children:"terraform apply"})," to deploy our config"]}),"\n",(0,t.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube-nocookie.com/embed/eaZK8k095Gc?rel=0&controls=0&showinfo=0",frameBorder:"0",allow:"autoplay; encrypted-media",allowFullScreen:!0}),"\n",(0,t.jsx)(n.p,{children:"login to your AWS GUI console and see a new EC2 is now up & running"}),"\n",(0,t.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube-nocookie.com/embed/KNLv1uw72Zk?rel=0&controls=0&showinfo=0",frameBorder:"0",allow:"autoplay; encrypted-media",allowFullScreen:!0}),"\n",(0,t.jsx)(n.h3,{id:"update-plan-and-re-apply",children:"Update plan and re-apply"}),"\n",(0,t.jsx)(n.p,{children:"You can update your terraform plan on the fly, and push changes out pretty easily. For example adding the 'tags' section below."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'provider "aws" {\n  access_key = "$\\{var.access_key}"\n  secret_key = "$\\{var.secret_key}"\n  region     = "$\\{var.region}"\n}\n\nresource "aws_instance" "single" {\n  ami = "ami-2d39803a"\n  instance_type = "t2.micro"\n\n  tags {\n    Name = "single"\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["re-run ",(0,t.jsx)(n.code,{children:"terraform plan"})," and then ",(0,t.jsx)(n.code,{children:"terraform apply"}),"."]}),"\n",(0,t.jsx)(n.p,{children:'check your AWS GUI and your EC2 instance should now have a new tag "Name=single".'}),"\n",(0,t.jsx)(n.h2,{id:"deploy-a-single-web-server",children:"Deploy a Single Web Server"}),"\n",(0,t.jsx)(n.p,{children:"Building on the single server config, we now deploy a single web server with a set-up-webserver one-liner."}),"\n",(0,t.jsxs)(n.p,{children:["Change your ",(0,t.jsx)(n.code,{children:"main.tf"})," to add the ",(0,t.jsx)(n.code,{children:"user_data"})," section like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'resource "aws_instance" "web-1" {\n  ami = "ami-2d39803a"\n  instance_type = "t2.micro"\n\n  user_data = <<-EOF\n              #!/bin/bash\n              echo "Hello, World" > index.html\n              nohup busybox httpd -f -p 8080 &\n              EOF\n  tags {\n    Name = "single-web"\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["the ",(0,t.jsx)(n.code,{children:"user_data"})," section of an AMI bootup is where you bootstrap your EC2 instances with things you want it to provision on boot or startup."]}),"\n",(0,t.jsx)(n.p,{children:"By default AWS does not allow any inbound or outbound traffic to EC2, so we need to create a security group to allow this to enable us to connect to the web server:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"option 1:"})}),"\n",(0,t.jsx)(n.p,{children:"static config hard-coded in"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'resource "aws_security_group" "ec2-web" {\n  name = "EC2WebSG"\n  ingress {\n    from_port = 8080\n    to_port = 8080\n    protocol = "tcp"\n    cidr_blocks = ["0.0.0.0/0"]\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"option 2:"})}),"\n",(0,t.jsx)(n.p,{children:"abstract out the vars and refer to them instead"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'resource "aws_security_group" "ec2-web" {\n  name = "EC2WebSG"\n  ingress {\n    from_port = $\\{var.inbound_port}\n    to_port = $\\{var.inbound_port}\n    protocol = "tcp"\n    cidr_blocks = ["0.0.0.0/0"]\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["and add the following to your ",(0,t.jsx)(n.code,{children:"variables.tf"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'variable "inbound_port" {\n  description = "The port the server will use for HTTP requests"\n  default = 8080\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Now you need to just change your EC2 ",(0,t.jsx)(n.code,{children:"user_data"})," to use the new security group (i.e. ",(0,t.jsx)(n.code,{children:"aws_security_group"}),")"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'resource "aws_instance" "web-1" {\n  ami = "ami-2d39803a"\n  instance_type = "t2.micro"\n  vpc_security_group_ids = ["$\\{aws_security_group.instance.id}"]\n\n  user_data = <<-EOF\n              #!/bin/bash\n              echo "Hello, World" > index.html\n              nohup busybox httpd -f -p 8080 &\n              EOF\n  tags {\n    Name = "single-web"\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["run ",(0,t.jsx)(n.code,{children:"terraform plan"}),", see what we're changing:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'Terraform will perform the following actions:\n\n  ~ aws_instance.web-1\n      vpc_security_group_ids.#:             "" => <computed />\n\n  + aws_security_group.instance\n      id:                                   <computed />\n      arn:                                  <computed />\n      description:                          "Managed by Terraform"\n      egress.#:                             <computed />\n      ingress.#:                            "1"\n      ingress.516175195.cidr_blocks.#:      "1"\n      ingress.516175195.cidr_blocks.0:      "0.0.0.0/0"\n      ingress.516175195.description:        ""\n      ingress.516175195.from_port:          "8080"\n      ingress.516175195.ipv6_cidr_blocks.#: "0"\n      ingress.516175195.protocol:           "tcp"\n      ingress.516175195.security_groups.#:  "0"\n      ingress.516175195.self:               "false"\n      ingress.516175195.to_port:            "8080"\n      name:                                 "EC2WebSG"\n      owner_id:                             <computed />\n      revoke_rules_on_delete:               "false"\n      vpc_id:                               <computed />\n\n\nPlan: 1 to add, 1 to change, 0 to destroy.\n\n'})}),"\n",(0,t.jsxs)(n.p,{children:["perfect. run it (",(0,t.jsx)(n.code,{children:"'terraform apply'"}),")"]}),"\n",(0,t.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube-nocookie.com/embed/se7Rlgg8MAE?rel=0&controls=0&showinfo=0",frameBorder:"0",allow:"autoplay; encrypted-media",allowFullScreen:!0}),"\n",(0,t.jsx)(n.h3,{id:"outputstf",children:"outputs.tf"}),"\n",(0,t.jsxs)(n.p,{children:["handy way to get the public_ip of our ",(0,t.jsx)(n.code,{children:"web-1"})," instance, add a new file ",(0,t.jsx)(n.code,{children:"outputs.tf"})," to your directory."]}),"\n",(0,t.jsx)(n.p,{children:"put this in it:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'output "public_ip" {\n  value = "$\\{aws_instance.web-1.public_ip}"\n}\n\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"note: make sure the part in between 'aws_instace.' and '.public_ip' matches whatever you've named your EC2 instance to (mine's web-1)."})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"terraform apply"})," will run and grab the public_ip of your instance for you"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:"$ terraform apply\naws_instance.single: Refreshing state... (ID: i-05a82498eb5f3177f)\naws_security_group.instance: Refreshing state... (ID: sg-d53a28a3)\naws_instance.web-1: Refreshing state... (ID: i-095ebd5015036ac62)\n\nApply complete! Resources: 0 added, 0 changed, 0 destroyed.\n\nOutputs:\n\npublic_ip = 54.89.22.195\n"})}),"\n",(0,t.jsxs)(n.p,{children:["have a browse to ",(0,t.jsx)(n.code,{children:"https://54.89.22.195:8080"})," and see the output of the 'index.html' you setup."]}),"\n",(0,t.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube-nocookie.com/embed/SbMS9ZIhWfg?rel=0&controls=0&showinfo=0",frameBorder:"0",allow:"autoplay; encrypted-media",allowFullScreen:!0}),"\n",(0,t.jsx)(n.p,{children:"wow, so this took me a while sorting out a few things as I tried to go through this so we'll leave it there today."}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.a,{href:"terraform-aws-2",children:"Part II"})," we'll deploy a cluster of web servers using Auto Scaling Groups, and fang an Elastic Load Balancer in there as well!"]}),"\n",(0,t.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.terraform.io/docs/configuration/data-sources.html",children:"terraform - data sources"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.terraform.io/intro/getting-started/variables.html",children:"terraform - input variables"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"http://pinter.org/archives/5831",children:"terraform init post"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);