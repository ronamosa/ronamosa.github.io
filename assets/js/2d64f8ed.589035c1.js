"use strict";(self.webpackChunkronamosa_github_io=self.webpackChunkronamosa_github_io||[]).push([[9890],{7052:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"archive/docker-wordpress/2018-05-06-AWS-Docker-Wordpress-Nginx-Ansible-Terraform-Part3","title":"Part 3 - NGINX SSL Frontend, Docker Compose and Demo.","description":"The infrastructure was deployed with Terraform in Part 1. Ansible installed a few things for us in Part 2. And now, the main event - the actual Wordpress site running in docker with an RDS/MySQL backend database.","source":"@site/docs/archive/docker-wordpress/2018-05-06-AWS-Docker-Wordpress-Nginx-Ansible-Terraform-Part3.md","sourceDirName":"archive/docker-wordpress","slug":"/archive/docker-wordpress/docker-wordpress-3","permalink":"/docs/archive/docker-wordpress/docker-wordpress-3","draft":false,"unlisted":false,"editUrl":"https://github.com/ronamosa/ronamosa.github.io/edit/main/website/docs/archive/docker-wordpress/2018-05-06-AWS-Docker-Wordpress-Nginx-Ansible-Terraform-Part3.md","tags":[],"version":"current","lastUpdatedBy":"Ron Amosa","lastUpdatedAt":1758526302000,"frontMatter":{"slug":"docker-wordpress-3","title":"Part 3 - NGINX SSL Frontend, Docker Compose and Demo."},"sidebar":"docsSidebar","previous":{"title":"Part 2 - Provision with Ansible","permalink":"/docs/archive/docker-wordpress/docker-wordpress-2"},"next":{"title":"Part 1 - Accounts, Single Deployment","permalink":"/docs/archive/terraform-aws-ec2/terraform-aws-1"}}');var o=s(74848),t=s(28453);const i={slug:"docker-wordpress-3",title:"Part 3 - NGINX SSL Frontend, Docker Compose and Demo."},d=void 0,a={},l=[{value:"NGINX",id:"nginx",level:2},{value:"default.conf",id:"defaultconf",level:3},{value:"What&#39;s going on here?",id:"whats-going-on-here",level:3},{value:"DOCKER COMPOSE",id:"docker-compose",level:2},{value:"Key Points",id:"key-points",level:3},{value:"Live Demo",id:"live-demo",level:2},{value:"Appendix",id:"appendix",level:2},{value:"create self-signed certs (linux)",id:"create-self-signed-certs-linux",level:3},{value:"cleaner, tidier future",id:"cleaner-tidier-future",level:3}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["The infrastructure was deployed with Terraform in ",(0,o.jsx)(n.a,{href:"docker-wordpress-1",children:"Part 1"}),". Ansible installed a few things for us in ",(0,o.jsx)(n.a,{href:"docker-wordpress-2",children:"Part 2"}),". And now, the main event - the actual Wordpress site running in docker with an RDS/MySQL backend database."]}),"\n",(0,o.jsx)(n.p,{children:"Here's a diagram of the 3 components that are going to be working together:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"diagram of app",src:s(75672).A+"",width:"482",height:"809"})}),"\n",(0,o.jsx)(n.h2,{id:"nginx",children:"NGINX"}),"\n",(0,o.jsx)(n.p,{children:"NGINX is doing the SSL termination (i.e. the handshake with your browser) and reverse proxying connections from the frontend to the wordpress service out the backend. So in a simple setup, its the most complicated bit of the 3."}),"\n",(0,o.jsx)(n.p,{children:"in your nginx/ folder"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"nginx.conf\nconf.d/default.conf\ncerts/self-signed.cert\ncerts/self-signed.key\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"nginx.conf"})," file is pretty stock standard, so we'll have a look at the other files."]}),"\n",(0,o.jsx)(n.h3,{id:"defaultconf",children:"default.conf"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"server {\n    listen            80;\n    listen       [::]:80;\n    server_name  www.mywordpress.local;\n\n    location / {\n      access_log off;\n      return 301 https://$server_name$request_uri;\n    }\n}\n\nserver {\n\n    listen            443 ssl;\n    listen       [::]:443 ssl;\n\n    server_name  www.mywordpress.local;\n\n    access_log   /var/log/nginx/wordpress-443-access.log main;\n    error_log\t\t /var/log/nginx/wordpress-443-error.log debug;\n\n    ssl\t\t\t\ton;\n    ssl_certificate\t\t/etc/nginx/my_wpress_site.cert;\n    ssl_certificate_key\t\t/etc/nginx/my_wpress_site.key;\n\n    location / {\n        proxy_pass http://wordpress;\n        proxy_redirect        off;\n\n        proxy_read_timeout    90;\n        proxy_connect_timeout 90;\n\n        proxy_set_header      Host $host;\n        proxy_set_header      X-Real-IP $remote_addr;\n        proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header      X-Forwarded-Host $server_name;\n        proxy_set_header      X-Forwarded-Proto https;\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"whats-going-on-here",children:"What's going on here?"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"requests to port 80 get redirected (301) to 443 (HTTPS)"}),"\n",(0,o.jsx)(n.li,{children:"ssl cert and key locations are defined"}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"proxy_pass"})," points to our wordpress container"]}),"\n",(0,o.jsx)(n.li,{children:"proxy headers set accordingly - dont know the specifics exactly you'll have to look these up :)"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"docker-compose",children:"DOCKER COMPOSE"}),"\n",(0,o.jsx)(n.p,{children:"The almighty docker-compose file. Now that the NGINX files are accounted for the docker-compose is going to bring all 3 components together in container harmony."}),"\n",(0,o.jsxs)(n.p,{children:["We're going to pull down ",(0,o.jsx)(n.code,{children:"wordpress:latest"})," and ",(0,o.jsx)(n.code,{children:"nginx:latest"})," for their respective containers. The wordpress container is setup with environment variables to start itself up with (e.g. WORDPRESS_DB_HOST) so it can find the database and login succesfully."]}),"\n",(0,o.jsxs)(n.p,{children:["your ",(0,o.jsx)(n.code,{children:"docker-compose.yml"})," file"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yml",children:'version: \'2\'\nservices:\n  wordpress:\n  image: wordpress:latest\n  volumes:\n    - wordpress:/var/www/html/\n  restart: unless-stopped\n  environment:\n    WORDPRESS_DB_HOST: "wordpressdb.crxppkxndbvw.us-east-1.rds.amazonaws.com:3306"\n    WORDPRESS_DB_USER: wpress\n    WORDPRESS_DB_PASSWORD: wpress_247x\n    WORDPRESS_DB_NAME: rds_mysql\n  nginx:\n  image: nginx:latest\n  volumes:\n    - nginx:/etc/nginx/conf.d\n    - logs:/var/log/nginx\n ports:\n    - "80:80"\n    - "443:443"\n  depends_on:\n    - wordpress\n  links:\n    - wordpress\n  restart: unless-stopped\n\nvolumes:\n  wordpress:\n  nginx:\n  logs:\n'})}),"\n",(0,o.jsx)(n.h3,{id:"key-points",children:"Key Points"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"wordpress environment variables define the RDS database to connect to (and creds)"}),"\n",(0,o.jsx)(n.li,{children:"uses named volumes for both containers*"}),"\n",(0,o.jsx)(n.li,{children:"nginx exposes ports 80, 443"}),"\n",(0,o.jsx)(n.li,{children:"nginx 'depends on' wordpress so wordpress needs to be up before nginx gets launched"}),"\n",(0,o.jsx)(n.li,{children:"links means nginx can always find wordpress post-restarts"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Now, the thing with this compose file is:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"it works but"}),"\n",(0,o.jsx)(n.li,{children:"its not complete."}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"What do I mean by this?"})}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Here I'm declaring some named volumes to be used for the containers data to live in (i.e. ",(0,o.jsx)(n.code,{children:"nginx:/etc/nginx/conf.d"})," - the 'nginx:' bit). But you have to create these first, and then put the nginx files in it that map to ",(0,o.jsx)(n.code,{children:"/etc/nginx/conf.d"})," i.e. the ",(0,o.jsx)(n.code,{children:"default.conf"})," file."]}),"\n",(0,o.jsxs)(n.p,{children:["I need to mount the nginx ",(0,o.jsx)(n.code,{children:"logs"})," volume on the nginx container so I can work with the containers logs on the host instead of ",(0,o.jsx)(n.code,{children:"docker logs -f CONTAINER"})," or having to exec into the container to look at logs."]}),"\n",(0,o.jsx)(n.h2,{id:"live-demo",children:"Live Demo"}),"\n",(0,o.jsx)(n.p,{children:"actually, I was going to do a live demo here and stand up my AWS infra and deploy the wordpress-nginx-rds setup, but I've already spent so much time on this I don't think another video's going to add that much value :))"}),"\n",(0,o.jsx)(n.p,{children:"What I will leave you with though is the working set of files for the same setup, but with a MySQL database backend. The docker-compose file creates 3 containers, whereas the AWS version is 2 containers and backend database. Either way, knock yourself out and if you have any questions feel free to hit me up."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/ronamosa/docker-wordpress-nginx-ssl-mysql",children:"Docker Wordpress NGINX SSL & MySQL"})}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"That's it! Thanks for following along and hope you learned a little something about making super complicated setups unnecessarily. kidding. Hope you had fun playing with a bit of everything :))"}),"\n",(0,o.jsx)(n.h2,{id:"appendix",children:"Appendix"}),"\n",(0,o.jsx)(n.p,{children:"Just noting here some things that might come in handy later"}),"\n",(0,o.jsx)(n.h3,{id:"create-self-signed-certs-linux",children:"create self-signed certs (linux)"}),"\n",(0,o.jsx)(n.p,{children:"just for testing purposes so the rest of your configs are created the 'SSL' way:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"sudo openssl req -new > my_wpress_site.csr\nsudo openssl rsa -in privkey.pem -out my_wpress_site.key\nsudo openssl x509 -in my_wpress_site.csr -out my_wpress_site.cert -req -signkey my_wpress_site.key -days 360\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"There's a few things to enter as you run these commands e.g. passphrases for the private key (remember these if you want to re-use the private key for anything)."})})}),"\n",(0,o.jsx)(n.h3,{id:"cleaner-tidier-future",children:"cleaner, tidier future"}),"\n",(0,o.jsx)(n.p,{children:"better practice, use 'named volumes' for your mounts so that sections like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yml",children:"volumes:\n  - wordpress:/var/www/html/\n"})}),"\n",(0,o.jsx)(n.p,{children:"will have a tidy looking volume like this:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"/var/lib/docker/volumes/wordpress/_data"})}),"\n",(0,o.jsx)(n.p,{children:"maybe next time!"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"fyi you can create your volumes like so:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"$ docker create volume wordpress\n$ docker create volume nginx\n$ docker create volume logs\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>d});var r=s(96540);const o={},t=r.createContext(o);function i(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(t.Provider,{value:n},e.children)}},75672:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/DockerWordpressNginxRDS-3f4d1bcb40d8f7318ca09364db293801.png"}}]);