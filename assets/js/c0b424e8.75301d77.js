"use strict";(self.webpackChunkronamosa_github_io=self.webpackChunkronamosa_github_io||[]).push([[3777],{28453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>s});var t=a(96540);const r={},o=t.createContext(r);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(o.Provider,{value:n},e.children)}},82582:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"archive/terraform-aws-ec2/2018-04-07-Terraform-AWS-EC2-Deployment-Part2","title":"Part 2 - Clusters, Launch Config, Auto-Scaling Groups.","description":"Over in Part I you\'ll learn why I found myself wanting to learn a few basics of Terraform.","source":"@site/docs/archive/terraform-aws-ec2/2018-04-07-Terraform-AWS-EC2-Deployment-Part2.md","sourceDirName":"archive/terraform-aws-ec2","slug":"/archive/terraform-aws-ec2/terraform-aws-2","permalink":"/docs/archive/terraform-aws-ec2/terraform-aws-2","draft":false,"unlisted":false,"editUrl":"https://github.com/ronamosa/ronamosa.github.io/edit/main/website/docs/archive/terraform-aws-ec2/2018-04-07-Terraform-AWS-EC2-Deployment-Part2.md","tags":[],"version":"current","lastUpdatedBy":"Ron Amosa","lastUpdatedAt":1758526302000,"frontMatter":{"slug":"terraform-aws-2","title":"Part 2 - Clusters, Launch Config, Auto-Scaling Groups."},"sidebar":"docsSidebar","previous":{"title":"Part 1 - Accounts, Single Deployment","permalink":"/docs/archive/terraform-aws-ec2/terraform-aws-1"},"next":{"title":"Part 3 - Demos, Testing and Healthchecks.","permalink":"/docs/archive/terraform-aws-ec2/terraform-aws-3"}}');var r=a(74848),o=a(28453);const i={slug:"terraform-aws-2",title:"Part 2 - Clusters, Launch Config, Auto-Scaling Groups."},s=void 0,c={},l=[{value:"Deploy a cluster",id:"deploy-a-cluster",level:2},{value:"Launch Configuration",id:"launch-configuration",level:2},{value:"Auto Scaling Group Configuration",id:"auto-scaling-group-configuration",level:2},{value:"Add a Elastic Load Balancer",id:"add-a-elastic-load-balancer",level:2},{value:"Update Security Groups : Add ELB to the group",id:"update-security-groups--add-elb-to-the-group",level:2},{value:"Update Load Balancer Security Group",id:"update-load-balancer-security-group",level:2},{value:"Run the Terraform Plan",id:"run-the-terraform-plan",level:2},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Over in ",(0,r.jsx)(n.a,{href:"terraform-aws-1",children:"Part I"})," you'll learn why I found myself wanting to learn a few basics of ",(0,r.jsx)(n.a,{href:"https://www.terraform.io/docs/providers/aws/",children:"Terraform"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["I'm using @gruntwork's ",(0,r.jsx)(n.a,{href:"https://blog.gruntwork.io/an-introduction-to-terraform-f17df9c6d180",children:'"Introduction to Terraform"'})," because it's clearly written and has nice pictures to go with it."]})}),"\n",(0,r.jsx)(n.p,{children:"Continuing..."}),"\n",(0,r.jsx)(n.h2,{id:"deploy-a-cluster",children:"Deploy a cluster"}),"\n",(0,r.jsx)(n.p,{children:"A single server is a \"single point of failure\". Solution? Hit it with the 'cluster' stick. Basically deploy a cluster so if one server dies, your site or application will survive."}),"\n",(0,r.jsx)(n.p,{children:"There's a few ways to look at 'clustering', these are the 2 that come to mind:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"EC2's managed by AWS 'Auto Scaling Groups'"}),"\n",(0,r.jsx)(n.li,{children:"Docker Containers managed by Swarm (a post for another time)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"We could get into a long discussion over a bunch of relevant things, but this really isn't the time for that - this is a post of my 'learning Terraform' notes."}),"\n",(0,r.jsx)(n.p,{children:"So, we will configure the following:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A launch configuration"}),"\n",(0,r.jsx)(n.li,{children:"AWS Auto Scaling Group"}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"I'm doing things a little differently to gruntwork's blog, for ease of understanding and clarity around what config is being worked I split these blocks of config out into separate files. Makes it easier to separate how each logical block sort of works. For me anyway."})}),"\n",(0,r.jsx)(n.h2,{id:"launch-configuration",children:"Launch Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["filename: ",(0,r.jsx)(n.code,{children:"launch.configuration.tf"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-hcl",children:'# launch configuration\n\nresource "aws_launch_configuration" "LaunchConfiguration" {\n  image_id = "ami-2d39803a"\n  instance_type = "t2.micro"\n  security_groups = ["$\\{aws_security_group.instance.id}"]\n  user_data = <<-EOF\n              #!/bin/bash\n              echo "<h1 />CLUSTER: AUTOSCALING GROUPS INSTANCE</h1>" > index.html\n              nohup busybox httpd -f -p "$\\{var.inbound_port}" &\n              EOF\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"key point for this config:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"its just like the EC2 instance config block we've already done"}),"\n",(0,r.jsxs)(n.li,{children:["only adds ",(0,r.jsx)(n.code,{children:"lifecycle"})," block which is required for ASG."]}),"\n",(0,r.jsxs)(n.li,{children:["note ",(0,r.jsx)(n.code,{children:"create_before_destroy"})," enabled here, means it needs to be enabled everywhere 'here' depends on i.e. security groups."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"That's it."}),"\n",(0,r.jsx)(n.h2,{id:"auto-scaling-group-configuration",children:"Auto Scaling Group Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["filename: ",(0,r.jsx)(n.code,{children:"auto.scaling.group.tf"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-hcl",children:'# declare the data source for AZ\'s\n\ndata "aws_availability_zones" "available" {}\n\n# autoscaling group configuration\n\nresource "aws_autoscaling_group" "AutoScalingGroup" {\n  launch_configuration = "$\\{aws_launch_configuration.LaunchConfiguration.id}"\n  availability_zones = ["$\\{data.aws_availability_zones.available.names}"]\n  min_size = 2\n  max_size = 10\n  tag {\n    key = "Name"\n    value = "ASG_EC2-Insance"\n    propagate_at_launch = true\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"key points for this config:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["the ",(0,r.jsx)(n.code,{children:"data"})," setup for availability zones needs to be declared first before you can refer to it."]}),"\n",(0,r.jsxs)(n.li,{children:["the ",(0,r.jsx)(n.a,{href:"https://www.terraform.io/docs/providers/aws/d/availability_zones.html",children:"terraform availability zones docs"})," is a good source of info."]}),"\n",(0,r.jsx)(n.li,{children:'make sure your namespaces (probably using this term wrong - but it feels right) "available" lines up with "available.names" i.e. if you use "all" then it will be "all.names".'}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"You've now got a configuration with multiple nodes/destinations. We can't have that."}),"\n",(0,r.jsx)(n.p,{children:"We need a Load Balancer in front of this configuration to be a single point that distributes the load across the cluster. You need a Load Balancer."}),"\n",(0,r.jsx)(n.h2,{id:"add-a-elastic-load-balancer",children:"Add a Elastic Load Balancer"}),"\n",(0,r.jsxs)(n.p,{children:["filename: ",(0,r.jsx)(n.code,{children:"elastic.load.balancer.tf"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-hcl",children:'resource "aws_elb" "ElasticLoadBalancer" {\n  name = "ELBAutoScalingGroup"\n  availability_zones = ["$\\{data.aws_availability_zones.available.names}"]\n  listener {\n    lb_port = 80\n    lb_protocol = "http"\n    instance_port = "$\\{var.inbound_port}"\n    instance_protocol = "http"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"key points for this config:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"keep the 'name' shorter than 32 characters, or you get this"}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{title:"Error",type:"danger",children:(0,r.jsx)(n.p,{children:'Error: aws_elb.elastic_load_balancer: "name" cannot be longer than 32 characters: "ElasticLoadBalancerAutoScalingGroup"'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["also needs the ",(0,r.jsx)(n.code,{children:"data"})," availability zones reference"]}),"\n",(0,r.jsx)(n.li,{children:"port 80, no SSL (yet)"}),"\n",(0,r.jsxs)(n.li,{children:["make sure the ",(0,r.jsx)(n.code,{children:'"$\\{var}"'})," values match variables.tf"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The new ELB is a hop in our network path between CLIENT/USER and SERVER/SERVICE. What does this mean? It means security-wise we need to add another security group. ",(0,r.jsx)(n.a,{href:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html#security-group-rules",children:"AWS Security Groups"})," are how inbound and outbound rules are permitted for instances."]}),"\n",(0,r.jsx)(n.h2,{id:"update-security-groups--add-elb-to-the-group",children:"Update Security Groups : Add ELB to the group"}),"\n",(0,r.jsxs)(n.p,{children:["Just add another ",(0,r.jsx)(n.code,{children:"aws_security_groups"})," for the ELB (below)."]}),"\n",(0,r.jsxs)(n.p,{children:["filename: ",(0,r.jsx)(n.code,{children:"security.groups.tf"})," now looks like this"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-hcl",children:'# ec2 security group\n\nresource "aws_security_group" "instance" {\n  name = "EC2WebSG"\n  ingress {\n    from_port = "$\\{var.inbound_port}"\n    to_port = "$\\{var.inbound_port}"\n    protocol = "tcp"\n    cidr_blocks = ["0.0.0.0/0"]\n  }\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n\n# elb security group\n\nresource "aws_security_group" "ELBSecurityGroup" {\n  name = "ELBSecurityGroup1"\n  ingress {\n    from_port = 80\n    to_port = 80\n    protocol = "tcp"\n    cidr_blocks = ["0.0.0.0/0"]\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"key points on this config:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"nothing new here.. carry on."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"update-load-balancer-security-group",children:"Update Load Balancer Security Group"}),"\n",(0,r.jsx)(n.p,{children:"Make sure your ELB is now using this Security Group so it can be allowed network access where it needs to go"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-hcl",children:'resource "aws_elb" "ElasticLoadBalancer" {\n  name = "ELBAutoScalingGroup"\n\n  security_groups = ["$\\{aws_security_group.ELBSecurityGroup.id}"]\n\n  availability_zones = ["$\\{data.aws_availability_zones.available.names}"]\n  listener {\n    lb_port = 80\n    lb_protocol = "http"\n    instance_port = "$\\{var.inbound_port}"\n    instance_protocol = "http"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"run-the-terraform-plan",children:"Run the Terraform Plan"}),"\n",(0,r.jsxs)(n.p,{children:["Right, now that all the configuration is in place, let's run ",(0,r.jsx)(n.code,{children:"terraform plan"})," to see if TF is all happy with what we're trying to achieve here:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'$ terraform plan\nRefreshing Terraform state in-memory prior to plan...\nThe refreshed state will be used to calculate this plan, but will not be\npersisted to local or remote state storage.\n\ndata.aws_availability_zones.available: Refreshing state...\n\n------------------------------------------------------------------------\n\nAn execution plan has been generated and is shown below.\nResource actions are indicated with the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  + aws_autoscaling_group.AutoScalingGroup\n      id:                                     <computed />\n      arn:                                    <computed />\n      availability_zones.#:                   "6"\n      availability_zones.1252502072:          "us-east-1f"\n      availability_zones.1305112097:          "us-east-1b"\n      availability_zones.2762590996:          "us-east-1d"\n      availability_zones.3551460226:          "us-east-1e"\n      availability_zones.3569565595:          "us-east-1a"\n      availability_zones.986537655:           "us-east-1c"\n      default_cooldown:                       <computed />\n      desired_capacity:                       <computed />\n      force_delete:                           "false"\n      health_check_grace_period:              "300"\n      health_check_type:                      <computed />\n      launch_configuration:                   "$\\{aws_launch_configuration.LaunchConfiguration.id}"\n      load_balancers.#:                       <computed />\n      max_size:                               "10"\n      metrics_granularity:                    "1Minute"\n      min_size:                               "2"\n      name:                                   <computed />\n      protect_from_scale_in:                  "false"\n      service_linked_role_arn:                <computed />\n      tag.#:                                  "1"\n      tag.2818487965.key:                     "Name"\n      tag.2818487965.propagate_at_launch:     "true"\n      tag.2818487965.value:                   "ASG_EC2-Insance"\n      target_group_arns.#:                    <computed />\n      vpc_zone_identifier.#:                  <computed />\n      wait_for_capacity_timeout:              "10m"\n\n  + aws_elb.ElasticLoadBalancer\n      id:                                     <computed />\n      arn:                                    <computed />\n      availability_zones.#:                   "6"\n      availability_zones.1252502072:          "us-east-1f"\n      availability_zones.1305112097:          "us-east-1b"\n      availability_zones.2762590996:          "us-east-1d"\n      availability_zones.3551460226:          "us-east-1e"\n      availability_zones.3569565595:          "us-east-1a"\n      availability_zones.986537655:           "us-east-1c"\n      connection_draining:                    "false"\n      connection_draining_timeout:            "300"\n      cross_zone_load_balancing:              "true"\n      dns_name:                               <computed />\n      health_check.#:                         <computed />\n      idle_timeout:                           "60"\n      instances.#:                            <computed />\n      internal:                               <computed />\n      listener.#:                             "1"\n      listener.3931999347.instance_port:      "8080"\n      listener.3931999347.instance_protocol:  "http"\n      listener.3931999347.lb_port:            "80"\n      listener.3931999347.lb_protocol:        "http"\n      listener.3931999347.ssl_certificate_id: ""\n      name:                                   "ELBAutoScalingGroup"\n      security_groups.#:                      <computed />\n      source_security_group:                  <computed />\n      source_security_group_id:               <computed />\n      subnets.#:                              <computed />\n      zone_id:                                <computed />\n\n  + aws_instance.SingleEC2\n      id:                                     <computed />\n      ami:                                    "ami-2d39803a"\n      associate_public_ip_address:            <computed />\n      availability_zone:                      <computed />\n      ebs_block_device.#:                     <computed />\n      ephemeral_block_device.#:               <computed />\n      get_password_data:                      "false"\n      instance_state:                         <computed />\n      instance_type:                          "t2.micro"\n      ipv6_address_count:                     <computed />\n      ipv6_addresses.#:                       <computed />\n      key_name:                               <computed />\n      network_interface.#:                    <computed />\n      network_interface_id:                   <computed />\n      password_data:                          <computed />\n      placement_group:                        <computed />\n      primary_network_interface_id:           <computed />\n      private_dns:                            <computed />\n      private_ip:                             <computed />\n      public_dns:                             <computed />\n      public_ip:                              <computed />\n      root_block_device.#:                    <computed />\n      security_groups.#:                      <computed />\n      source_dest_check:                      "true"\n      subnet_id:                              <computed />\n      tags.%:                                 "1"\n      tags.Name:                              "single"\n      tenancy:                                <computed />\n      volume_tags.%:                          <computed />\n      vpc_security_group_ids.#:               <computed />\n\n  + aws_instance.SingleWebEC2\n      id:                                     <computed />\n      ami:                                    "ami-2d39803a"\n      associate_public_ip_address:            <computed />\n      availability_zone:                      <computed />\n      ebs_block_device.#:                     <computed />\n      ephemeral_block_device.#:               <computed />\n      get_password_data:                      "false"\n      instance_state:                         <computed />\n      instance_type:                          "t2.micro"\n      ipv6_address_count:                     <computed />\n      ipv6_addresses.#:                       <computed />\n      key_name:                               <computed />\n      network_interface.#:                    <computed />\n      network_interface_id:                   <computed />\n      password_data:                          <computed />\n      placement_group:                        <computed />\n      primary_network_interface_id:           <computed />\n      private_dns:                            <computed />\n      private_ip:                             <computed />\n      public_dns:                             <computed />\n      public_ip:                              <computed />\n      root_block_device.#:                    <computed />\n      security_groups.#:                      <computed />\n      source_dest_check:                      "true"\n      subnet_id:                              <computed />\n      tags.%:                                 "1"\n      tags.Name:                              "single-web"\n      tenancy:                                <computed />\n      user_data:                              "bb39081f46f182d0c939da0ddc7f19ebe347546b"\n      volume_tags.%:                          <computed />\n      vpc_security_group_ids.#:               <computed />\n\n  + aws_launch_configuration.LaunchConfiguration\n      id:                                     <computed />\n      associate_public_ip_address:            "false"\n      ebs_block_device.#:                     <computed />\n      ebs_optimized:                          <computed />\n      enable_monitoring:                      "true"\n      image_id:                               "ami-2d39803a"\n      instance_type:                          "t2.micro"\n      key_name:                               <computed />\n      name:                                   <computed />\n      root_block_device.#:                    <computed />\n      security_groups.#:                      <computed />\n      user_data:                              "7a3ce9d995656c1f1cc3c2b83effb561549ff9d3"\n\n  + aws_security_group.ELBSecurityGroup\n      id:                                     <computed />\n      arn:                                    <computed />\n      description:                            "Managed by Terraform"\n      egress.#:                               <computed />\n      ingress.#:                              "1"\n      ingress.2214680975.cidr_blocks.#:       "1"\n      ingress.2214680975.cidr_blocks.0:       "0.0.0.0/0"\n      ingress.2214680975.description:         ""\n      ingress.2214680975.from_port:           "80"\n      ingress.2214680975.ipv6_cidr_blocks.#:  "0"\n      ingress.2214680975.protocol:            "tcp"\n      ingress.2214680975.security_groups.#:   "0"\n      ingress.2214680975.self:                "false"\n      ingress.2214680975.to_port:             "80"\n      name:                                   "ELBSecurityGroup1"\n      owner_id:                               <computed />\n      revoke_rules_on_delete:                 "false"\n      vpc_id:                                 <computed />\n\n  + aws_security_group.instance\n      id:                                     <computed />\n      arn:                                    <computed />\n      description:                            "Managed by Terraform"\n      egress.#:                               <computed />\n      ingress.#:                              "1"\n      ingress.516175195.cidr_blocks.#:        "1"\n      ingress.516175195.cidr_blocks.0:        "0.0.0.0/0"\n      ingress.516175195.description:          ""\n      ingress.516175195.from_port:            "8080"\n      ingress.516175195.ipv6_cidr_blocks.#:   "0"\n      ingress.516175195.protocol:             "tcp"\n      ingress.516175195.security_groups.#:    "0"\n      ingress.516175195.self:                 "false"\n      ingress.516175195.to_port:              "8080"\n      name:                                   "EC2WebSG"\n      owner_id:                               <computed />\n      revoke_rules_on_delete:                 "false"\n      vpc_id:                                 <computed />\n\n\nPlan: 7 to add, 0 to change, 0 to destroy.\n\n------------------------------------------------------------------------\n\nNote: You didn\'t specify an "-out" parameter to save this plan, so Terraform\ncan\'t guarantee that exactly these actions will be performed if\n"terraform apply" is subsequently run.\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"inspect this and see everything Terraform promises to launch/provision for us!"}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.terraform.io/docs/configuration/data-sources.html",children:"Terraform - Data Sources"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.terraform.io/intro/getting-started/variables.html",children:"Terraform - Input Variables"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html#security-group-rules",children:"AWS Security Groups"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.terraform.io/docs/providers/aws/d/availability_zones.html",children:"Terraform  - Availability Zones"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.terraform.io/docs/providers/aws/",children:"Terraform - AWS Provider"})}),"\n"]})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);